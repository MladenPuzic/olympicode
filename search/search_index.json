{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Po\u010detna","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"takprog/","title":"Takprog Arhiva","text":"<p>Uskoro!</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/01_nesusedni/","title":"1 - Nesusedni","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Nikola Milosavljevi\u0107 Nikola Milosavljevi\u0107 Nikola Milosavljevi\u0107 Vladimir Milovanovi\u0107 <p>Kako imamo ta\u010dno 2 razli\u010dita slova, jedini na\u010din da string ne sadr\u017ei dva ista susedna slova je da se slova pojavljuju naizmeni\u010dno u stringu tj. \\(c_1c_2c_1c_2\\ldots\\) ili \\(c_2c_1c_2c_1\\ldots\\). Ovo je mogu\u0107e ako i samo ako je \\(|a_1 - a_2| \\leq 1\\). Zaista, ako je \\(|a_1 - a_2| &gt; 1\\), \"istro\u0161i\u0107emo\" jedno slovo u naizmeni\u010dnom pojavljivanju pre kraja stringa. Sa druge strane, ako je \\(a_1 = a_2\\), imamo 2 mogu\u0107a re\u0161enja (bilo koje slovo mo\u017ee biti prvo), a ako je \\(|a_1 - a_2|=1\\), re\u0161enje je jedinstveno jer moramo po\u010deti (i zavr\u0161iti) slovom koje se pojavljuje vi\u0161e puta.</p> <p>Slo\u017eenost algoritma je \\(O(a_1 + a_2)\\), zbog ispisa.</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/02_transfuzija/","title":"2 - Transfuzija krvi","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Andrej Iva\u0161kovi\u0107 Dimitrije Erdeljan Dimitrije Erdeljan Andrej Iva\u0161kovi\u0107 <p>Za po\u010detak, pacijenti O grupe su jednostavni: mogu da prime samo krv O grupe, tako da kod njih nemamo nikakvih odluka. U prvom prolazu kroz pacijente, mo\u017eemo njima dodeliti odgovaraju\u0107e koli\u010dine O krvi, i zatim u slede\u0107em prolazu razmatrati samo pacijente A, B i AB grupe.</p> <p>U slede\u0107em prolazu mo\u017eemo dodeliti krv pacijentima A grupe. Kod njih imamo izbor izme\u0111u A i O, ali je odluka jednostavna: sada kada nema vi\u0161e pacijenata O grupe, krv A grupe je strogo \"manje korisna\" od O, jer svi koji mogu da je prime mogu da prime i krv O grupe. Dakle, ako mo\u017eemo, bolje je da dodeljujemo krv A grupe i \u010duvamo O, koju \u0107emo koristiti samo ako vi\u0161e uop\u0161te nema krvi A grupe.</p> <p>Dalje, dodeljivanje krvi pacijentima B grupe mo\u017eemo uraditi na isti na\u010din kao za A. Na kraju, ostaju samo pacijenti AB-grupe, tako da vi\u0161e nije bitno koju krvnu grupu koristimo i mo\u017eemo im dodeliti proizvoljnu koje je preostalo u zalihama.</p> <p>Ako je u bilo kom trenutku u zalihama nedovoljno krvi za nekog pacijenta, prekidamo program i ispisujemo \"<code>nemoguce</code>\". U suprotnom, potrebno je da za svakog pacijenta sa\u010duvamo dodeljene jedinice krvi (npr. u nizu) i ispi\u0161emo ih na kraju.</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/03_prepisivaci/","title":"3 - Prepisiva\u010di","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Aleksa Milojevi\u0107 Mom\u010dilo To\u0161i\u0107 Vladimir Milenkovi\u0107 <p>Primetimo prvo da je udaljenost ta\u010daka sa koordinatama \\((x_A, y_A)\\) i \\((x_B, y_B)\\) jednaka \\(\\sqrt{(x_A-x_B)^2 + (y_B-y_A)^2}\\), a provera da li su paralelne prave odre\u0111ena ovim dvema, i ta\u010dkama \\((x_C, y_C)\\) \\((x_D, y_D)\\) je provera jednakosti koeficijenta pravca ovih prava \\(\\frac{y_A-y_B}{x_A-x_B}=\\frac{y_C-y_D}{x_C-x_D}\\), \u0161to kako bismo izbegli deljenje nulom mo\u017eemo zapisati ovako: \\((y_A-y_B)(x_C-x_D) = (x_A-x_B)(y_C-y_D)\\).</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/03_prepisivaci/#resenje-kada-n-leq-4","title":"Re\u0161enje kada \\(N \\leq 4\\)","text":"<p>Ukoliko je \\(N\\) manje od 4, jasno je da nema re\u0161enja. Ukoliko je \\(N\\) ta\u010dno 4, mo\u017eemo poku\u0161ati da obele\u017eimo unete ta\u010dke sa \\(A,B,C,D\\) u svakom redosledu i da proverimo da li va\u017ei relacija data u zadatku (da su prave \\(AB\\) i \\(CD\\) paralelne i da je udaljenost izme\u0111u \\(A\\) i \\(B\\) dva puta manja od udaljenosti izme\u0111u \\(C\\) i \\(D\\) ili obratno).</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/03_prepisivaci/#resenje-kada-n-leq-100","title":"Re\u0161enje kada \\(N \\leq 100\\)","text":"<p>Mo\u017eemo fiksirati bilo koje 4 ta\u010dke i proveriti da li va\u017ei relacija (prvu fiksiranu ozna\u010dimo sa \\(A\\), drugu sa \\(B\\) itd).</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/03_prepisivaci/#resenje-kada-n-leq-400","title":"Re\u0161enje kada \\(N \\leq 400\\)","text":"<p>Mo\u017eemo primetiti da ako fiksiramo \\(A\\), \\(B\\), i \\(C\\), ta\u010dka \\(D\\) se nalazi na jedinstvenoj pravoj kroz C, i to na jedinstvenoj udaljenosti (dva puta manjoj od \\(\\overline{CD}\\)), te treba posmatrati samo 2 mogu\u0107nosti za ta\u010dku \\(D\\): ta\u010dka na toj pravoj na udaljenosti \\(\\overline{AB}/2\\) \"levo\" i \"desno\" od C. Ako dodamo te ta\u010dke u po\u010detni niz i sortiramo, svako dodatno pojavljivanje neke ta\u010dke \\(m\\) puta zna\u010di da ta ta\u010dka mo\u017ee biti na kra\u0107oj osnovici za \\(m\\) trojki, te je re\u0161enje zbir svih \\(m\\) vrednosti za sve ta\u010dke, podeljeno sa 2 (jer smo ura\u010dunali obe ta\u010dke kra\u0107e osnovice).</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/03_prepisivaci/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Ako posmatramo primer sumnjivog \u010detvorougla, mo\u017ee nam pasti na pamet da produ\u017eimo du\u017e AC i BD, i dupliramo ih (inspiracija iz \\(AB=2\\overline{CD})\\), i tada \u0107emo zbog Talesove teoreme dobiti da je uslovu zadatka ekvivalentan uslov da se te dve du\u017ei seku u istoj ta\u010dki (poku\u0161ajte da doka\u017eete, zdravo je i zabavno). Ova ta\u010dka je slika ta\u010dke A u odnosu na C i ta\u010dke B u odnosu na D. Kako je \\(N&lt;1500\\), prirodno je razmi\u0161ljati u smeru re\u0161enja s kvadratnom slo\u017eeno\u0161\u0107u, te i posmatranja svaka dva para ta\u010daka. Ukoliko za svake dve ta\u010dke \\(X,Y\\) pamtimo sve ta\u010dke koje se dobijaju kao slika X u odnosu na Y, vidimo da ta\u010dka koja se pojavljuje \\(k\\) puta odre\u0111uje \\(\\binom{k}{2}\\)=\\(\\frac{k*(k+1)}{2}\\) sumnjivih \u010detvorouglova, te za svaku upam\u0107enu ta\u010dku treba sabrati ovu vrednost. Ovo je mogu\u0107e implementirati sortiranjem slika ta\u010daka predstavljenih kao par brojeva (koordinata) i brojanjem pojavljivanja svake.</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/04_cenzura/","title":"4 - Cen*ura","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Pavle Martinovi\u0107 Aleksa Plav\u0161i\u0107"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/04_cenzura/#zabranjena-rec-je-a","title":"Zabranjena re\u010d je 'a'","text":"<p>U ovom podzadatku je o\u010dito dovoljno samo cenzurisati sva pojavljivanja slova 'a', \u0161to mo\u017eemo da uradimo tako \u0161to linearno pro\u0111emo kroz \\(T\\) i na\u0111emo svuda gde se pojavljuje to slovo, zamenimo sa *, i izbrojimo koliko se puta pojavio.</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/04_cenzura/#sva-slova-zabranjene-reci-su-a","title":"Sva slova zabranjene re\u010di su 'a'","text":"<p>Isto je re\u0161enje kao u prethodnom podzadatku, samo presko\u010dimo prvih \\(M-1\\) pojavljivanja slova 'a'.</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/04_cenzura/#da-li-je-jedna-rec-podsekvenca-druge","title":"Da li je jedna re\u010d podsekvenca druge?","text":"<p>Da bismo umeli da pristupimo ovom problemu potrebno je analizirati algoritam kako proveravamo da li je jedna re\u010d podsekvenca druge.  Ovo se vr\u0161i pohlepnim algoritmom. Naime, neka proveravamo da li je re\u010d \\(S\\) podsekvenca re\u010di \\(T\\). Onda prolazimo linearno kroz re\u010d \\(T\\) dok pamtimo najdu\u017ei prefiks \\(S\\) koji nam se pojavljuje do sad kao podsekvenca.  Sada, kada slede\u0107i put nai\u0111emo na slede\u0107e slovo koje bi nam trebalo da bismo pove\u0107ali du\u017einu tog najve\u0107eg prefiksa (to jest slede\u0107e slovo u \\(S\\)), znamo da nam je optimalno da  ga iskoristimo u konstrukiciji \\(S\\) kao podsekvence. To zna\u010di da u tom slu\u010daju mo\u017eemo da pove\u0107amo du\u017einu tog najdu\u017eeg prefiksa, dok on u suprotnom ostaje isti. Na kraju vidimo da li je najdu\u017ei prefiks \\(S\\) koji je podsekvenca \\(T\\) upravo ceo \\(S\\) u tom slu\u010daju je odgovor \"DA\", a u suprotnom \"NE\".</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/04_cenzura/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Sada kada smo prou\u010dili taj algoritam, mo\u017eemo da re\u0161imo ceo zadatak. Re\u0161enje \u0107emo vr\u0161iti dinami\u010dkim programiranjem, najsli\u010dnije DP re\u0161enju za najdu\u017eu zajedni\u010dku podsekvencu dve niske. Naime neka je \\(DP[n][k]\\) vrednost \"koliko najmanje karaktera treba cenzurisati u prvih \\(n\\) slova \\(T\\) da bi najdu\u017ei prefiks \\(S\\) koji je podsekvenca tih prvih \\(n\\) karaktera du\u017eine ta\u010dno \\(k\\)\". Sada ove vrednosti u dinami\u010dkom programiranju se lako ra\u010dunaju: ako ne \u017eelimo da pove\u0107amo vrednost \\(k\\), onda kad nai\u0111emo na slovo koje bi nam ga pove\u0107alo, moramo da cenzuri\u0161emo, a u suprotnom samo pove\u0107amo vrednost \\(k\\). Kako stanja ima \\(MN\\) i svako ima konstantno prelaza, dobijamo ukupno vremensku i memorijsku slo\u017eenost \\(O(MN)\\). </p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/05_nocna-voznja/","title":"5 - No\u0107na vo\u017enja","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Mladen Puzi\u0107 Mladen Puzi\u0107 i Pavle Martinovi\u0107 Tadija \u0160ebez Tadija \u0160ebez"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/05_nocna-voznja/#podzadatak-kada-je-n-q-leq-4000","title":"Podzadatak kada je \\(N, Q \\leq 4000\\)","text":"<p>Mo\u017eemo da odr\u017eavamo trenutni redosled naselja u nizu. Operacija zamene se svodi na jednostavno zamenjivanje dva \u010dlana niza, dok je odgovaranje na drugi tip doga\u0111aja malo komplikovanije. Mo\u017eemo da pustimo DFS ili BFS algoritam iz naselja \\(x\\) kako bismo na\u0161li udaljenosti od istog do svakog drugog naselja. Nakon \u0161to smo na\u0161li i sa\u010duvali udaljenosti mo\u017eemo da pro\u0111emo kroz deo niza od \\(l\\) do \\(r\\) i na\u0111emo najve\u0107u udaljenost. Vremenska slo\u017eenost ovog re\u0161enja je \\(O(QN)\\).</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/05_nocna-voznja/#podzadatak-kada-je-svako-naselje-susedno-sa-najvise-dva-druga-naselja","title":"Podzadatak kada je svako naselje susedno sa najvi\u0161e dva druga naselja","text":"<p>U ovom slu\u010daju naselja zapravo formiraju lanac i mo\u017eemo da ih pore\u0111amo u niz po\u010dev\u0161i od jednog kraja. Za svako naselje zapamtimo njegovu poziciju u ovom nizu. Kada tra\u017eimo najve\u0107u udaljenost od naselja \\(x\\) do skupa naselja od \\(l\\) do \\(r\\) bitna su nam samo dva naselja iz tog skupa, naselje sa najmanjom i naselje sa najve\u0107om pozicijom (udaljeno\u0161\u0107u od kraja lanca). Ovo mo\u017eemo efikasno da implementiramo kori\u0161\u0107enjem neke strukture podataka koja podr\u017eava upite za minimum/maksimum na podnizu i promenu \u010dlana niza. Na primer mo\u017eemo da koristimo segmentno stablo i dobijemo vremensku slo\u017eenost \\(O(N + QlogN)\\).</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/05_nocna-voznja/#podzadatak-kada-je-u-svakom-dogaaju-x-1-i-p_a-p_b-neq-1","title":"Podzadatak kada je u svakom doga\u0111aju \\(x = 1\\) i \\(p_a, p_b \\neq 1\\)","text":"<p>Kako se u svakom pitanju tra\u017ei najve\u0107a udaljenost od naselja 1, na po\u010detku pustimo DFS ili BFS algoritam iz ovog naselja i na\u0111imo uzaljenosti do svakog drugog naselja. \u010cuvajmo niz gde je \\(i\\)-ti \u010dlan udaljenost od naselja 1 do naselja \\(p_i\\). Pitanja se svode na tra\u017eenje maksimuma na podnizu ovog niza. Mo\u017eemo i ovde da iskoristimo segmentno stablo za efikasne operacije tra\u017eenja maksimuma i promene u nizu nakon doga\u0111aja prvog tipa. Vremensa slo\u017eenost je \\(O(N + QlogN)\\).</p>"},{"location":"takprog/2021%20%7C%202022/01%20Kvalifikacije%201/05_nocna-voznja/#resenje-bez-dodatnih-ogranicenja","title":"Re\u0161enje bez dodatnih ograni\u010denja","text":"<p>Sli\u010dno kao kod re\u0161enja za lanac za svako pitanje mo\u017eemo da na\u0111emo dva naselja od kojih \u0107e uvek jedno biti najdalje bez obzira na odabir naselja \\(x\\). Za ovo re\u0161enje treba nam malo teorije vezane za stabla. Pre\u010dnik stabla je najve\u0107a udaljenost izme\u0111u dva \u010dvora, a krajevi pre\u010dnika su \u010dvorovi koji su na toj najve\u0107oj udaljenosti. Korisna osobina pre\u010dnika stabla je to da je najdalji \u010dvor od proizvoljnog \u010dvora uvek jedan od krajeva pre\u010dnika. Naselja koja \u0107emo tra\u017eiti su krajevi pre\u010dnika podstabla koje obuhvata naselja \\(p_l, p_{l+1}, \\dots, p_r\\). I u ovom re\u0161enju mo\u017eemo koristiti segmentno stablo. Za svaki segment \u010duvajmo krajeve pre\u010dnika, a pre\u010dnik za dva spojena segmenta tra\u017eimo tako \u0161to na\u0111emo najve\u0107u udaljenost izme\u0111u 2 od 4 \u010dvora koji su krajevi pre\u010dnika levog i desnog segmenta. Ostaje jo\u0161 da na\u0111emo na\u010din kako efikasno da na\u0111emo udaljenost izme\u0111u dva \u010dvora. Mo\u017eemo da postavimo \u010dvor 1 kao koren i izra\u010dunamo dubinu svakog \u010dvora \\(depth(x)\\). Distanca izme\u0111u dva \u010dvora \\(x\\) i \\(y\\) je \\(depth(x) + depth(y) - 2 depth(LCA(x, y))\\), gde je \\(LCA(x, y)\\) najmanji zajedni\u010dki predak \u010dvorova \\(x\\) i \\(y\\), odnosno \u010dvor na kom se put od \\(x\\) do korena i put od \\(y\\) do korena sre\u0107u. Najmanji zajedni\u010dki predak mo\u017ee se na\u0107i u \\(O(logN)\\) sa binary lifting tehnikom ili u \\(O(1)\\) sa sparse tabelom nad Ojlerovim putem. Preprocesiranje za obe opcije je vremenske i memorijeske slo\u017eenosti \\(O(NlogN)\\), a celo re\u0161enje vermenske slo\u017eenosti \\(O(NlogN + Q log^2 N)\\) ili \\(O(NlogN + QlogN)\\) u zavisnosti od odabrane tehnike.</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/01_madjionicar/","title":"1 - Ma\u0111ioni\u010dar","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Vladimir Milovanovi\u0107 Vladimir Milovanovi\u0107"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/01_madjionicar/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Po\u0161to je u zadatku poznata karta (odnosno njena vrednost \\(K\\)) koja se nalazi direktno iznad tra\u017eene karte, ako se \u0161pil karata posmatra kao niz pozitivnih celobrojnih vrednosti, to \u0107e drugim re\u010dima zna\u010diti, da je postavkom zadatka data vrednost u nizu pod indeksom za jedan manjim u odnosu na indeks zahtevane vrednosti. Stoga je u prvom koraku potrebno prona\u0107i indeks \\(i\\) u nizu pod kojim je zapisana data vrednost \\(K\\), a zatim u narednim koraku ispisati vrednost pod indeksom \\(i+1\\). Kako bi se osvojili svi poeni, neophodno je obratiti pa\u017enju na jedan specijalan slu\u010daj, koji je obja\u0161njen u drugom javnom primeru u postavci zadatka, a to je kada je \\(i=N\\). U ovom slu\u010daju indeks tra\u017eene karte nije \\(i+1\\), odnosno \\(N+1\\), iz razloga \u0161to on ne postoji, ve\u0107 je to prva karta u \u0161pilu, odnosno vrednost pod indeksom \\(i=1\\), uz pretpostavku da indekse ra\u010dunamo po\u010dev\u0161i od jedinice, a ne od nule. Elegantan na\u010din da se pokrije ovaj izuzetak jeste uzeti \\(i+1\\) i prona\u0107i ostatak pri deljenju sa \\(N\\), to jest indeks tra\u017eene vrednosti \u0107e biti \\((i+1) \\mod N\\) i sve \u0161to treba uraditi u zadatku nakon u\u010ditavanja odgovaraju\u0107ih podataka je ispis vrednosti pod pomenutim indeksom.</p> <p>Kako se u najgorem slu\u010daju vrednost niza \\(K\\) mo\u017ee nalaziti pod indeksom \\(N\\), neophodno je u gore opisanom prvom koraku pro\u0107i kroz \u010ditav niz da bi se to utvrdilo, pa je asimptotska vremenska slo\u017eenost algoritma \\(\\mathcal{O}(N)\\), odnosno linearna po du\u017eini niza.</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/02_ekskurzija/","title":"2 - Ekskurzija","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Aleksa Plav\u0161i\u0107 Aleksa Plav\u0161i\u0107 Dragan Uro\u0161evi\u0107 Aleksa Milisavljevi\u0107"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/02_ekskurzija/#resenje-kad-n-3","title":"Re\u0161enje kad \\(N = 3\\)","text":"<p>U ovom slu\u010daju, broj grupa ne mo\u017ee biti ve\u0107i od \\(3\\). Prema tome, potrebno je samo odrediti minimalni broj bananica za sve tri vrednosti za broj grupa. Ako je \\(K=1\\), onda u toj grupi ima 3 u\u010denika, minimalni broj bananica je \\(1+2+3=6\\). Ako je  \\(K=2\\), onda u jednoj grupi moraju biti dva u\u010denika (i minimalan broj bananica je \\(1+2=3\\)), a u drugoj grupi 1 u\u010denik (i minimalan broj bananica je \\(1\\)), pa je ukupan minimalan broj bananica \\(4\\). Ako je \\(K=3\\), onda je u svakoj grupi \\(1\\) u\u010denik, pa je ukupan minimalan broj bananica \\(3\\).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/02_ekskurzija/#resenje-kad-k-1","title":"Re\u0161enje kad \\(K = 1\\)","text":"<p>U ovom slu\u010daju, svi u\u010denici su u istoj grupi i minimalan broj bananica je $$ 1+2+3+\\dotsb + N = \\frac{N\\cdot(N+1)}{2}. $$ Potrebno je voditi ra\u010duna da poslednji proizvod mo\u017ee biti vrlo veliki broj.</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/02_ekskurzija/#resenje-kad-n-m-leq-10","title":"Re\u0161enje kad \\(N, M \\leq 10\\)","text":"<p>U ovom slu\u010daju, do re\u0161enja se mo\u017ee do\u0107i primenom pretrage sa vra\u0107anjem (bektrek).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/02_ekskurzija/#resenje-kad-n-leq-2000","title":"Re\u0161enje kad \\(N \\leq 2000\\)","text":"<p>U ovom slu\u010daju se primenjuje glavno re\u0161enje u kojem ne primetimo sve formule, ve\u0107 primenjujemo neke manje efikasne metode (npr. prolazak kroz sve grupe).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/02_ekskurzija/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Potrebno je primetiti da grupe treba da budu pribli\u017eno jednake veli\u010dine. Naime, ako je \\(c_1\\) broj u\u010denika u jednoj grupi, \\(c_2\\) broj u\u010denika u drugoj grupi i pri tome va\u017ei \\(c_2 \\geq c_1 + 2\\), onda je minimalni broj bananica za te dve grupe $$ B_1 = \\frac{c_1\\cdot(c_1+1)}{2} + \\frac{c_2\\cdot (c_2+1)}{2} = \\frac{c_1^2+c_2^2+c_1+c_2}{2}. $$ Ako jednog u\u010denika prebacimo iz druge grupe u prvu grupu, onda je minimalni broj bananica u te dve grupe  $$ B_2 = \\frac{(c_1+1)\\cdot(c_1+2)}{2} + \\frac{(c_2-1)\\cdot c_2}{2} = \\frac{c_1^2+c_2^2+3c_1-c_2+2}{2}. $$ Razlika dva poslednja broja je $$ B_1 - B_2 = \\frac{2c_2 - 2c_1 - 2}{2} = c_2 - c_1 -1 &gt; 0, $$ tj. minimalan broj bananica se smanjio.</p> <p>Prema tome, sve grupe treba da imaju pribli\u017eno jednako elemenata. Ako je broj u\u010denika deljiv brojem grupa, onda bi svaka grupa imala \\(N/K\\) u\u010denika. Ako broj u\u010denika nije deljiv brojem grupa onda \u0107e jedan deo grupa imati \\(N_1 = \\lfloor N/K \\rfloor\\),  a drugi deo grupa \\(N_2 = N_1 + 1\\). Broj grupa \\(K_2\\) koje imaju \\(N_2\\) u\u010denika je $$ K_2 = N - K \\cdot \\lfloor N/K\\rfloor = N \\text{ mod } K, $$ gde je \\(N \\text{ mod } K\\) ostatak pri deljenju broja \\(N\\) brojem \\(K\\). Kona\u010dno, minimalan ukupan broj bananica je $$ (K-K_2) \\cdot \\frac{N_1\\cdot (N_1+1)}{2} + K_2 \\cdot \\frac{N_2\\cdot (N_2+1)}{2}. $$</p> <p>Slo\u017eenost algoritma je \\(O(1)\\).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/03_palidrom-safl/","title":"3 - Palindrom \u0161afl","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Aleksa Plav\u0161i\u0107 Aleksa Plav\u0161i\u0107 Lazar Milenkovi\u0107 Aleksa Milisavljevi\u0107 <p>Sa \\(N\\) \u0107emo ozna\u010diti du\u017einu date niske, sa \\(\\Sigma\\) broj karaktera u alfabetu, u na\u0161em slu\u010daju \\(26\\).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/03_palidrom-safl/#resenje-kada-su-dva-slova-b-a-ostala-a","title":"Re\u0161enje kada su dva slova 'b', a ostala \u2018a\u2019","text":"<p>Optimalno re\u0161enje u ovom slu\u010daju je ili pomeriti oba slova na dva centralna polja ili pomeriti jedno slovo na poziciju simetri\u010dnu poziciji drugog slova.</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/03_palidrom-safl/#resenje-kada-n-leq-50","title":"Re\u0161enje kada \\(N \\leq 50\\)","text":"<p>Zadatak mo\u017eemo re\u0161iti tako \u0161to pretpostavimo levu i desnu granicu optimalne podniske, \\(i\\) i \\(j\\), respektivno (broj mogu\u0107nosti je \\(\\Theta(N^2)\\)). Za svaku mogu\u0107nost \\((i,j)\\), u linearnom vremenu proverimo da li je mogu\u0107e izvr\u0161iti \u0161afl tako da je rezultuju\u0107a niska palindrom. Posmatramo interval \\([i,j]\\) i simetri\u010dni interval \\([n-j+1, n-i+1]\\). Ukoliko izvan ova dva intervala, ulazna niska nije palindromska, tada je nemogu\u0107e promeniti bilo \u0161ta u \\([i,j]\\) tako da re\u0161enje postane palindrom. Drugim re\u010dima, pretpostavka \\([i,j]\\) nije validna. U suprotnom, kada interval \\([i,j]\\) ne sadr\u017ei sredinu niske, dovoljno je proveriti da za svako slovo va\u017ei da je njegova u\u010destanost u \\([i,j]\\) ista kao i njegova u\u010destanost u \\([N-j+1, N-i+1]\\). Kada \\([i,j]\\) sadr\u017ei sredinu niske, provera je sli\u010dna, samo u obzir treba uzeti i preklapanja intervala \\([i,j]\\) i \\([N-j+1, N-i+1]\\).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/03_palidrom-safl/#resenje-kada-n-leq-3000","title":"Re\u0161enje kada \\(N \\leq 3000\\)","text":"<p>Prethodna ideja se mo\u017ee ubrzati ako primetimo da kada fiksiramo dva kraja proveru mo\u017eemo izvr\u0161iti u vremenskoj slo\u017eenosti \\(O(\\Sigma)\\).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/03_palidrom-safl/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Posmatrajmo najpre najve\u0107i broj \\(l\\), takav da je prefiks niske du\u017eine \\(l\\) jednak sufiksu du\u017eine \\(l\\) u obrnutom redosledu. Optimalno re\u0161enje nikada ne\u0107e sadr\u017eati prvih \\(l\\) i poslednjih \\(l\\) slova niske. Najpre \u0107emo proveriti da li je mogu\u0107e izvr\u0161iti \u0161afl na samo levoj polovini niske. To proveravamo tako \u0161to tra\u017eimo najmanji indeks \\(i_1 \\le |T|/2\\) takav da za svako slovo va\u017ei da je njegova u\u010destanost u intervalu \\([l+1,i_1]\\) ista kao i njegova u\u010destanost u intervalu \\([N-i_1+1, N-l]\\) i da je ulazna niska palindrom u intervalu \\([i_1, N-i_1]\\). Ukoliko takav indeks postoji kandidat za re\u0161enje je interval \\([l,i_1]\\).</p> <p>U nastavku \u0107emo pretpostaviti da optimalno re\u0161enje sadr\u017ei sredi\u0161nji deo niske i po\u010dinje od indeksa \\(l+1\\). (Po\u0161to su po definiciji vrednosti \\(l\\) slova u nisci na pozicijama \\(l+1\\) i \\(N-l\\) razli\u010dita, optimalna podniska mora uvek sadr\u017eati bar jednu od ove dve pozicije. U implementaciji je potrebno proveriti oba slu\u010daja pojedina\u010dno.) Tra\u017eimo najmanji indeks \\(i_2 &gt; N/2\\) takav da za svako slovo va\u017ei da je njegova u\u010destanost u intervalu \\([i_2+1, N-l]\\) manja ili jednaka njegovoj u\u010destanosti u intervalu \\([l+1, i_2]\\). Ukoliko takav indeks postoji, kandidat za re\u0161enje je interval \\([l+1, i_2]\\). Ovo mo\u017eemo garantovati, jer nam se garantuje da \u0107e postojati takav interval. Iz toga mo\u017eemo zaklju\u010diti da \u0107e i ,,centralni deo\u2019\u2019 mo\u0107i da se ispreme\u0161ta da bude palindrom.</p> <p>U\u010desestanost slova u intervalima mo\u017eemo odrediti kori\u0161\u0107enjem prefiksnih suma i opisano re\u0161enje je mogu\u0107e implementirati u vremenskoj slo\u017eenosti od \\(O(N \\cdot \\Sigma)\\). Malo pa\u017eljivija implementacija daje vremensku slo\u017eenost od \\(O(N)\\). Postoje i alternativna re\u0161enja zadatka koja koriste binarnu pretragu ili pretra\u017eiva\u010dka stabla i rade u slo\u017eenosti \\(O(N \\log N)\\), \u0161to je tako\u0111e dovoljno za sve poene na ovom zadatku.</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/04_guster/","title":"4 - Gu\u0161ter","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Aleksa Plav\u0161i\u0107 Aleksa Plav\u0161i\u0107 Lazar Milenkovi\u0107 Aleksa Milisavljevi\u0107 <p>Ovaj zadatak se re\u0161ava dinami\u010dkim programiranjem, \u0161to se vidi po tome \u0161to je re\u010d o optimizaciji i po tome \u0161to na\u0107i optimalno re\u0161enje za dati ulaz zavisi od optimalnih re\u0161enja za podniske tog ulaza.</p> <p>Osnova re\u0161enja za tri podzadatka je ista: dobiti \\(50\\) ili \\(100\\) poena na ovom zadatku zahteva da se primete mogu\u0107e optimizacije. Neka je \\(n\\) du\u017eina date niske \\(s\\) (indeksirane od nule).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/04_guster/#resenje-za-n-leq-100","title":"Re\u0161enje za \\(n \\leq 100\\)","text":"<p>Defini\u0161imo dvodimenzioni niz \\(\\mathit{dp}\\) formata \\((n+1)\\times(n+1)\\):</p> <ul> <li>\\(\\mathit{dp}[i][j]\\) za \\(i,j&gt;0\\): optimalan zmija-skor koji sufiks niske \\(s\\) du\u017eine \\(i\\) mo\u017ee da ostvari, ukoliko se u prvog redu logotipa nalazi \\(j\\) znakova; ako ne postoji nijedan takav dozvoljen logotip, \\(-\\infty\\);</li> <li>\\(\\mathit{dp}[i][0]\\) i \\(\\mathit{dp}[0][j]\\) mogu da se ignori\u0161u i nemaju nikakvo posebno zna\u010denje.</li> </ul> <p>Ukoliko znamo sve vrednosti \\(\\mathit{dp}[i][j]\\), tada je re\u0161enje jednako \\(\\max_{2 \\leq j \\leq n} \\{\\mathit{dp}[n][j]\\}\\): optimalno re\u0161enje sadr\u017ei bilo koji (dozvoljen) broj simbola u prvom redu.</p> <p>Najpre primetimo neke osnovne \u010dinjenice o \\(\\mathit{dp}[i][j]\\) koje slu\u017ee kao temelj odre\u0111ivanja kona\u010dnog re\u0161enja:</p> <ul> <li>\\(\\mathit{dp}[i][i] = 0\\), re\u010d je o re\u0161enju u kom ceo logotip za sufiks du\u017eine \\(i\\) staje u jedan red;</li> <li>\\(\\mathit{dp}[i][j] = -\\infty\\) za \\(i&lt;j\\);</li> <li>\\(\\mathit{dp}[i][1] = -\\infty\\) (nije mogu\u0107e da u bilo kom redu bude samo jedan znak).</li> </ul> <p>Za dalje ra\u010dunanje se oslanjamo na naredno zapa\u017eanje:</p> <p>Ako sufiks niske \\(s\\) du\u017eine \\(i\\) sadr\u017ei \\(j\\) znakova (\\(1&lt;j&lt;i\\)), optimalan zmija-skor koji mo\u017ee da se ostvari je najve\u0107i od svih zbirova \\(\\mathit{dp}[i-j][k]\\) i broja poklapanja znakova ukoliko se u prvom redu nalazi \\(j\\), a u drugom \\(i\\) znakova.</p> <p>Broj poklapanja mo\u017ee da se izra\u010duna proverom da li se poklapaju znaci \\(s\\) na pozicijama \\(n-i+j+p-1\\) i \\(n-i+j-p\\), pri \u010demu se \\(p\\) menja. Ako defini\u0161emo \\(P(t,p)\\) kao indikator da li se ovi znaci na pozicijama \\(n-t+p-1\\) i \\(n-t-p\\) poklapaju (dakle \\(0\\) ili \\(1\\); \\(0\\) je odgovor i u slu\u010daju da je jedan od ovih znakova van opsega niske), prethodna \u010dinjenica mo\u017ee da se zapi\u0161e u vidu naredne rekurentne veze:</p> \\[ \\mathit{dp}[i][j] = \\max_{2&lt;k\\leq i-j} \\{\\mathit{dp}[i-j][k] + \\sum_{p=1}^{\\min(j,k)} P(i-j,p)\\} \\] <p>Sve vrednosti \\(\\mathit{dp}[i][j]\\) mogu da se odrede prate\u0107i ovu formulu. U pseudokodu, ovako izgleda glavni deo algoritma: <pre><code>for i in 1 .. n:\n    for j in 2 .. i:\n        dp[i][j] = -\u221e\n        for k in 2 .. j:\n            broj_poklapanja = 0\n            for p in 1 .. min(j, k):\n                broj_poklapanja += P(i - j, p)\n            dp[i][j] = max(dp[i][j], dp[i - j][k] + broj_poklapanja)\n</code></pre></p> <p>Kona\u010dna vremenska slo\u017eenost je \\(O(n^4)\\), a memorijska \\(O(n^2)\\).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/04_guster/#resenje-za-n-leq-500","title":"Re\u0161enje za \\(n \\leq 500\\)","text":"<p>U ovom slu\u010daju potrebno je primetiti da pri odre\u0111ivanju \\(\\mathit{dp}[i][j]\\) i \\(\\mathit{dp}[i][j+1]\\) treba da vodimo ra\u010duna o naredne dve sume: * \\(\\sum_{p=1}^{\\min(j,k)} P(i-j,p)\\); * \\(\\sum_{p=1}^{\\min(j,k+1)} P(i-j,p)\\) a njihova razlika je ili \\(0\\) ili poslednji sabirak u zbiru: \\(P(i-j,k+1)\\).</p> <p>Prethodno re\u0161enje stoga mo\u017ee da se uprosti time \u0161to se promenljiva <code>broj_poklapanja</code> a\u017eurira svaki put kada se a\u017eurira \\(k\\). Implementacija se menja na slede\u0107i na\u010din: <pre><code>for i in 1 .. n:\n    for j in 2 .. i:\n        dp[i][j] = -\u221e\n        broj_poklapanja = P(i - j, 1)\n        for k in 2 .. j:\n            if k &lt;= j:\n                broj_poklapanja += P(i - j, k)\n            dp[i][j] = max(dp[i][j], dp[i - j][k] + broj_poklapanja)\n</code></pre></p> <p>Rezultuju\u0107a slo\u017eenost je \\(O(n^3)\\), a memorijska \\(O(n^2)\\).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/04_guster/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Re\u0161enje za svih \\(100\\) poena radi u vremenskoj slo\u017eenosti \\(O(n^2)\\) i zasniva se na izbegavanju ponavljanja nepotrebnog rada.</p> <p>Primetimo da u re\u0161enju prethodnog podzadatka imamo iteracije po \\(j\\) i po \\(k\\), koje odre\u0111uju du\u017eine dva uzastopna reda. Kako se a\u017eurira \\(j\\), menja se poslednji znak u prvom redu i prvi znak u drugom redu, kao i podaci o svim poklapanjima. Stoga u optimizovanom re\u0161enju \u017eelimo da iskoristimo iste podatke o poklapanjima \u0161to je mogu\u0107e du\u017ee tako \u0161to \u0107e spoljna iteracija biti po polo\u017eaju poslednjeg znaka prvog reda. Sufiksu du\u017eine \\(z+d\\), u kom prvi red ima du\u017einu \\(d\\), prvi red se zavr\u0161ava znakom sa indeksom \\(n-z-1\\) i drugi red po\u010dinje znakom sa indeksom \\(n-z\\) \u2013 spoljna iteracija je po \\(z\\), unutra\u0161nja po \\(d\\).</p> <p>Za dobijanje kona\u010dnog re\u0161enja neophodno je posmatrati \u0161ta se de\u0161ava u slu\u010daju dva susedna reda u logotipu ukoliko drugi red po\u010dinje znakom sa indeksom \\(n-z\\). Pretpostavimo da prvi red ima du\u017einu \\(d\\).</p> <ul> <li>Ako je prvi red kra\u0107i od drugog, broj znakova koji se poklapaju je jednak \\(\\sum_{p=1}^{d} P(i-j,p)\\). Dakle, jedino je pitanje odrediti neko \\(k \\geq d\\) tako da je \\(\\mathit{dp}[z][k]\\) maksimizovano.</li> <li>Ako je prvi red du\u017ei od ili jednake du\u017eine kao i drugi, tada nas me\u0111u svim \\(\\mathit{dp}[z][k]+\\sum_{p=1}^{k} P(i-j,p)\\) za koje je \\(k\\leq d\\) zanima ono najve\u0107e.</li> </ul> <p>U prvom slu\u010daju je dovoljno uvesti matricu \\(m\\) definisanu na slede\u0107i na\u010din:</p> <ul> <li>\\(m[i][j] = \\max_{j\\leq k\\leq i}\\{\\mathit{dp}[i][k]\\}\\) za \\(j \\leq i\\)</li> </ul> <p>koja mo\u017ee da se izra\u010duna pomo\u0107u rekurentne veze:</p> <ul> <li>\\(m[i][i] = \\mathit{dp}[i][i] = 0\\);</li> <li>\\(m[i][j] = \\max\\{\\mathit{dp}[i][j],m[i][j+1]\\}\\), za \\(0\\leq j&lt;i\\).</li> </ul> <p>U drugom slu\u010daju radimo sli\u010dnu stvar kao u drugom podzadatku: pratimo aktuelno najve\u0107e \\(\\mathit{dp}[z][k] + \\sum_{p=1}^{k} P(i-j,p)\\) za sve \\(k\\leq d\\). To vodi narednom pseudokodu (izuzev inicijalizacije): <pre><code>for d in 2 .. n:\n    broj_poklapanja[1] = P(i - j, 1)\n    sufiks_max[d][d] = dp[d][d]\n    poklapanje_plus_ostatak[0] = 0;\n    for k in 1 .. d:\n        sufiks_max[d][d - k] = max(sufiks_max[d][d - k + 1], dp[d][d - k]);\n        poklapanje_plus_ostatak[k] = 0;\n    for t in 2 .. min(d, n - d):\n        broj_poklapanja[t] = broj_poklapanja[t - 1] + P(d, t);\n        poklapanje_plus_ostatak[t] = broj_poklapanja[t] + dp[d][t];\n        dp[d + t][t] = max(dp[d + t][t], sufiks_max[d][t] + broj_poklapanja[t]);\n    max_zbir = 0;\n    for j in 2 .. (n - d):\n        if j &lt;= d:\n            max_do_sad = max(max_do_sad, poklapanje_plus_ostatak[j]);\n        dp[d + j][j] = max(dp[d + j][j], max_do_sad);\n</code></pre></p> <p>Za kraj, pomenimo da je mogu\u0107e dobiti sve poene \u010dak i kada se implementira re\u0161enje slo\u017eenosti \\(O(n^2 \\log n)\\), pod uslovom da je konstanta sakrivena \\(O\\)-notacijom dovoljno mala. Jedno ovakvo re\u0161enje se zasniva na idejama iz prva dva podzadatka, pri \u010demu se ra\u010dunanje tra\u017eenog minimuma vr\u0161i kori\u0161\u0107enjem segmentnog stabla. Me\u0111utim, re\u0161enje vremenske slo\u017eenosti \\(O(n^2)\\) je kra\u0107e i br\u017ee.</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/05_carobnjak/","title":"5 - \u010carobnjak","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Aleksa Milisavljevi\u0107 Aleksa Milisavljevi\u0107 Aleksa Milisavljevi\u0107 Pavle Martinovi\u0107"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/05_carobnjak/#resenje-za-n-leq-10","title":"Re\u0161enje za \\(N \\leq 10\\)","text":"<p>U ovom slu\u010daju mo\u017eemo za svaki odabir \\(K\\) od \\(N\\) elemenata isprobati sve mogu\u0107e na\u010dine da izvr\u0161imo operacije. Vremenska slo\u017eenost je \\(O({N \\choose K} \\cdot 2^K)\\).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/05_carobnjak/#resenje-za-n-leq-200","title":"Re\u0161enje za \\(N \\leq 200\\)","text":"<p>U ovom podzadatku do re\u0161enja mo\u017eemo do\u0107i primenom dinami\u010dkog programiranja. Defini\u0161imo \\(dp[l][r][p][g][h]\\) na slede\u0107i na\u010din:</p> <ul> <li>Za \\(g=0, h=0\\) najve\u0107a vrednost tako da u nizu napitaka ostane napitak sa tom mo\u0107i, pa onda napici iz intervala \\([l,r]\\) i da smo izvan intervala odabrali da zadr\u017eimo \\(p\\) elemenata.</li> <li>Za \\(g=0, h=1\\) najmanja vrednost tako da u nizu napitaka ostane napitak sa tom mo\u0107i, pa onda napici iz intervala \\([l,r]\\) i da smo izvan intervala odabrali da zadr\u017eimo \\(p\\) elemenata.</li> <li>Za \\(g=1, h=0\\) najve\u0107a vrednost tako da u nizu napitaka ostane napitak sa tom mo\u0107i, pre njega napici iz intervala \\([l,r]\\) i da smo izvan intervala odabrali da zadr\u017eimo \\(p\\) elemenata.</li> <li>Za \\(g=1, h=1\\) najmanja vrednost tako da u nizu napitaka ostane napitak sa tom mo\u0107i, pre njega napici iz intervala \\([l,r]\\) i da smo izvan intervala odabrali da zadr\u017eimo \\(p\\) elemenata.</li> </ul> <p>Kako se operacijama isklju\u010divo oduzima vrednost jednog kraja od vrednosti drugog, to se pronala\u017eenje maksimalne ili minimalne vrednosti na jednom kraju upravo svodi na pronala\u017eenje minimalne odnosno maksimalne vrednosti na suprotnom i primenu jedne operacije. Ovo dinami\u010dko programiranje je vremenske slo\u017eenosti \\(O(N^3)\\).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/05_carobnjak/#resenje-za-k-n","title":"Re\u0161enje za \\(K = N\\)","text":"<p>Za re\u0161avanje ovog podzadatka, neophodno je primetiti da su sve vrednosti mo\u0107i napitka koji ostaje poslednji u nizu ili razlika nepraznog prefiksa i odgovaraju\u0107eg nepraznog sufiksa ili razlika nepraznog sufiksa i odgovaraju\u0107eg nepraznog prefiksa. Za po\u010detak, primetimo da mo\u0107 napitka koji ostaje poslednji u nizu uvek mo\u017eemo preslikati na niz \\(b\\) koji sadr\u017ei \\(N\\) vrednosti koje su isklju\u010divo \\(+\\) ili \\(-\\). Konkretno, ako mo\u0107 nekog napitka iz po\u010detnog niza u\u010destvuje sa znakom \\(+\\) u mo\u0107i napitka koji ostaje poslednji, na tu poziciju u nizu \\(b\\) stavljamo \\(+\\), a u suprotnom \\(-\\). Posmatrajmo sada niz \\(b\\). \u017delimo da ga svedemo na niz koji ima samo jedan element i taj element ima vrednost \\(+\\), primenom operacija definisanih u tekstu. Primetimo da ukoliko prva i poslednja vrednost u nizu \\(b\\) imaju isti znak, tada sigurno nije mogu\u0107e izvr\u0161iti ni jednu operaciju, jer tada \u017eelimo da i prvi i poslednji element u\u010destvuju sa istim znakom, a znamo da primenom bilo koje od dve operacije dovodimo do toga da u kona\u010dnoj sumi u\u010destvuju sa razli\u010ditim znakom. U suprotnom, mo\u017eemo da izvr\u0161imo bilo koju od ove dve operacije. Na nizu \\(b\\) ovo se odr\u017eava brisanjem jednog od dva kraja. Dakle, ukoliko posle primene nekih operacija do\u0111emo do niza koji ima vi\u0161e od jednog elementa i njegovi krajevi su razli\u010ditog znaka, onda nas taj niz nikako ne mo\u017ee dovesti do niza koji sadr\u017ei samo jedan element \\(+\\). Zbog toga nije mogu\u0107e da u nizu \\(b\\) postoji vi\u0161e od jednog para susednih pozicija koje imaju suprotan znak. Dakle, dovoljno je da uzmemo maksimum razlika svih nepraznih prefiksa i odgovaraju\u0107ih nepraznih sufiksa, odnosno nepraznih sufiksa i odgovaraju\u0107ih nepraznih prefiksa. Ovo je mogu\u0107e uraditi u  vremenskoj slo\u017eenosti \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/05_carobnjak/#resenje-kad-n-leq-1000","title":"Re\u0161enje kad \\(N \\leq 1000\\)","text":"<p>Re\u0161avanje ovog podzadatka se nadovezuje na re\u0161avanje prethodnog. Fiksira\u0107emo svaku poziciju koja \u0107e predstavljati razliku izme\u0111u prefiksa i sufiksa (odnosno sufiksa i prefiksa) i potom izbaciti \\(N-K\\) elemenata tako da se ta razlika maksimizuje i da ni prefiks ni sufiks ne ostanu prazni. Ovo je mogu\u0107e posti\u0107i sortiranjem celog niza sa promenjenim znakom elemenata u sufiksu, te izbacivanjem najmanjih \\(N-K\\) elemenata. Neophodno je samo voditi ra\u010duna da izbacivanje tih elemenata ne dovede do praznog prefiksa ili sufiksa. Ovakvo re\u0161enje je vremenske slo\u017eenosti \\(O(N^2 \\log N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/02%20Kvalifikacije%202/05_carobnjak/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Za re\u0161enje celog zadatka, neophodno je optimizovati re\u0161enje prethodnog podzadatka tako da ne moramo da za svaku poziciju sortiramo niz i ponovo biramo najmanje elemente. Glavna ideja u toj optimizaciji se zasniva na tome da se promenom pozicije koja razdvaja prefiks i sufiks za jedan menjaju ta\u010dno dve vrednosti iz niza koji sortiramo i iz kojeg biramo najmanjih \\(N-K\\). Mo\u017eemo koristiti strukturu <code>set</code> ili segmentno stablo da bi odr\u017eavali taj niz. Re\u0161enje kompletnog zadatka je vremenske slo\u017eenosti \\(O(N \\log N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/01_biodiverzitet/","title":"1 - Biodiverzitet","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Tadija \u0160ebez Aleksa Milojevi\u0107 Vladimir Milovanovi\u0107 Vladimir Milovanovi\u0107"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/01_biodiverzitet/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Kako je cilj odrediti broj razli\u010ditih biolo\u0161kih predaka vrsta koje trenutno \u017eive, a budu\u0107i da su u zadatku dati indeksi vrsta koje trenutno \u017eive, najpre je potrebno pristupiti izra\u010dunavanju indeksa biolo\u0161kih predaka. To se \u010dini tako \u0161to se indeks vrste \\(i\\) celobrojno podeli sa \\(K\\) i to za sve indekse \\(i_1, i_2, \\ldots, i_N\\) u zadatom nizu. Time se dobija novi niz koji zapravo predstavlja niz biolo\u0161kih predaka. Treba primetiti da se u op\u0161tem slu\u010daju vrednosti unutar niza bilo\u0161kih predaka mogu ponavljati. Najzad da bi se odredio broj razli\u010ditih predaka potrebno je prebrojati jedinstvene \u010dlanove niza koji sadr\u017ei i duplikate. Postoji vi\u0161e na\u010dina na koji je mogu\u0107e izra\u010dunati broj jedinstvenih \u010dlanova niza, a jedan od njih je da se \u010dlanovi niza biolo\u0161kih predaka sortiraju i onda u jednom prolazu kroz niz izbroje razli\u010dite vrednosti.</p> <p>U re\u0161enju, pored operacija prolaza kroz niz u kojima se izvr\u0161ava celobrojno deljenje ili prebrajanje jedinstvenih \u010dlanova, a koje su linearne slo\u017eenosti \\(\\mathcal{O}(N)\\), tako\u0111e imamo i operaciju sortiranja koja je dominantne slo\u017eenosti. Koriste\u0107i se efikasnim algoritmima niz je mogu\u0107e sortirati u loglinearnoj vremenskoj slo\u017eenosti \\(\\mathcal{O}(N\\log N)\\), iako je za maksimalan broj poena to bilo dovoljno u\u010diniti i u kvadratnoj, odnosno \\(\\mathcal{O}(N^2)\\) slo\u017eenosti.</p>"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/02_mladjionicar/","title":"2 - Mla\u0111ioni\u010dar","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Andrej Iva\u0161kovi\u0107 Dimitrije Erdeljan Dragan Uro\u0161evi\u0107 Andrej Iva\u0161kovi\u0107 <p>Ozna\u010dimo sa \\(r\\), \\(g\\) i \\(b\\), redom broj crvenih, zelenih i plavih kuglica. Tada \u0107e u najnepovoljnijem slu\u010daju crvenu kuglici izvu\u0107i nakon \u0161to izvu\u010de sve zelene i plave. Sli\u010dno \u0107e zelenu kuglicu izvu\u0107i najkasnije nakon izvla\u010denja svih crvenih i plavih, a plavu nakon \u0161to izvu\u010de sve crvene i zelene. Prema tome, va\u017ei\u0107e slede\u0107e nejednakosti $$ A \\leq g+b+1,\\quad B \\leq r+b+1, \\quad C \\leq r+g+1. $$ Pored toga je ukupan broj kuglica jednak \\(N\\), pa va\u017ei: $$ r+g+b = N. $$</p>"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/02_mladjionicar/#resenje-kad-je-n-leq-200","title":"Re\u0161enje kad je \\(N \\leq 200\\)","text":"<p>U ovom slu\u010daju, mo\u017eemo za sve mogu\u0107e vrednosti brojeva \\(r\\), \\(g\\) i \\(b\\) (a to su prirodni brojevi izme\u0111u \\(1\\) i \\(N\\)), proveriti da li zadovoljavaju tri nejednakosti i poslednju jednakost i prekinuti proveravanje onog trenutka kada su zadovoljene. Ako pomenute nejednakosti i jednakost nisu zadovoljeni ni za jednu kombinaciju vrednosti \\(r\\), \\(g\\) i \\(b\\), ne postoji raspored kuglica koji odgovara vrednostima \\(A\\), \\(B\\) i \\(C\\). O\u010digledno je slo\u017eenost ovog re\u0161enja \\(O(N^3)\\). </p>"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/02_mladjionicar/#resenje-kad-je-n-leq-2000","title":"Re\u0161enje kad je \\(N \\leq 2000\\)","text":"<p>Primetimo da za fiksirane vrednosti broja crvenih (\\(r\\)) i zelenih (\\(g\\)) kuglica mo\u017eemo odrediti broj plavih kuglica po formuli \\(b=N-r-g\\). Zbog toga je dovoljno za sve kombinacije vrednosti brojeva \\(r\\) i \\(g\\) (a to su brojevi izme\u0111u \\(1\\) i \\(N\\)), odrediti vrednost broja \\(b\\), a nakon toga proveriti da li su zadovoljene tri nejednakosti.  Slo\u017eenost ovog re\u0161enja \\(O(N^2)\\).</p>"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/02_mladjionicar/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Kako u vre\u0107i treba da bude bar jedna crvena, zelena i plava, brojeve kuglica mo\u017eemo prikazati kao $$ r = 1 + r1,\\quad g = 1+g1, \\quad b = 1+b1,\\quad r1,g1,b1\\geq 0. $$ Tada va\u0161i slede\u0107e:</p> \\[ r1+g1+b1 = (r-1) + (g-1) + (b-1) = (r+g+b)-3 = N-3 = N1. \\] <p>Pored toga, polazne nejednakosti postaju: $$ A\\leq g+b+1 = (1+b1)+(1+b1)+1 = g1+b1+3, $$ odnosno $$ g1+b1 \\geq A-3, $$ ili preciznije $$ g1+b1 \\geq \\max(A-3,0) = A1. $$ Sli\u010dno se dobija $$ r1+b1 \\geq \\max(B-3,0)=B1 $$ i $$ r1+g1 \\geq \\max(C-3,0) = C1. $$ Sabiranjem poslednje tri nejednakosti dobijamo $$ 2r1+2g1+2b1=2N1\\geq A1+B1+C1, $$ i ovo je potreban uslov da bi postojalo re\u0161enje.</p> <p>Pokazuje se da je to i dovoljan uslov. Da bi odredili re\u0161enje, primetimo da iz uslova $$ r1+g1+b1 = N1\\quad\\text{i}\\quad g1+b1\\geq A1, $$ dobijamo $$ r1 = N1-(g1+b1) \\leq N1-A1 = r1_{max}, $$ i sli\u010dno: $$ g1 \\leq N1-B1= g1_{max}\\quad\\text{i}\\quad b1 \\leq N1-C1=b1_{max}. $$ Za brojeve \\(r1\\), \\(g1\\) i \\(b1\\) biramo najve\u0107e koji zadovoljavaju nejednakosti i u zbiru daju broj \\(N1\\). Primetimo da se mogu odabrati brojevi \\(r1\\), \\(g1\\) i \\(b1\\) tako da zadovoljavaju gornje nejednakosti i zbir bude \\(N1\\) zato \u0161to je zbir gornjih ograni\u010denja  $$ r1_{max}+g1_{max}+b1_{max} = (N1-A1)+(N1-B1)+(N1-C1) = 3N1 - (A1+B1+C1) \\geq 3N1 - 2N1 = N1. $$ Kona\u010dno, same vrednosti mo\u017eemo izabrati na slede\u0107i na\u010din: $$ r1 = \\min(N1,N1-A1),\\quad g1 = \\min(N1-r1, N1-B1),\\quad b1=\\min(N1-r1-g1,N-C1). $$</p> <p>Slo\u017eenost ovog re\u0161enja je \\(O(1)\\).</p>"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/03_psiho/","title":"3 - Psiho","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Mladen Puzi\u0107 Mladen Puzi\u0107 Mladen Puzi\u0107 Igor Pavlovi\u0107"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/03_psiho/#resenje-za-n-m-leq-1000","title":"Re\u0161enje za \\(N, M \\leq 1000\\)","text":"<p>Ovde je mogu\u0107e primeniti razna sporija re\u0161enja, npr. mo\u017eemo odr\u017eavati skup aktivnih vizit karti, odnosno onih koje nisu jo\u0161 odba\u010dene ili sa\u010duvane od strane direktora. Svakog trenutka, sve aktivne vizit karte \u0161aljemo nadre\u0111enom i onda simuliramo pore\u0111enje vizit karti. Vremenska slo\u017eenost: \\(O(N\\cdot M)\\), memorijska slo\u017eenost: \\(O(N+M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/03_psiho/#resenje-za-p_i-i-1","title":"Re\u0161enje za \\(p_i = i-1\\)","text":"<p>U ovom slu\u010daju hijerarhija kompanije je linearna, tj. samo put od svakog zaposlenog do direktora. Najbitnija obzervacija u ovom zadatku jeste da mo\u017eemo ignorisati sva susretanja vizit karti pre direktora. Ako su se dve karte susrele pre direktora, zajedno \u0107e i sti\u0107i kod direktora, gde \u0107e se svakako porediti i odbaciti.</p> <p>Ovo nam govori da je dovoljno da za svaki trenutak odredimo koliko vizit karti sti\u017ee kod direktora tad. Karta koja se pojavila u trenutku \\(t_i\\) kod osobe \\(p_i\\) \u0107e kod direktora sti\u0107i u trenutku \\(t_i+p_i-1\\), pa koriste\u0107i npr. strukturu map ili obi\u010dno sortiranje, odrediti sve \u0161to nam je potrebno da izra\u010dunamo koliko karata \u0107e biti odba\u010deno (ukoliko u trenutku \\(t\\) sti\u017ee \\(x\\) karata kod direktora, tada on odbacuje \\(\\lfloor \\frac{x}{2} \\rfloor \\cdot 2\\) vizit karti. Vremenska slo\u017eenost: \\(O(N+MlogM)\\), memorijska slo\u017eenost: \\(O(N+M)\\). </p>"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/03_psiho/#resenje-za-t_i-1","title":"Re\u0161enje za \\(t_i = 1\\)","text":"<p>Re\u0161enje je sli\u010dno glavnom re\u0161enju, samo \u0161to je mogu\u0107e izbe\u0107i mapu/sortiranje, i lak\u0161e je primetiti pogrebu za dubinama zaposlenih.</p>"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/03_psiho/#glavno-resenje","title":"Glavno re\u0161enje:","text":"<p>Poput re\u0161enja kada \\(p_i = i-1\\), ignori\u0161emo pore\u0111enja sem kod direktora. Jedina razlika je \u0161to ovaj put moramo druga\u010dije da izra\u010dunamo u kom trenutku \u0107e se neka karta na\u0107i kod direktora. Potrebno je da izra\u010dunamo dubinu svakog zaposlenog, odnosno koliko je sekundi potrebno da vizit karta od osobe \\(i\\) stigne do direktora (ozna\u010dimo to sa \\(d_i\\)). </p> <p>Za ovo je mogu\u0107e koristiti grafovske algoritme, ali po\u0161to va\u017ei \\(p_i &lt; i\\) to nije neophodno. Dovoljno je da to uradimo koriste\u0107i slede\u0107e formule: \\(d_1 = 0\\)  i \\(d_i = d_{p_i} + 1\\). Kada to izra\u010dunamo, vreme kada \u0107e neka karta do\u0107i do direktora je \\(t_i + d_{v_i}\\). Vremenska slo\u017eenost: \\(O(N+MlogM)\\), memorijska slo\u017eenost: \\(O(N+M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/04_konjugacija/","title":"4 -  Konjugacija","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Nikola Milosavljevi\u0107 Nikola Milosavljevi\u0107 Nikola Milosavljevi\u0107 Mom\u010dilo To\u0161i\u0107 <p>Mo\u017eemo za svaki par segmenata proveriti u konstantnoj slo\u017eenosti da li su konjugovani - slo\u017eenost ovog algoritma je \\(O(N^2)\\), \u0161to je dovoljno za Podzadatak 1</p> <p>Ako su koordinate krajeva segmenata brojevi ne ve\u0107i od \\(MaxVal\\), tada postoji \\(O(MaxVal^2)\\) mogu\u0107ih pozicija za segmenate. Mo\u017eemo u nekoj pomo\u0107noj matrici \\(m\\) pamtiti \\(m[i][j] =\\) broj segmenata sa krajevima u \\(i\\) i \\(j\\). Zatim, sli\u010dno kao i u prethodnom slu\u010daju, za svake dve mogu\u0107e pozicije segmenata proverimo da li su oni konjugovani i koliko je to ukupno parova na osnovu matrice \\(m\\). Ukupna slo\u017eenost je \\(O(N + MaxVal^4)\\) \u0161to je dovoljno za Podzadatak 2</p> <p>Jedna od ideja je sortirati segmente neopadaju\u0107e na osnovu koordinate centra \\(c_i = \\frac{a_i+b_i}{2}\\) i za svaki segment \\(i\\) odrediti koliko ima segmenata levo od njega koji su konjugovani sa njim; kona\u010dno re\u0161enje dobijamo kada saberemo ove koli\u010dine za svaki segment. Broj takvih segemenata je jednak broju indeksa \\(j\\) za koje va\u017ei \\(1 \\leq j &lt; i\\) i \\(a_i \\leq c_j\\) i \\(c_i \\leq b_j\\).</p> <p>U Podzadatku 3 su segmenti ve\u0107 sortirani rastu\u0107e po oba kraja posebno (pa samim tim i po centru) pa je skup segmenata levo od \\(i\\)-tog i koji su konjugovani sa \\(i\\)-tim neki uzastopni podniz sortiranog niza segmenata. U svakom koraku se sa po\u010detka ovog podniza mogu izbacivati segmenti koji nisu konjugovani sa trenutnim (ne\u0107e biti konjugovani ni sa \"desnijim\" segmentima zbog uslova podzadatka) pa tehnika dva pokaziva\u010da i/ili binarne pretrage re\u0161ava ovaj podzadatak u slo\u017eenosti \\(O(N)\\) ili \\(O(N \\log N)\\).</p> <p>Pretpostavimo da su sve koordinate centara \\(c_i\\) relativno mali, razli\u010diti celi brojevi (mo\u017eemo se obezbediti da budu celi tako \u0161to na po\u010detku pomno\u017eimo sve krajeve segemenata sa \\(2\\)). Defini\u0161imo niz \\(A\\) gde je za svako \\(i=\\overline{1,N}\\), \\(A[c_i] = r_i\\) a na ostalim pozicijama su nule. Ako je \\(c_1 &lt; c_2 &lt; \\ldots &lt; c_N\\), tada je broj segmenata koji su levo od segmenta \\(i\\) i koji su konjugovani sa njim jednak broju elememenata uzstopnog podniza \\(A[l_i], A[l_i+1],\\ldots, A[c_i - 1]\\) koji su ve\u0107i ili jednaki od \\(c_i\\) (posmatra se samo podniz od \\(l_i\\)-te do \\((c_i-1)\\)-te pozicije jer su indeksi - centri segmenata i oni moraju pripadati \\(i\\)-tom segmentu; vrednosti elementa su desni krajevi tih segmenata pa moraju biti \\(\\geq c_i\\) da bi sadr\u017eali centar \\(i\\)-tog segmenta). </p> <p>Ovim se zadatak svodi na relativno poznat problem: dat je niz \\(A\\) du\u017eine \\(M\\) i \\(N\\) upita oblika \\((l, r, k)\\) - odrediti koliko ima elemenata u podnizu \\(A[l..r]\\) koji su ve\u0107i ili jednaki \\(k\\). Ovaj problem se najlak\u0161e re\u0161ava offline koriste\u0107i strukturu segmentno stablo. Na po\u010detku napunimo pomo\u0107ni niz \\(B\\) nulama i sortiramo sve elememente i upite (zajedno) opadaju\u0107e po vrednosti elementa odnosno vrednosti \\(k\\) u upitima. Zatim idemo redom po sortiranom nizu i kada nai\u0111emo na neki element \\(A[i]\\), na poziciji \\(i\\) u nizu \\(B\\) postavimo jedinicu; kada nai\u0111emo na upit \\((l,r,k)\\), samo odredimo broj (ili zbir) svih elemenata u nizu \\(B\\) na pozicijama od \\(l\\) do \\(r\\) jer su u tom trenutku dodati samo elementi iz \\(A\\) koji su ve\u0107i ili jednaki \\(k\\). Ovo se jednostavno radi segmentnim stablom u ukupnoj slo\u017eenosti \\(O(M + N \\log M)\\).</p> <p>U Podzadatku 4 su vrednosti \\(c_i\\) zaista dovoljno male da se njima mo\u017ee direktno indeksirati niz \\(A\\) (tj. ovde je \\(M \\leq 10^6\\)) a slu\u010dajevi se jednakim \\(c_i\\)-ovima se re\u0161avaju malom modifikacijom algoritma. Kada su vrednosti \\(c_i\\) velike (npr. do \\(10^9\\)) treba koristiti implicitno segmentno stablo ili, jednostavnije, kompresovati koordinate na po\u010detku, \u0161to daje algoritam slo\u017eenosti \\(O(N \\log MaxVal)\\) ili \\(O(N \\log N)\\) koji re\u0161ava sve podzadatke. </p> <p>Alternativni pristup (za re\u0161avanje problema na koji smo sveli originalni problem) je kori\u0161\u0107enje takozvane \\(Sqrt\\)-dekompozicije gde delimo niz na \\(\\sqrt{N}\\) delova veli\u010dine \\(\\sqrt{N}\\) i za svaki od njih pamtimo sortirani niz elemenata iz tog dela. Kada do\u0111e upit \\((l,r,k)\\), za najvi\u0161e dva dela u kojima su krajevi upita odradimo pretragu ru\u010dno a za ostalih \\(O(\\sqrt{N})\\) delova odradimo binarnu pretragu nad odgovaraju\u0107im nizom. Ovo daje algoritam slo\u017eenosti \\(O(N\\sqrt{N}\\log N)\\) koji bi, uz pristojnu implementaciju, tako\u0111e trebalo da osvoji sve poene. Napomenimo da ovaj pristup u istoj slo\u017eenosti re\u0161ava varijantu problema u kome se zahteva da se na upite odgovara u zadatom redosledu (online) i gde su dozvoljeni upiti koji modifikuju pojedina\u010dne elemente (ina\u010de, ova te\u017ea varijanta problema se mo\u017ee re\u0161iti i u slo\u017eenosti \\(O(N \\log^2 N)\\)).</p>"},{"location":"takprog/2021%20%7C%202022/03%20Kvalifikacije%203/05_min-max-plus/","title":"5 -  Min max plus","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Tadija \u0160ebez Tadija \u0160ebez - Tadija \u0160ebez <p>Uskoro...</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/01_odbijanje/","title":"B1 - Odbijanje","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Andrej Iva\u0161kovi\u0107 Dimitrije Erdeljan Andrej Iva\u0161kovi\u0107 Andrej Iva\u0161kovi\u0107"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/01_odbijanje/#resenje-za-30-poena","title":"Re\u0161enje za 30 poena","text":"<p>Dovoljna je prosta simulacija ovog kretanja: dok god kuglica ima apsolutnu vrednost svoje pozicije ne ve\u0107u od 100, svaka sekunda kretanja se simulira. Vodi se ra\u010duna o trenutnoj poziciji \\(x\\), vremenu od po\u010detka \\(t\\), brzini \\(\\mathit{dx}\\) (koja je ili \\(1\\) ili \\(-1\\)) i trenutku najskorijeg sudara \\(T\\). U svakom koraku se a\u017eurira pozicija (\\(x := x + \\mathit{dx}\\)) i proveri da li pozicija odgovara nekoj od prepreka \u2013 a u tom slu\u010daju se a\u017euriraju otpornost prepreke, brzina i vreme najskorijeg sudara. Ovo re\u0161enje daje ta\u010dan odgovor u vremenskoj slo\u017eenosti \\(O(N \\cdot \\max_i S_i \\cdot \\max_i |X_i|)\\).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/01_odbijanje/#resenje-za-50-poena","title":"Re\u0161enje za 50 poena","text":"<p>Re\u010d je o jednostavnoj optimizacija prethodnog pristupa. Umesto da se u svakom koraku pozicija promeni za 1, dovoljno je voditi ra\u010duna o narednoj udarenoj prepreci sa leve i sa desne strane. Vreme izme\u0111u dva sudara je tada jednako apsolutnoj vrednosti razlike izme\u0111u pozicija te dve prepreke. Najpre treba podeliti prepreke u dva niza: prepreke sa negativnom pozicijom i prepreke sa pozitivnom pozicijom. U ta dva niza se zatim odrede prepreke najbli\u017ee kuglici i vr\u0161i se simulacija kretanja. Kada otpornost neke prepreke postane jednaka nuli, tada se ta prepreka ozna\u010di kao nepostoje\u0107a i bira se najbli\u017ea prepreka sa nenultom otpornosti. Vremenska slo\u017eenost ovog pristupa je \\(O(N \\cdot \\max_i S_i \\cdot \\max_i |X_i|)\\).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/01_odbijanje/#resenja-za-70-i-100-poena","title":"Re\u0161enja za 70 i 100 poena","text":"<p>Ova dva re\u0161enja su maltene identi\u010dna i razlikuju se po tome \u0161to koriste razli\u010dite algoritme sortiranja: \\(O(N^2)\\) vremenske slo\u017eenosti i \\(O(N \\log N)\\) vremenske slo\u017eenosti. Najpre se, kao u prethodnom re\u0161enju, razdvoje nizovi prepreka levo od nule i prepreka desno od nule. Zatim se ti nizovi sortiraju po apsolutnoj vrednosti pozicije i tako se odre\u0111uje redosled kojim se kuglica sudara sa preprekama. Da li je poslednje odbijanje sa nekim levim zidom ili desnim zidom se odre\u0111uje pore\u0111enjem ukupnih otpornosti desnih zidova i levih zidova: * ako je ukupna otpornost desnih zidova \\(r\\) manja ili jednaka ukupnoj otpornosti levih \\(l\\), tada sa leve strane imamo \\(l\\) odbijanja, a sa desne \\(l+1\\) odbijanje; * u suprotnom, sa leve strane i desne strane imamo po \\(r\\) odbijanja. Na osnovu ukupnog broja odbijanja sa obe strane je mogu\u0107e odrediti za svaku \u201cdeonicu\u201d (prostor izme\u0111u dve uzastopne prepreke) koliko je puta pre\u0111ena. Na primer, ako je do\u0161lo do \\(m\\) odbijanja sa leve strane, tada je prva deonica (od 0 do prvog zida) pre\u0111ena \\(2m\\) puta, druga \\(2(m-\\mathit{otp\\_levih}[0])\\) puta itd, dokle god preostali broj odbijanja ne postane negativan. Neophodno je posvetiti pa\u017enju poslednjem sudaru i oduzeti \\(1\\) od broja prelazaka poslednje deonice.</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/02_stale/","title":"B2 - \u0160tale","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Mom\u010dilo To\u0161i\u0107 Mom\u010dilo To\u0161i\u0107 Vladimir Milovanovi\u0107 Andrej Iva\u0161kovi\u0107 <p>Prema postavci zadatka, konj se, iz proizvoljne ta\u010dke, mo\u017ee kretati horizontalno, vertikalno, kao i (anti-)dijagonalno. Dodatno ograni\u010denje je da se konj, polaze\u0107i iz neke ta\u010dke, isklju\u010divo kre\u0107e po dvodimenzionalnoj re\u0161etki puteva, odnosno mre\u017ei ta\u010daka koje su me\u0111usobno udaljene \\(s\\) jedna od druge. Nije te\u0161ko uvideti da iz odre\u0111ene ta\u010dke u kojoj se trenutno nalazi, konj mo\u017ee pro\u0107i kroz bilo koju drugu ta\u010dku koja se nalazi na pomenutoj re\u0161etki puteva.</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/02_stale/#kvadratno-resenje-za-65-poena","title":"Kvadratno re\u0161enje za 65 poena","text":"<p>Dovoljno je u dve ugne\u017e\u0111ene petlje pro\u0107i po svim \u0161talama i ispitati da li je mogu\u0107e do\u0107i od jedne do druge, ra\u010dunaju\u0107i da se od \\(i\\)-te do \\(j\\)-te \u0161tale (naravno, samo za indekse \\(i \\neq j\\)) mo\u017ee do\u0107i ako im se poklapaju horizontalne (\\(x\\)) ili vertikalne (\\(y\\)) koordinate ili se pak poklapa razlika ili zbir vertikalnih i horizonalnih koordinata (to jest nalaze se dijagonalno/antidijagonalno jedna od druge), pri \u010demu se 4 pomenutih jednakosti (jednake vrednosti \\(x\\), \\(y\\), \\(x-y\\), \\(x+y\\)) ra\u010dunaju po modulu \\(c\\) uz uslov da moduo bude pozitivan. Kako se u svakoj od dve petlje prolazi kroz sve \u0161tale i \u010duva maksimum, ovo re\u0161enje ima kvadratnu vremensku slo\u017eenost, odnosno \\(\\mathcal{O}(n^2)\\), gde \\(n\\) predstavlja broj \u0161tala.</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/02_stale/#glavno-resenje-u-linearnoj-slozenosti","title":"Glavno re\u0161enje u linearnoj slo\u017eenosti","text":"<p>Da bi se zadatak uradio na efikasan na\u010din, svrsishodno je makar prividno preslikati dvodimenzionalnu ravan \\((x, y)\\) na matricu dimenzija \\(c \\times s\\). Preslikavanje se vr\u0161i tako \u0161to se polje u \\(i\\)-toj vrsti i \\(j\\)-oj koloni pomenute matrice popunjava sa onoliko \u0161tala koliko ih se nalazi na koordinatama \\(x \\mod c = i\\) i \\(y \\mod c = j\\). Sve \u0161to je tada potrebno u\u010diniti jeste prona\u0107i polje u matrici sa najve\u0107im zbirom ostalih elemenata koji se nalaze u istoj vrsti i koloni, kao i na istoj dijagonali i antidijagonali, ta\u010dnije sam zbir pomenutih elemenata sa trenutnim poljem koji zapravo predstavlja tra\u017eeno re\u0161enje zadatka. Prilikom prolaska kroz matricu treba biti pa\u017eljiv i obratiti pa\u017enju da se samo polje kroz koje se prolazi ne ura\u010duna vi\u0161e puta, kao i to da se, za parno \\(c\\), polja na (produ\u017eenoj) dijagonali i antidijagonali mogu poklapati, odnosno da se (produ\u017eene) dijagonale mogu se\u0107i. Kako je sama operacija preslikavanja ravni na matricu linearna po \\(n\\), to jest \\(\\mathcal{O}(n)\\), a prolazak kroz matricu u op\u0161tem slu\u010daju kvadratan po njenim dimenzijama, preciznije \\(\\mathcal{O}(c^2)\\), jasno je iz postavke zadatka u kojoj se ka\u017ee da je \\(n\\leq200'000\\), a \\(c\\leq100\\), pa je \\(n&gt;c^2\\), prvi \u010dlan dominantan, te je i ukupna vremenska slo\u017eenost re\u0161enja, pod ovakvim pretpostavkama, linearna po broju \u0161tala.</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/02_stale/#alternativno-resenje","title":"Alternativno re\u0161enje","text":"<p>Kako je uslov da se iz ta\u010dke \\((x_1,y_1)\\) ta\u010dka \\((x_2, y_2)\\) mo\u017ee obi\u0107i: \\(x_1 = x_2 \\lor y_1 = y_2 \\lor x_1-y_1 = x_2-y_2 \\lor x_1+y_1 = x_2+y_2\\), gde je jednakost po modulu \\(c\\), to mo\u017eemo za svaku ta\u010dku tra\u017eiti broj ta\u010daka za koji va\u017ei ovaj uslov kao broj elemenata unije 4 skupa (skup svih sa odre\u0111enom \\(x\\) ili \\(y\\) koordinatom, ili odre\u0111enom razlikom/zbirom dveju koordinata). Ovo se mo\u017ee re\u0161iti formulom uklju\u010denja-isklju\u010denja za 4 skupa, gde veli\u010dine preseka brojimo vi\u0161edimenzionalnim matricama (ukupna memorijska slo\u017eenost je \\(\\mathcal{O}(c^4)\\), \u0161to je u praksi i dosta manje od \\(512\\) MB, dok je vremenska linearna jer svaku \u0161talu ubacujemo u konstantan broj skupova koji slu\u017ee za prebrojavanje).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/03_okram/","title":"B3 - Okram","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Mladen Puzi\u0107 Mom\u010dilo To\u0161i\u0107"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/03_okram/#resenje-kada-n-m-leq-5-a_i-leq-1","title":"Re\u0161enje kada \\(N, M \\leq 5, A_i \\leq 1\\)","text":"<p>Po\u0161to su dimenzije matrice male, a jedine mogu\u0107e vrednosti u matrici \\(0\\) i \\(1\\), postoji dosta malo stanja u kojima se mo\u017ee na\u0107i matrica. Simuliramo proces sekundu po sekundu, dok se ne desi da smo ve\u0107 videli dato stanje. Po\u0161to znamo da \u0107emo na dalje da se vrtimo u krug, znamo da \u0107e re\u0161enje biti jedno od datih stanja. Koje ta\u010dno stanje \u0107e to biti mo\u017eemo dobiti koriste\u0107enjem formula.</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/03_okram/#resenje-kada-k-leq-5","title":"Re\u0161enje kada \\(K \\leq 5\\)","text":"<p>Po\u0161to je \\(K \\leq 5\\), zna\u010di da nam je bitno samo pona\u0161anje matrice u prvih \\(2^5 = 32\\) sekundi. Pre svih pitanja, izra\u010duna\u0107emo sve matrice, i onda za svako pitanje mo\u017eemo samo ispisati tra\u017eeno polje odgovaraju\u0107e matrice.</p> <p>Vremenska slo\u017eenost je \\(O(2^KNM + Q)\\), a memorijska \\(O(2^KNM)\\). </p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/03_okram/#resenje-kada-k-leq-200","title":"Re\u0161enje kada \\(K \\leq 200\\)","text":"<p>Ponovo \u0107emo \u010duvati matrice za svako \\(K\\), ali ovaj put \u0107emo ih ra\u010dunati na na\u010din koji \u0107e biti opisan u slede\u0107a dva re\u0161enja. </p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/03_okram/#resenje-kada-su-sve-pocetne-vrednosti-0-sem-jedne-koja-je-1","title":"Re\u0161enje kada su sve po\u010detne vrednosti \\(0\\), sem jedne koja je \\(1\\)","text":"<p>Posmatranjem kako se ova jedinica pona\u0161a kroz vreme u beskona\u010dnoj matrici mo\u017eemo zaklju\u010diti da \u0107e nakon \\(2^K\\) sekundi da se nalazi na pozicijama \\((x+2^K, y)\\), \\((x-2^K, y)\\), \\((x, y+2^K)\\) i \\((x, y-2^K)\\). Ovo mo\u017eemo i jednostavno dokazati indukcijom. Za bazu \\(K = 0\\) ovo je o\u010digledno ta\u010dno. Ako pretpostavimo da je ta\u010dno za neko \\(K\\), i primenimo induktivnu hipotezu na \\(4\\) tako dobijene ta\u010dke, vide\u0107emo da se de\u0161ava ne\u0161to zanimljivo - sva polja sem ona \\(4\\) koja su nam potrebna se skrate (xor je inverz sam sebi), pa smo dokazali tvr\u0111enje. </p> <p>Sada, za svako pitanje je dovoljno proveriti da li je u pitanju jedno od najvi\u0161e \u010detiri polja koji sadr\u017ee jedinicu. Po\u0161to ova matrica nije beskona\u010dna, moramo koriste\u0107i formule da dobijemo ta\u010dne koordinate jedinica u njoj. </p> <p>Vremenska slo\u017eenost je \\(O(NM+M+K)\\), a memorijska \\(O(NM+K)\\). </p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/03_okram/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Primetimo da \u0107e sva polja u matrici biti xor nekih polja po\u010detne matrice. Koriste\u0107i prethodno re\u0161enje, za svako polje po\u010detne matrice mo\u017eemo prona\u0107i u xor-u kojih polja matrice \u0107e se nalaziti nakon \\(2^K\\) sekundi. Tako mo\u017eemo zaklju\u010diti da \u0107e vrednost polja \\((x, y)\\) nakon \\(2^K\\) sekundi biti xor vrednosti polja \\((x+2^K, y)\\), \\((x-2^K, y)\\), \\((x, y+2^K)\\) i \\((x, y-2^K)\\) u po\u010detnoj matrici. </p> <p>Vremenska slo\u017eenost je \\(O(NM+M+K)\\), a memorijska \\(O(NM+K)\\). matrici. </p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/04_slicice/","title":"A1 - Sli\u010dice","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Aleksa Milisavljevi\u0107 Aleksa Milisavljevi\u0107 Dragan Uro\u0161evi\u0107 Aleksa Plav\u0161i\u0107 <p>Za po\u010detak odredimo koje karte Jakov mo\u017ee skupiti, a koje ne mo\u017ee.</p> <p>Jakov mo\u017ee skupiti kartu sa bilo kojim parnim brojem, jer je najve\u0107i zajedni\u010dki delilac za \\(2\\) (Jakov ima na raspolaganju proizvoljno mnogo karti sa brojem \\(2\\)) i tog parnog broja jednak \\(2\\) \u0161to je ve\u0107e od \\(1\\).</p> <p>Jakov mo\u017ee skupiti i karte sa neparnim brojevima \\(p\\) ne ve\u0107im od \\(\\lfloor\\frac{n}{2}\\rfloor\\) (naravno, ve\u0107im od \\(1\\)), jer prvo mo\u017ee kartu sa brojem \\(2\\) razmeniti za kartu sa brojem \\(2p\\), a nakon toga kartu sa brojem \\(2p\\) za kartu sa brojem \\(p\\).</p> <p>Na kraju mo\u017ee skupiti i karte sa bilo kojim slo\u017eenim neparnim brojem \\(m\\) iz intervala \\(\\left[\\lceil\\frac{n}{2}\\rceil,n\\right]\\). Svaki takav neparan slo\u017een broj ima bar jedan prost faktor \\(p\\leq \\sqrt{m} \\leq \\sqrt{n} \\leq \\lfloor\\frac{n}{2}\\rfloor\\). Zbog toga kartu sa brojem \\(2\\) mo\u017ee razmeniti za kartu sa brojem \\(2p\\leq n\\), zatim kartu sa brojem \\(2p\\) za kartu sa brojem \\(p\\) i na kraju kartu sa brojem \\(p\\) za kartu sa brojem \\(m\\).</p> <p>Jakov ne mo\u017ee skupiti karte sa neparnim prostim brojem \\(p\\) ve\u0107im od \\(\\lfloor\\frac{n}{2}\\rfloor\\). Da bi skupio tu kartu morao bi da ima kartu sa brojem deljivim sa brojem \\(p\\). Ali najmanji broj (razli\u010dit od \\(p\\)) koji je deljiv brojem \\(p\\) je \\(2p\\) koji je ve\u0107i od \\(n\\).</p> <p>Zbog toga je broj karti koje Jakov mo\u017ee skupiti jednak razlici brojeva \\(n-1\\) (broj brojeva ve\u0107ih od \\(1\\), ali manjih od ili jednakih \\(n\\)) i broja prostih brojeva ve\u0107ih od \\(\\lfloor\\frac{n}{2}\\rfloor\\) i manjih od ili jednakih \\(n\\).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/04_slicice/#resenje-kad-je-n-leq-10","title":"Re\u0161enje kad je \\(N \\leq 10\\)","text":"<p>Sve karte koje mo\u017ee skupiti Jakov se mogu odrediti varijacijom pretrage u \u0161irinu.</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/04_slicice/#resenje-kad-je-n-q-leq-200-n-q-leq-2000","title":"Re\u0161enje kad je \\(N, Q \\leq 200\\), \\(N, Q \\leq 2000\\)","text":"<p>Za svaki upit se odre\u0111uje broj prostih brojeva u intervalu \\(\\left[\\lfloor\\frac{n}{2}\\rfloor+1,n\\right]\\).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/04_slicice/#resenje-kad-je-n-leq-100000","title":"Re\u0161enje kad je \\(N \\leq 100.000\\)","text":"<p>Neposredno nakon u\u010ditavanja vrednosti broja \\(N\\) za sve upite, odre\u0111uje se najve\u0107a vrednost za \\(N\\) (neka je to \\(N_{\\max}\\)), a nakon toga za svaku vrednost \\(N \\leq N_{\\max}\\) broj prostih brojeva koji nisu ve\u0107i od \\(N\\) (ozna\u010dimo taj broj sa \\(p(N)\\)).  Vrednost \\(p(N)\\) se odre\u0111uje na osnovu vrednosti \\(p(N-1)\\). Naime, vrednost \\(p(N)\\) je jednaka \\(p(N-1)+1\\), ako je \\(N\\) prost broj, odnosno \\(p(N-1)\\), ako je \\(N\\) slo\u017een broj. Provera da li je broj \\(N\\) prost se mo\u017ee izvesti u slo\u017eenosti \\(O(\\sqrt{N})\\), pa je slo\u017eenost odre\u0111ivanje svih vrednosti \\(p(N)\\) jednaka \\(O(N_{\\max}\\sqrt{N_{\\max}})\\).  Nakon toga se broj prostih brojeva u intervalu  \\(\\left[\\lfloor\\frac{n}{2}\\rfloor+1,n\\right]\\) odre\u0111uje po formuli \\(p(N)-p\\left(\\frac{N}{2}\\right)\\), tj. u slo\u017eenosti \\(O(1)\\). Slo\u017eenost kompletnog algoritma je \\(O(N_{\\max}\\sqrt{N_{\\max}}+Q)\\).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/04_slicice/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Neposredno nakon u\u010ditavanja vrednosti broja \\(N\\) za sve upite, odre\u0111uje se najve\u0107a vrednost za \\(N\\) (neka je to \\(N_{\\max}\\)), a nakon toga za svaku vrednost \\(N \\leq N_{\\max}\\) broj prostih brojeva koji nisu ve\u0107i od \\(N\\) (ozna\u010dimo taj broj sa \\(p(N)\\)).  Za razliku od prethodnog podzadatka, provera da li su prirodni brojevi prosti se izvodi primenom Eratostenovog sita. Zahvaljuju\u0107i tome, slo\u017eenost izra\u010dunavanja svih vrednosti \\(p(N)\\) je \\(O(N_{\\max}\\log N_{\\max})\\), a slo\u017eenost kompletnog re\u0161enja je \\(O(N_{\\max}\\log N_{\\max} + Q)\\).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/05_civas/","title":"A2 - \u0106ivas","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Mladen Puzi\u0107 Tadija \u0160ebez"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/05_civas/#resenje-kada-n-q-leq-500","title":"Re\u0161enje kada \\(N, Q \\leq 500\\)","text":"<p>Za svaku promenu niza, izra\u010dunamo niz \\(b\\) i na njemu probamo svaku mogu\u0107u periodu, od kojih uzimamo najmanju. </p> <p>Vremenska slo\u017eenost je \\(O(QN^2)\\),  a memorijska slo\u017eenost \\(O(N)\\).  </p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/05_civas/#resenje-kada-q-leq-25","title":"Re\u0161enje kada \\(Q \\leq 25\\)","text":"<p>Primetimo da su jedine mogu\u0107e periode delioci broja \\(N\\). Sada primenjujemo prethodno re\u0161enje, samo \u0161to isprobavamo samo te delioce.</p> <p>Vremenska slo\u017eenost je \\(O(QNd(N))\\), gde je \\(d(N)\\) broj delioca \\(N\\), a memorijska slo\u017eenost \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/05_civas/#resenje-kada-q-leq-3000","title":"Re\u0161enje kada \\(Q \\leq 3000\\)","text":"<p>Mo\u017eemo primetiti da za svako \\(d\\) i \\(x\\) va\u017ei:  $$ a_i \\text{ xor } a_{i+d} = b_i \\text{ xor } b_{i+1} \\text{ xor } \\ldots b_{i+d-1} $$</p> <p>Analogno, va\u017ei i: $$ a_{i+d} \\text{ xor } a_{i+2d} = b_{i+d} \\text{ xor } b_{i+d+1} \\text{ xor } \\ldots b_{i+2d-1} $$</p> <p>Ako za \\(d\\) uzmemo periodu niza \\(b\\), va\u017ei da su desne strane ovih jedna\u010dina jednake, pa va\u017ei i da su leve strane jednake. Odatle zaklju\u010dujemo, da za takvo \\(d\\) i proizvoljno \\(x\\) va\u017ei \\(a_i = a_{i+2d}\\),  \u0161to nam govori da je \\(2d\\) perioda niza \\(a\\). </p> <p>Po\u0161to nam je poznato da je perioda niza \\(a\\) ba\u0161 \\(n\\), onda imamo dva slu\u010daja. Ukoliko je \\(n\\) neparno, perioda niza \\(b\\) je uvek \\(n\\), u suprotnom, perioda mo\u017ee biti i \\(\\frac{N}{2}\\), a ako nije, onda mora biti \\(n\\). Zato, nakon svake promene, dovoljno je proveriti da li je u novom nizu \\(\\frac{N}{2}\\) perioda. </p> <p>Vremenska slo\u017eenost \\(O(NQ)\\), a memorijska slo\u017eenost \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/05_civas/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Poput prethodnog re\u0161enja, dovoljno je proveriti periodu \\(\\frac{N}{2}\\), samo \u0107emo ovde to uraditi na br\u017ei na\u010din. Pre svih promena, odradimo proveru u \\(O(N)\\), pamte\u0107i u koliko odgovaraju\u0107ih parova su isti elementi. Nakon svake promene, dovoljno je proveriti samo da li se neki od dva para na koje promena uti\u010de popravio ili pokvario, tj. a\u017eurirati broj parova u kojima su elementi isti. Kad god je broj takvih parova ta\u010dno \\(\\frac{N}{2}\\), perioda je \\(\\frac{N}{2}\\), u suprotnom, perioda je \\(N\\). </p> <p>Vremenska slo\u017eenost je \\(O(N+Q)\\), a memorijska slo\u017eenost \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/06_adventure-communist/","title":"A3 - AdVenture Communist","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Igor Pavlovi\u0107 Igor Pavlovi\u0107 Igor Pavlovi\u0107 Tadija \u0160ebez"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/06_adventure-communist/#resenje-za-n-t-leq-2000","title":"Re\u0161enje za \\(N, T \\leq 2000\\)","text":"<p>Ovde je dovoljno simulirati de\u0161avanja trenutak po trenutak u slo\u017eenosti \\(O(NT)\\).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/06_adventure-communist/#resenje-za-nleq-200","title":"Re\u0161enje za \\(N\\leq 200\\)","text":"<p>U ovom slu\u010daju je potrebno primetiti da je opisana rekurenta veza zapravo linearna transformacija koja se mo\u017ee predstaviti u matri\u010dnom obliku kao $$ A(t+1)=K \\cdot A(t) $$ gde je $$ A(t) = [a_0(t), a_1(t), ..., a_n(t)]^T $$  $$  K_{i,i} = C \\text{  ,  } K_{i,i+1} = (i+1) \\cdot K_{i+1}  $$  $$  K_{ij}=0 \\text{  za  } (j!=i) \\wedge (j!=i+1)  $$</p> <p>Odavde se dobija slede\u0107a jednakost: $$ A(t)=K^t \\cdot A(0) $$ iz koje mo\u017eemo odrediti vrednost \\(a_0(T)\\) u slo\u017eenosti \\(O(N^3\\log T)\\) brzim stepenovanjem matrica.</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/06_adventure-communist/#resenje-za-c-1","title":"Re\u0161enje za \\(C = 1\\)","text":"<p>Primetimo prvo da se doprinos svake pojedina\u010de fabrike mo\u017ee posmatrati odvojeno od ostalih zato \u0161to je opisana transformacija linearna. Ukupan broj krompira u trenutku \\(T\\) dobijamo kao zbir doprinosa svake fabrike.</p> <p>Za transformaciju $$ a_i(t+1)=a_i(t)+(i+1) \\cdot K_{i+1} \\cdot  a_{i+1}(t) $$ se mo\u017ee indukcijom dokazati da je doprinos \\(i\\)-te fabrike ukupnom broju krompira nakon \\(t\\) sekundi zapravo: $$ d_i = \\prod_{j=1}^{i} K_j \\cdot (t-j+1) $$ Sumiranjem svih doprinosa dobijamo: $$ a_0(T) = a_0(0) + \\sum_{i=1}^{N} a_i(0) \\cdot d_i = a_0(0) + \\sum_{i=1}^{N} a_i(0) \\cdot \\prod_{j=1}^{i} K_j \\cdot (T-j+1) $$ Na osnovu ovog izraza mo\u017eemo odrediti \\(a_0(T)\\) u slo\u017eenosti \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/04%20Okru%C5%BEno/06_adventure-communist/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Primetimo da se zadata rekurentna veza mo\u017ee zapisati kao: $$ a_i(t+1)=C \\cdot a_i(t)+(i+1) \\cdot K_{i+1} \\cdot a_{i+1}(t)= C \\cdot (a_i(t)+(i+1) \\cdot \\frac{K_{i+1}}{C} \\cdot a_{i+1}(t)) $$ U matri\u010dnom obliku ova rekurentna veza mo\u017ee se zapisati kao kompozicija dve linearne transformacije na slede\u0107i na\u010din: $$ A(t+1)=C \\cdot I \\cdot K' \\cdot A(t) $$ gde je $$ A(t) = [a_0(t), a_1(t), ..., a_n(t)]^T $$  $$  K_{i,i} = 1 \\text{  ,  } K_{i,i+1} = (i+1) \\cdot \\frac{K_{i+1}}{C}  $$  $$  K_{ij}=0 \\text{  za  } (j!=i) \\wedge (j!=i+1)  $$  i matrica \\(I\\) je jedini\u010dna matrica.</p> <p>Odavde se dobija slede\u0107a jednakost: $$ A(t)=C^t \\cdot K'^{t} \\cdot A(0) $$ Po\u0161to je matrica \\(K'\\) ista kao u slu\u010daju kada je \\(C=1\\) mo\u017eemo zaklju\u010diti da je doprinos \\(i\\)-te fabrike: $$ d_i = C^t \\prod_{j=1}^{i} \\frac{K_j}{C} \\cdot (t-j+1) = C^{t-i} \\cdot \\prod_{j=1}^{i} K_j \\cdot (t-j+1) $$ Sumiranjem svih doprinosa dobijamo: $$ a_0(T) = a_0(0) + \\sum_{i=1}^{N} a_i(0) \\cdot d_i = a_0(0) + \\sum_{i=1}^{N} a_i(0) \\cdot C^{T-i} \\cdot \\prod_{j=1}^{i} K_j \\cdot (T-j+1) $$ Na osnovu ovog izraza mo\u017eemo odrediti \\(a_0(T)\\) u slo\u017eenosti \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/01_jednacine/","title":"B1 - Jedna\u010dine","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Nikola Milosavljevi\u0107 Vladimir Milenkovi\u0107 Dragan Uro\u0161evi\u0107 Aleksandar Zlateski"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/01_jednacine/#resenje-podzadatka-1","title":"Re\u0161enje podzadatka 1","text":"<p>Primetimo da je u ovom slu\u010daju jedina mogu\u0107a vrednost za \\(n\\) broj $$ n = A\\cdot S(n) + B = 0 \\cdot S(n) + B = B. $$ Zbog toga je dovoljno samo proveriti da li je broj \\(n=B\\) izme\u0111u \\(X\\) i \\(Y\\) i ako jeste ispisati taj broj, u suprotnom ispisati vrednost \\(-1\\). Slo\u017eenost ovog re\u0161enja je \\(O(1)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/01_jednacine/#resenje-podzadatka-2","title":"Re\u0161enje podzadatka 2","text":"<p>Kako je \\(n\\leq Y \\leq 10^6\\), dovoljno je za svako \\(n\\) iz intervala \\([X,Y]\\) odrediti zbir cifara (uzastopnim deljenjem tog broja sa \\(10\\) i sabiranjem ostataka), a nakon toga proveriti da li zadovoljava jedna\u010dinu . Naravno, nakon pronalaska prve takve vrednosti za broj \\(n\\) ispisuje se ta vrednost i prekida izvr\u0161avanje programa. Ako nijedan broj iz intervala \\([X,Y]\\) ne zadovoljava jedna\u010dinu, ispisuje se vrednost \\(-1\\). Slo\u017eenost ovog re\u0161enja je \\(O(Y\\log Y)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/01_jednacine/#resenje-podzadataka-3-i-4","title":"Re\u0161enje podzadataka 3 i 4","text":"<p>Primetimo da ako je \\(1\\leq X \\leq n \\leq Y \\leq 10^{18}\\), onda je \\(1 \\leq S(n) \\leq 18 \\cdot 9 = 162\\). Samim tim je skup mogu\u0107ih vrednost za izraz \\(A\\cdot S(n) +B\\) zapravo skup $$ U = {A\\cdot T + B|T = 1, 2, \\dots, 162} $$ i to je skup mogu\u0107ih vrednosti za broj \\(n\\).</p> <p>Prema tome, dovoljno je za elemente \\(n\\in U\\), proveriti da li zadovoljavaju jedna\u010dinu  $$ S(n) = S(A\\cdot T + B) = T $$ i ako neki od njih zadovoljava ispisati njegovu vrednost, u suprotnom ispisati broj \\(-1\\). Broj elemenata skupa \\(U\\) je \\(O(\\log Y)\\), a provera da li neki element \\(n\\) skupa \\(U\\) zadovoljava gornju jednakost ima slo\u017eenost \\(O(\\log n)=O(\\log Y)\\), pa je slo\u017eenost celog algoritma \\(O(\\log^2 Y)\\). </p> <p>Pri re\u0161avanju podzadatka 4 treba voditi ra\u010duna da pri ra\u010dunanju vrednosti \\(A\\cdot T + B\\) mo\u017ee do\u0107i do prekora\u010denja.  </p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/02_turnir/","title":"B2 - Turnir","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Andrej Iva\u0161kovi\u0107 Aleksa Milisavljevi\u0107 Andrej Iva\u0161kovi\u0107 Vladimir Milenkovi\u0107"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/02_turnir/#resenje-prvog-podzadatka","title":"Re\u0161enje prvog podzadatka","text":"<p>Ukoliko se igra sastoji od samo jedne runde, to zna\u010di da svih svojih \\(K\\) \u017eetona koristimo u toj rundi. Ukupan broj poena koji mo\u017eemo da ostvarimo jednak je broju ostalih igra\u010da koji imaju manje od \\(K\\) \u017eetona. Ovo re\u0161enje radi u vremenskoj slo\u017eenosti \\(O(M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/02_turnir/#resenje-drugog-podzadatka","title":"Re\u0161enje drugog podzadatka","text":"<p>Dovoljno je isprobati sve mogu\u0107e na\u010dine da se \\(K\\) predstavi kao zbir \\(N\\) nenegativnih celih sabiraka, generisane bektrekingom, i da se za svaku od tih podela odredi broj poena koji mo\u017eemo da ostvarimo. Broj na\u010dina da se \\(K\\) razbije na \\(N\\) sabiraka jednak je \\(N+K-1 \\choose N-1\\), a odre\u0111ivanje broja poena za datu podelu se radi u slo\u017eenosti \\(O(MN)\\). Bektreking re\u0161enje ne mora da bude posebno efikasno da bi se u ovom podzadatku dobili svi poeni.</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/02_turnir/#resenje-treceg-podzadatka","title":"Re\u0161enje tre\u0107eg podzadatka","text":"<p>Za \\(M=1\\) postoji samo jedan igra\u010d protiv kog igramo, te je pitanje kako rasporediti \u017eetone da ostvarimo najve\u0107i broj pobeda u rundama. Ukoliko je u \\(i\\)-toj rundi ovaj igra\u010d postavio \\(a_{i,1}\\) \u017eetona, onda pobedu u ovoj rundi ostvarujemo postavljanjem \\(a_{i,1}+1\\) \u017eetona. Za ostvarivanje pobede u najve\u0107em broju rundi, dovoljno je pobediti u onim rundama u kojima je na\u0161 protivnik stavio najmanje \u017eetona. Ovo vodi ka jednostavnom gramzivom algoritmu: najpre se sortiraju runde po broju \u017eetona saigra\u010da (u rastu\u0107em poretku), nakon \u010dega se \u201cbud\u017eet\u201d od \\(K\\) \u017eetona tro\u0161i redom u ovim rundama sve dok nam ne ostane nijedan \u017eeton. Vremenska slo\u017eenost ovog re\u0161enja je \\(O(N \\log N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/02_turnir/#resenje-cetvrtog-podzadatka","title":"Re\u0161enje \u010detvrtog podzadatka","text":"<p>Ovaj podzadatak se re\u0161ava primenom dinami\u010dkog programiranja. Defini\u0161imo trodimenzioni niz \\(S_{n,k}\\), uz \\(0 \\leq n \\leq N\\), \\(0 \\leq k \\leq K\\):</p> <ul> <li>\\(S_{n,k}\\): najve\u0107i broj poena koji se mo\u017ee ostvariti ukoliko je iskori\u0161\u0107eno \\(k\\) \u017eetona u prvih \\(n\\) rundi</li> </ul> <p>Trivijalno poznate vrednosti u ovom nizu su:</p> <ul> <li>\\(S_{0,k}=0\\) za svako \\(k\\)</li> </ul> <p>Neka je \\([B]\\) indikator nekog logi\u010dkog izraza: \\(1\\) ukoliko \\(B\\) va\u017ei i \\(0\\) ukoliko ne va\u017ei. U slu\u010dajevima \\(n&gt;0\\) koristimo rekurentnu vezu:</p> <ul> <li>\\(S_{n,k} = \\max_{1 \\leq z \\leq k} (S_{n-1,k-z} + \\sum_{j=1}^{m} [a_{n,j} &lt; z])\\) (*)</li> </ul> <p>Ova rekurentna veza mo\u017ee da se objasni na slede\u0107i na\u010din: najbolji na\u010din da se \\(k\\) \u017eetona rasporedi u \\(n\\) rundi mo\u017ee da se odredi ukoliko se razmotre svi mogu\u0107i brojevi \u017eetona \\(z\\) u \\(n\\)-toj rundi, odredi koliko igra\u010da ima manje od \\(z\\) \u017eetona u \\(n\\)-toj rundi i tako odredi broj poena, na to doda optimalna raspodela \\(k-z\\) \u017eetona u prethodnim rundama, i odredi najbolje takvo \\(z\\). Tada je kona\u010dan odgovor na pitanje iz zadatka vrednost \\(S_{N,K}\\), koja mo\u017ee da se odredi u vremenskoj slo\u017eenosti \\(O(NMK^2)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/02_turnir/#resenje-petog-podzadatka","title":"Re\u0161enje petog podzadatka","text":"<p>Re\u0161enje koje donosi sve poene je optimizacija re\u0161enja \u010detvrtog podzadatka.</p> <p>Primetimo da su jedini zna\u010dajni brojevi \u017eetona u \\(n\\)-toj rundi \\(0, a_{n,1}+1, a_{n,2}+1, \\ldots, a_{n,M}+1\\), odnosno brojevi \u017eetona pri kojima se ostvaruju razli\u010diti brojevi poena. U okviru jedne runde je nebitno koji igra\u010d je stavio koliko \u017eetona, bitni su samo brojevi. Stoga ne gubimo nikakve informacije sortiranjem brojeva \u017eetona razli\u010ditih igra\u010da u okviru jedne runde.</p> <p>Primetimo i da je \\(S_{n,k}\\) za fiksirano \\(k\\) rastu\u0107e u \\(n\\), odnosno \\(S_{n,k} \\leq S_{n',k}\\) za \\(n &lt; n\u2019\\).</p> <p>Uz ova dva koraka, primetimo da nije neophodno ispitati sve mogu\u0107e \\(z\\) u formuli (*). Samim tim ra\u010dunanje \\(S_{n,k}\\), koje se u prethodnom podzadatku radilo u vremenskoj slo\u017eenosti \\(O(MK)\\), mo\u017ee da se uradi u \\(O(M)\\). Ukupna vremenska slo\u017eenost je \\(O(NMK)\\).</p> <p>Za one koji \u017eele da znaju vi\u0161e: ovaj zadatak je inspirisan igrom Blotto.</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/03_burad/","title":"B3 - Burad","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Mladen Puzi\u0107 Mladen Puzi\u0107 Mladen Puzi\u0107 Aleksa Plav\u0161i\u0107"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/03_burad/#resenje-kada-l_i-r_i","title":"Re\u0161enje kada \\(l_i = r_i\\)","text":"<p>Po\u0161to \u0107e ki\u0161a svakog dana padati nad ta\u010dno jednim buretom, mo\u017eemo svako bure gledati zasebno. Izbroja\u0107emo koliko litara je prognozirano da upadne u \\(i\\)-to bure, nazovimo taj broj \\(cnt_i\\). Ukoliko \\(cnt_i &gt; a_i\\), zna\u010di da dolazi do prelivanja i moramo prekriti buri\u0107e \\(cnt_i - a_i\\) dana. Uradimo to za svako \\(i\\) i sumirajmo kako bismo dobili krajnje re\u0161enje. Vremenska slo\u017eenost je \\(O(N+M)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/03_burad/#resenje-kada-u-svako-bure-pada-najvise-jedan-litar-kise","title":"Re\u0161enje kada u svako bure pada najvi\u0161e jedan litar ki\u0161e","text":"<p>Jedina mesta na kojima mo\u017ee do\u0107i do prelivanja jesu burad sa kapacitetom \\(0\\), a po\u0161to su svi intervali disjunktni, to zna\u010di da je ukupna du\u017eina svih intervala do \\(N\\), pa je dovoljno efikasno da za svaki dan pro\u0111emo kroz sve buri\u0107e u koje bi upala ki\u0161a i proverimo da li neki od njih ima kapacitet \\(0\\). Vremenska slo\u017eenost \\(O(N+M)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/03_burad/#resenje-kada-a_i-in-0-109","title":"Re\u0161enje kada \\(a_i \\in \\{0, 10^9\\}\\)","text":"<p>Jedina mesta na kojima mo\u017ee do\u0107i do prelivanja jesu burad sa kapacitetom \\(0\\), u koje ne sme upasti ni litar ki\u0161e. Zato, Marko mora prekriti sve buri\u0107e na dane kada bi u makar jedno bure kapaciteta \\(0\\) upala ki\u0161a, \u0161to je ekvivalentno sa proverom da li u intervalu nizu postoji \\(0\\). Ovo mo\u017eemo proveriti npr. binarnom pretragom nad indeksima gde se pojavljuje \\(0\\) ili prefiksnim sumama kojim brojimo nule na prefiksu. Vremenska slo\u017eenost \\(O(N+M)\\) ili \\(O(N+MlogN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/03_burad/#resenje-kada-n-m-leq-2000","title":"Re\u0161enje kada \\(N, M \\leq 2000\\)","text":"<p>Prvo je potrebno da odredimo koliko litara ki\u0161e je prognozirano za svako bure. To mo\u017eemo jednostavno uraditi tako \u0161to za svaki dan prolazimo kroz sve buri\u0107e i uve\u0107amo broj litara za jedan. Nazovimo taj broj litara za \\(i\\)-to bure \\(cnt_i\\). Sada je potrebno da posmatramo isklju\u010divo buri\u0107e za koje va\u017ei \\(cnt_i &gt; a_i\\), odnosno one koji bi se prelili kada ni\u0161ta ne bismo u\u010dinili. </p> <p>Sada, idemo sleva nadesno i svaki put kada nai\u0111emo na takvo bure, znamo da moramo da pokrijemo buri\u0107e na makar \\(cnt_i - a_i\\) novih dana. \u010cuvajmo u nekom nizu sve dane za koje nismo odredili da li \u0107emo prekriti buri\u0107e taj dan (zva\u0107emo ih neobrisani intervali). Kad god moramo da obri\u0161emo novi interval, obrisa\u0107emo onaj interval koji sadr\u017ei \\(i\\), a prose\u017ee se \u0161to je mogu\u0107e dalje u desno. Ovo je optimalno, jer su tako najve\u0107e \u0161anse da \u0107emo tim brisanjem smanjiti \\(cnt_j\\) drugih kriti\u010dnih buri\u0107a. Kada odaberemo takav interval, bri\u0161emo ga iz niza, i smanjujemo odgovaraju\u0107e elemente \\(cnt\\) niza. Nastavljamo desno dok ne obradimo ceo niz. </p> <p>Vremenska slo\u017eenost je \\(O(NM)\\), a memorijska \\(O(N+M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/03_burad/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Ideja iza ovog re\u0161enja ista je kao za prethodno, samo je potrebno da sve uradimo efikasnije. Prvi deo, pronala\u017eenje niza \\(cnt_i\\), uradi\u0107emo konstrukcijom novog niza, \\(b\\). Na po\u010detku, on \u0107e biti ispunjen nulama. Za svaki dan \\(i\\), mi \u0107emo pove\u0107ati \\(b_{l_i}\\) za jedan, a smanjiti \\(b_{r_i+1}\\) isto za jedan. Niz \\(cnt\\) dobijamo kao niz prefiksnih suma nad nizom \\(b\\).</p> <p>Drugi deo \u0107emo raditi sli\u010dno kao u prethodnom re\u0161enju, samo \u0161to \u0107emo umesto niza neobrisanih intervala, \u010duva\u0107emo skup (std::multiset), sortiran po desnom kraju intervala. \u010cuva\u0107emo samo one intervale koji sadr\u017ee trenutni element, dakle doda\u0107emo interval \\(j\\) tek kad va\u017ei \\(l_j = i\\), a izbaciti tek kad je obrisan ili kada \\(r_j = i\\). Svaki put kada treba da obri\u0161emo interval, obrisa\u0107emo najve\u0107i u skupu. Sli\u010dno se mo\u017ee uraditi i sa prioritetnim redom (std::priority_queue), sa malo dodatne analize.</p> <p>Vremenska slo\u017eenost je \\(O(N+MlogN)\\), a memorijska \\(O(N+M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/04_koncert/","title":"A1 - Koncert","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Nikola Milosavljevi\u0107 Nikola Milosavljevi\u0107 Nikola Milosavljevi\u0107 Igor Pavlovi\u0107 <p>Kako nije dozvoljeno ponavljanje polja na putu, u svakom redu se ide samo u jednom smeru (ulevo ili udesno) ili direktno na gore. Promena strkture reda guranjem ne uti\u010de na dalji deo puta jer nije dozvoljeno vra\u0107anje unazad.</p> <p>U Podzadatku 1 je dovoljno koristiti klasi\u010dno dinami\u010dko programiranje za ra\u010dunanje broja odgovaraju\u0107ih puteva u \\(O(nm)\\) ili primeniti malo kombinatorike: za svaki od \\(n\\) redova mo\u017eemo na \\(m\\) na\u010dina izabrati polje u koje dolazimo iz prethodnog reda (za poslednji red, to je polje iz koga po\u010dinjemo) a nakon toga je put jedinstveno odre\u0111en. Dakle, odgovor je \\(m^n\\) mod \\((10^9 + 7)\\). Za Podzadatak 2 je dovoljno isprobati sve mogu\u0107e puteve, najednostavnije koriste\u0107i rekurziju/bektrek u slo\u017eenosti \\(O(m\\cdot m^n)\\).</p> <p>Zadatak je najprirodnije re\u0161avati dinami\u010dkim programiranjem. Defini\u0161imo \\(d[i][j] =\\) broj (validnih) puteva koji se zavr\u0161avaju u polju \\((i,j)\\) date matrice \\(a\\) pri \u010demu je poslednji potez \"nagore\". Kona\u010dno re\u0161enje je \\(\\sum_{1 \\leq j \\leq m, \\  a[1][j]=0} d[1][j]\\) a po\u010detne vrednosti su \\(d[n][j] = a[n][j]\\) za \\(j=1,2,\\ldots,m\\). Rekurentna veza je data sa \\(d[i][j] =\\sum_x d[i+1][x]\\), gde se sumiranje vr\u0161i po svim indeksima \\(x\\) takvih da je (guranjem) u \\((i+1)\\)-om redu mogu\u0107e do\u0107i od pozicije \\(x\\) (koja treba biti prazno polje) do pozicije \\(j\\) (koja ne mora nu\u017eno biti prazno polje). Najjednostavniji na\u010din je ispitati svaku poziciju \\(x\\) iz \\((i+1)\\)-og reda; ako je \\(x_L\\) pozicija \\((k+1)\\)-ve osobe levo  u odnosu na poziciju \\(x\\) a \\(x_R\\) pozicija \\((k+1)\\)-ve osobe desno  u odnosu na poziciju \\(x\\), tada, sa pozicije \\(x\\) mo\u017eemo guranjem do\u0107i do bilo koje koje (i samo te) pozicije iz segmenta \\([x_L+(k+1), x_R-k]\\). Vrednosti \\(x_L\\) i \\(x_R\\) za svako \\(x\\) mo\u017eemo odrediti u svega dva prolaza kroz \\((i+1)\\)-vi red (sleva udesno i sdesna ulevo) npr. ubacivaju\u0107i pozicije jedinica na koje nai\u0111emo u neki pomo\u0107ni vektor. Ovo daje re\u0161enje slo\u017eenosti \\(O(nm^2)\\) \u0161to je dovoljno za Podzadatak 4.</p> <p>U Podzadatku 3 nema guranja pa se rekurentna veza mo\u017ee uprostiti uvo\u0111enjem pomo\u0107nih matrica, npr. \\(L[i][j]=\\) broj puteva koji se zavr\u0161avaju u polju \\((i,j)\\) pri \u010demu je poslednji potez \"ulevo\" i analogno za \\(R[i][j]\\) i \"udesno\". Sada se sve ove matrice mogu paraleno izra\u010dunati, \\(d[i][j] = d[i+1][j]+L[i+1][j]+R[i+1][j]\\), \\(L[i][j] = L[i][j+1]+d[i][j+1]\\), \\(R[i][j] = R[i][j-1]+d[i][j-1]\\) (u odgovaraju\u0107em redosledu i proveru zauzetosti polja). To je \\(O(1)\\) po polju tj. \\(O(nm)\\) ukupno.</p> <p>Za kona\u010dno re\u0161enje, treba ubrzati \\(O(nm^2)\\) algoritam. Iz tog re\u0161enja, znamo da \u0107e za svako polje \\((i+1,x)\\), vrednost \\(d[i+1][x]\\) u\u010destvovati u formuli za ra\u010dunanje vrednosti \\(d[i][j]\\) za svako \\(j\\in[x_L+(k+1),x_R-k]\\) (uz proveru \\(d[i][j]=0\\) i granice za segment). Zato mo\u017eemo, nakon obrade \\((i+1)\\)-og reda, za svako \\(x\\) pove\u0107ati sve \\(d[i][j]\\) iz reda iznad koji su u odgovaraju\u0107em segmentu za \\(d[i+1][x]\\). Naravno, direktna implementacija ovoga ne bi smanjila slo\u017eenost ali mo\u017eemo koristiti poznati trik; dovoljno je dodati elementu na po\u010detku segmenta \\(+d[i+1][x]\\) i dodati elementu nakon kraja segmenta \\(-d[i+1][x]\\) (za svako \\(x\\)) i na kraju \u0107e tra\u017eene vrednosti u novom redu biti prefiksne sume trenutnih vrednosti. Ovo daje algoritam slo\u017eenosti \\(O(nm)\\).</p> <p>Alternativno (i ne\u0161to jednostavnije re\u0161enje) je definisati \\(d[i][j]=\\)broj puteva koji po\u010dinju iz polja \\((i,j)\\). Tada vrednosti mo\u017eemo ra\u010dunati odozgo nadole i, na osnovu prethodne diskusije, va\u017ei \\(d[i][j] = \\sum_{j_L + k + 1 \\leq x \\leq j_R - k} d[i-1][x]\\), gde se vrednosti \\(j_L\\) i \\(j_R\\) odnose na trenutni, \\(i\\)-ti red. Koriste\u0107i prefiksne sume, prethodnu sumu mo\u017eemo izra\u010dunati u \\(O(1)\\) (preciznije, jedan red matrice \\(d\\) ra\u010dunamo u \\(O(m)\\)) pa dobijamo algoritam slo\u017eenosti \\(O(nm)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/05_smeker/","title":"A2 - \u0160meker","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Pavle Martinovi\u0107 Aleksa Milisavljevi\u0107"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/05_smeker/#resenje-kada-n-m-leq-500","title":"Re\u0161enje kada \\(N, M \\leq 500\\)","text":"<p>U ovom slu\u010daju, kao re\u0161enje mo\u017eemo da za svako dete samo izbrojimo koliko postoji dece u svakom od \\(4\\) kvadranta. Za ovo naprosto iteriramo kroz svu decu posle svakog dodavanja, i sa par provera uslova na\u0111emo \u0161mekera. Slo\u017eenost \\(O(N^3)\\)</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/05_smeker/#resenje-kada-tacke-imaju-iste-x-i-y-koordinate","title":"Re\u0161enje kada ta\u010dke imaju iste \\(x\\) i \\(y\\) koordinate","text":"<p>U ovom slu\u010daju, mo\u017eemo da vidimo da je drugi uslov trivijalno ispunjen, pa samo treba da na\u0111emo dete za koje va\u017ei da ima jednako dece gore desno i dole levo. Ovo je ekvivalentno sa time da ako posmatramo da su deca na pravoj, tra\u017eimo onog \u010dija je pozicija medijana niza. Stoga nam je potrebna neka struktura koja nam omogu\u0107ava odr\u017eavanje medijane niza u kojem dodajemo nove elemente. Ovo mo\u017ee da se uradi nekim jakim strukturama kao <code>ordered statistic set</code>, ali najelementarnije re\u0161enje bi bilo da odr\u017eavamo dve <code>heap</code> strukture, jedan gde se \u010duva najve\u0107ih i drugi gde se \u010duva najmanjih pola elemenata. Kada dodajemo jedan element u niz, ubacimo ga u neki od njih, i onda najvi\u0161e jednim prebacivanjem mo\u017eemo da odr\u017eimo tra\u017eenu strukturu.</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/05_smeker/#resenje-kada-nleq-4000","title":"Re\u0161enje kada \\(N\\leq 4000\\)","text":"<p>Primetimo da je uslov da je neko dete \u0161meker ekvivalentan sa time da je njegova \\(x\\)-koordinata medijana po svim \\(x\\)-koordinatama, i njegova \\(y\\)-koordinata medijana po svim \\(y\\)-koordinatama. Zaista, ako je gore levo \\(a_1\\), gore desno \\(a_2\\), dole desno \\(a_3\\) i dole levo \\(a_4\\) dece, uslov za medijane je \\(a_1+a_2=a_3+a_4\\) i \\(a_1+a_4=a_2+a_3\\), pa sabiranjem imamo \\(2a_1+a_2+a_4=a_2+2a_3+a_4\\iff a_1=a_3\\), iz \u010dega zaklju\u010dujemo i \\(a_2=a_4\\), pa dete koje je po obe koordinate medijana je zaista \u0161meker. Obratno, ako je \\(a_1=a_3\\) i \\(a_2=a_4\\), uslovi \\(a_1+a_2=a_3+a_4\\) i \\(a_1+a_4=a_2+a_3\\) su trivijalno ispunjeni, pa smo dokazali tra\u017eenu ekvivalenciju. </p> <p>Sada imamo vrlo lako re\u0161enje u \\(O(N^2logN)\\) tako \u0161to posle svakog dodavanja po obe koordinate na\u0111emo medijanu u \\(O(NlogN)\\), i u zavisnosti od toga jel pripada istom detetu smo na\u0161li \u0161mekera ili na\u0161li da \u0161meker ne postoji.</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/05_smeker/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Ovde je neophodno samo kombinovati ideje iz prethodna dva podzadatka. Kao u drugom podzadatku odr\u017eavamo medijanu, ali zasebno za \\(x\\)- i za \\(y\\)-koordinatu u na\u0161oj omiljenoj strukturi. Onda posle svakog novog deteta, vidimo da li su deca koji odgovaraju tim medijanama jednaki. Ukupna slo\u017eenost \\(O(NlogN)\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/06_konstrukta/","title":"A3 - Konstrukta","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Aleksa Plav\u0161i\u0107 Aleksa Plav\u0161i\u0107 Aleksa Milisavljevi\u0107 Aleksa Plav\u0161i\u0107 <p>Zadatak mo\u017eemo modelovati kao neusmereno stablo, gde \u010dvorovi predstavljaju dr\u017eave, dok grane predstavljaju autobuske linije.</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/06_konstrukta/#prvi-podzadatak","title":"Prvi podzadatak","text":"<p>Uvek mo\u017eemo posti\u0107i da najudaljeniji \u010dvor bude na udaljenosti \\(D = \\frac{N}{4} + 1\\). Ako \u010dvorove na putu indeksiramo sa \\(x_1, x_2, \\dots, x_N\\) postavi\u0107emo granu izme\u0111u \u010dvorova \\(x_{D + 1}\\) i \\(x_{N - D + 1}\\) i Evroviziju \u0107emo odr\u017eati u prvom od njih. Lako se mo\u017ee pokazati da ne mo\u017eemo posti\u0107i bolje re\u0161enje za graf koji je put. Potrebno je biti pa\u017eljiv za puteve du\u017eine \\(4\\) i \\(5\\).</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/06_konstrukta/#drugi-podzadatak","title":"Drugi podzadatak","text":"<p>Fiksira\u0107emo \u010dvorove izme\u0111u kojih \u0107emo dodati granu (\\(O(N^2)\\) mogu\u0107nosti) i fiksira\u0107emo \u010dvor u kome \u0107e biti odr\u017eana Evrovizija (\\(O(N)\\) mogu\u0107nosti). Potrebno je na\u0107i najkra\u0107i put od \u010dvora u kome \u0107e biti odr\u017eana Evrovizija do ostalih \u010dvorova, \u0161to mo\u017eemo uraditi algoritmom pretrage u \u0161irinu (BFS). Mo\u017eemo iskoristiti i odre\u0111ene modifikacije pretrage u dubinu (DFS), po\u0161to graf sadr\u017ei ta\u010dno jedan ciklus. Vremenska slo\u017eenost ovog algoritma iznosi \\(O(N^4)\\), dok memorijska iznosi \\(O(N)\\) ili \\(O(N^2)\\) zavisno od reprezentacije grafa.</p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/06_konstrukta/#treci-podzatak","title":"Tre\u0107i podzatak","text":"<p>Obzervacija 1: Evroviziju uvek treba odr\u017eati u jednom od krajeva grane koje dodajemo. Ovo ne povla\u010di da u nekim drugim \u010dvorovima ne mo\u017eemo odr\u017eati Evroviziju, ve\u0107 da je jedan od krajeva grane uvek me\u0111u optimalnim izborima. Primetimo da specijalan slu\u010daj predstavljaju grafovi koji imaju dijametar (najdu\u017ei put) du\u017eine 2, u tom slu\u010daju dodavanje nove grane ne pobolj\u0161ava re\u0161enje.</p> <p>Ovo nam pru\u017ea podlogu za algoritam vremenske slo\u017eenosti \\(O(N^3)\\), po\u0161to za fiksnu granu treba da proverimo samo dve mogu\u0107nosti za mesto odr\u017eavanja Evrovizije. U slu\u010daju da je dijametar du\u017eine \\(2\\), mo\u017eemo ispisati bilo koju granu. </p>"},{"location":"takprog/2021%20%7C%202022/05%20Dr%C5%BEavno/06_konstrukta/#kompletno-resenje","title":"Kompletno re\u0161enje","text":"<p>Obzervacija 2: Grana koju dodajemo uvek \u0107e povezivati dva \u010dvora na dijametru stabla (ako imamo vi\u0161e dijametara, mo\u017eemo izabrati proizvoljan).</p> <p>Neka niz \u010dvorova \\(x_1, x_2, \\dots, x_d\\) predstavlja dijametar stabla. Primetimo da je maksimalna udaljenost nekog od \u010dvorova binarno pretra\u017eiva i da ne mo\u017ee iznositi vi\u0161e od \\(\\frac{d}{2}\\) (ako se Evrovizija odr\u017eava u \u010dvoru \\(x_{\\frac{d + 1}{2}}\\)). Pretpostavimo da trenutno proveravamo u binarnoj pretrazi da li mo\u017ee maksimalna udaljenost biti manja ili jednaka od \\(c\\). U tom slu\u010daju optimalno je postaviti granu izme\u0111u \u010dvorova \\(x_{c + 1}\\) i $x_{d - c + 1} i odr\u017eati Evroviziju u prvom od njih ili izme\u0111u \u010dvorova \\(x_c\\) i \\(x_{d - c}\\) i odr\u017eati Evroviziju u drugom od njih. Kada znamo izme\u0111u koja dva \u010dvora \u0107emo postaviti granu i da jedan od njih mora biti mesto odr\u017eavanja Evrovizije, ostalo je samo proveriti da li neki od njih zadovoljava uslov da nakon postavljanja grane svi ostali \u010dvorovi budu udaljeni ne vi\u0161e od \\(c\\). To mo\u017eemo ponovo uraditi nekim od algoritama za pronalazak najkra\u0107eg puta u grafu. Ukupna vremenska slo\u017eenost \\(O(N log N)\\) i memorijska \\(O(N)\\).</p> <p>Bonus: Re\u0161ite zadatak u vremenskoj slo\u017eenosti \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/01_laz/","title":"1 - La\u017e","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Tadija \u0160ebez Pavle Martinovi\u0107 Mladen Puzi\u0107"},{"location":"takprog/2021%20%7C%202022/06%20SIO/01_laz/#resenje-kada-q-2000","title":"Re\u0161enje kada \\(q = 2000\\)","text":"<p>Ovaj podzadatak je tu za takmi\u010dare koji na neoptimalan na\u010din iskucaju re\u0161enje iz slede\u0107eg podzadatka.</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/01_laz/#resenje-kada-q-1000","title":"Re\u0161enje kada \\(q = 1000\\)","text":"<p>Mo\u017eemo da saznamo da li je neko la\u017eov ili istinoljubac sa samo jednim pitanjem. Ako osoba \\(x\\) pitamo za skup \\(\\{x, y\\}\\), gde je \\(y\\) bilo koja druga osoba, sazna\u0107emo da li je \\(y\\) la\u017eov ili istinoljubac (samo ukoliko ka\u017ee da u njemu ima neparno la\u017eova, onda je osoba \\(y\\) la\u017eov). Ovo znamo, jer ako osoba \\(x\\) govori istinu, onda odgovor zavisi samo od toga da li je \\(y\\) la\u017eov. Ako la\u017ee, i ako su obojica la\u017eovi, \\(x\\) \u0107e jo\u0161 uvek re\u0107i da je neparno la\u017eova. U suprotnom, re\u0107i \u0107e da ima neparno la\u017eova.</p> <p>Sad mo\u017eemo pro\u0107i kroz niz i za svaku osobu saznati da li je istinoljubac ili la\u017eov sa po jednim pitanjem.</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/01_laz/#resenje-kada-q-30-i-postoji-tacno-jedan-lazov","title":"Re\u0161enje kada \\(q = 30\\) i postoji ta\u010dno jedan la\u017eov","text":"<p>Koriste\u0107i ideju iz prethodnog podzadatka, odredimo da li je osoba \\(1\\) istinoljubac ili la\u017eov. Ukoliko je la\u017eov, mo\u017eemo vratiti njegov indeks, u suprotnom, mo\u017eemo ga koristiti da saznamo informacije o ostalim ljudima.</p> <p>Ako je istinoljubac, onda je la\u017eov neka od osoba na intervalu \\([2, N]\\). Podelimo ovaj interval na pola. La\u017eov se mora nalaziti u jednoj od te dve polovine. Pitajmo osobu \\(1\\) da li je la\u017eov u prvoj polovini. Ukoliko jeste, dalje razmatramo samo nju, u suprotnom, razmatramo samo drugu polovinu.</p> <p>Ovom metodom nalik na binarnu pretragu, mo\u017eemo na\u0107i la\u017eova sa jo\u0161 desetak pitanja.</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/01_laz/#resenje-kada-q-30-i-postoji-neparno-lazova","title":"Re\u0161enje kada \\(q = 30\\) i postoji neparno la\u017eova","text":"<p>Sli\u010dno prethodnom podzadatku, prvo nalazimo informaciju o osobi \\(1\\). Nakon toga, ponovo radimo binarnu pretragu na intervalu \\([2, N]\\). Ovaj put, umesto da odr\u017eavamo samo jednog la\u017eova, \u017eelimo da interval koji posmatramo uvek ima neparan broj la\u017eova. Kada podelimo interval koji ima neparan broj la\u017eova na dve polovine, jedna polovina ima\u0107e paran broj la\u017eova, a druga neparan. Pretragu nastavljamo u onoj polovini koja ima neparan broj. Tako radimo dok ne do\u0111emo do jednog la\u017eova.</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/01_laz/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Poslednji podzadatak re\u0161avamo kao prethodni, samo \u0161to je prvo potrebno da na\u0111emo neki podskup ljudi u kojem ima neparno la\u017eova. To mo\u017eemo uraditi nasumi\u010dnim (randomiziranim) pristupom. </p> <p>Svaki element ubacujemo u na\u0161 podskup sa verovatno\u0107om \\(50\\%\\). Samim tim, verovatno\u0107a da \u0107e taj podskup imati neparno la\u017eova je tako\u0111e \\(50\\%\\). Ukoliko podskup koji smo dobili ima parno mnogo la\u017eova, onda konstrui\u0161emo novi podskup, dok ne dobijemo neki koji nam odgovara. </p> <p>Verovatno\u0107a da \u0107e nam za to trebati preko \\(19\\) poku\u0161aja je jako mala, \\(\\frac{1}{2^{19}}\\), pa je mo\u017eemo zanemariti. Ostala pitanja mo\u017eemo iskoristiti na drugi deo re\u0161enja, gde opet radimo ne\u0161to nalik na binarnu pretragu, samo ovaj put delimo skup na dva, umesto interval. </p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/02_tsm/","title":"2 - TSM","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Mladen Puzi\u0107 Mladen Puzi\u0107 Mladen Puzi\u0107 Tadija \u0160ebez"},{"location":"takprog/2021%20%7C%202022/06%20SIO/02_tsm/#resenje-kada-m-leq-9","title":"Re\u0161enje kada \\(M \\leq 9\\)","text":"<p>Prvo na\u0111imo neko minimalno razapinju\u0107e stablo grafa koji dobijemo kada kao grane dodamo svaki metro plan (u daljem tekstu MST). Za to mo\u017eemo koristiti neki poznati algoritam, poput Kruskalovog ili Primovog. Nakon toga, za svaki mogu\u0107i poredak proverimo da li nam daje MST i od takvih uzimamo leksikografski najve\u0107i.</p> <p>Vremenska slo\u017eenost je \\(O(M! \\cdot M \\cdot \\alpha(M))\\), a memorijska \\(O(M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/02_tsm/#resenje-kada-se-svaki-plan-linije-nalazi-u-najvise-jednom-ciklusu","title":"Re\u0161enje kada se svaki plan linije nalazi u najvi\u0161e jednom ciklusu","text":"<p>Ovakav graf se zove kaktus graf. Mo\u017eemo lako zaklju\u010diti da je u kaktus grafu, da bismo dobili MST, potrebno da u svakom ciklusu u grafu izbacimo najskuplju granu. \u0160to zna\u010di, da se najskuplja grana mora na\u0107i u poretku nakon svih drugih grana u tom ciklusu.</p> <p>Po\u0161to je u pitanju kaktus graf, lako mo\u017eemo DFS algoritmom na\u0107i sve cikluse (npr. posmatranjem svih povratnih grana), i tako svesti problem na spajanje \\(K\\) nizova na leksikografski najve\u0107i na\u010din, \u0161to je poznat problem koji se mo\u017ee re\u0161iti primenom prioritetnog reda (std::priority_queue).</p> <p>Vremenska slo\u017eenost je \\(O(MlogN)\\), a memorijska \\(O(M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/02_tsm/#resenje-kada-je-mst-put-i-nm-leq-5000","title":"Re\u0161enje kada je MST put i \\(N,M \\leq 5000\\)","text":"<p>Po\u0161to su cene svih grana razli\u010dite, MST je jedinstven. Dakle, na\u0111imo MST i znamo da \u0107e on biti put. Postavimo njegove grane redom u niz tako da je jedan kraj puta indeksiran sa \\(1\\), a drugi sa \\(N-1\\).</p> <p>Sada, za svaku granu koja nije u MST, recimo da povezuje stanice \\(x\\) i \\(y\\), mora da va\u017ei da se nalazi u permutaciji nakon svih grana na putu izme\u0111u \\(x\\) i \\(y\\) u MST. Ako to ne va\u017ei, dodali bismo skuplju granu, a kasnije ne bismo mogli da dodamo jeftiniju, \u0161to zna\u010di da ne bismo dobili MST. Taj put odgovara nekom intervalu u na\u0161em nizu.</p> <p>Sada mo\u017eemo konstruisati novi, usmereni, graf, gde su planirane metro linije \u010dvorovi, a grana od \u010dvora \\(u\\) do \u010dvora \\(v\\) postoji isklju\u010divo ako linija \\(u\\) mora da se na\u0111e pre linije \\(v\\) u krajnjem poretku. Ove grane mo\u017eemo lako na\u0107i prolaskom kroz niz za svaku granu van MST.</p> <p>Sada se problem svodi na leksikografski najve\u0107e topolo\u0161ko sortiranje, koje je mogu\u0107e jer svi \u010dvorovi imaju razli\u010dite cene. Mo\u017eemo ga uraditi prioritetnim redom.</p> <p>Vremenska slo\u017eenost: \\(O(M^2\\log M\\)), a memorijski \\(O(M^2)\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/02_tsm/#resenje-kada-je-mst-put","title":"Re\u0161enje kada je MST put","text":"<p>Sli\u010dno prethodnom podzadatku, nalazimo MST i za svaku granu van njega znamo da sve grane na tom putu se moraju nalaziti pre nje. Ono \u0161to je potrebno da primetimo jeste da \u0107emo grane na tom putu dodavati opadaju\u0107e po ceni, tj. ako \u017eelimo leksikografski najve\u0107i poredak, nema razloga da dodamo manju granu MST-a pre ve\u0107e.</p> <p>Zato, umesto da konstrui\u0161emo sve grane usmerenog grafa, dovoljno je konstruisati granu izme\u0111u najjeftinije grane na odre\u0111enom intervalu i grane koju posmatramo. To je dovoljno ograni\u010dava, jer znamo da po tranzitivnosti onda ne\u0107e se javiti pre nijedne grane na putu.</p> <p>Sada mo\u017eemo raditi topolo\u0161ko sortiranje kao u prethodnom podzadatku, samo \u0161to ovaj put imamo mnogo manje grana. Tako\u0111e, mo\u017eemo primetiti da je mogu\u0107e i raditi leksikografsko spajanje \\(K\\) nizova kao u drugom zadatku.</p> <p>Vremenska slo\u017eenost je \\(O(MlogN)\\), a memorijska \\(O(M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/02_tsm/#resenje-kada-n-m-leq-5000","title":"Re\u0161enje kada \\(N, M \\leq 5000\\)","text":"<p>Sli\u010dno podzadatku u kome je MST put, samo kako bismo na\u0161li grane usmerenog grafa, potrebno je da pro\u0111emo kroz put na MST, umesto kroz interval niza. Ovo mo\u017eemo uraditi tako \u0161to korenujemo stablo u nekom \u010dvoru, pa pamtimo roditelja za svaki \u010dvor.</p> <p>Vremenska slo\u017eenost: \\(O(M^2\\log M\\)), a memorijski \\(O(M^2)\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/02_tsm/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Sli\u010dno podzadatku u kome je MST put, samo kako bismo na\u0161li grane usmerenog grafa, potrebno je da efikasno na\u0111emo najmanju granu na putu MST, umesto na intervalu niza. Ovo mo\u017eemo uraditi preko tehnike binarnog podizanja (binary lifting). Korenujemo MST u proizvoljnom \u010dvoru, na\u0111emo pretka svakog \u010dvora (za pretka korena stavimo samog sebe). Nakon toga, za svaki \u010dvor i za svako \\(l\\) od \\(0\\) do \\(\\log N\\) pamtimo najmanju granu ako se \\(2^l\\) grana penjemo na gore. To nam mo\u017ee pomo\u0107i da u \\(O(\\log N)\\) na\u0111emo minimum na bilo kom putu (sli\u010dno algoritmu tra\u017eenja minimalnog zajedni\u010dkog pretka).</p> <p>Vremenska slo\u017eenost je \\(O(MlogN)\\), a memorijska \\(O(M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/03_igrica/","title":"3 - Igrica","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Nikola Milosavljevi\u0107 Tadija \u0160ebez Tadija \u0160ebez Nikola Milosavljevi\u0107"},{"location":"takprog/2021%20%7C%202022/06%20SIO/03_igrica/#resenje-kada-je-n-q-leq-1000","title":"Re\u0161enje kada je \\(N, Q \\leq 1000\\)","text":"<p>Na upite za ovaj podzadatak mogu\u0107e je odgovoriti direktnim izra\u010dunavanjem tra\u017eene sume.</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/03_igrica/#resenje-kada-je-s_i-leq-10","title":"Re\u0161enje kada je \\(S_i \\leq 10\\)","text":"<p>Upite mo\u017eemo da re\u0161avamo iz dva dela. Prvih \\(S_i\\) \u010dlanova sume mo\u017eemo da ura\u010dunamo direktno po formuli kao u pro\u0161lom podzadatku, a za ostale \u010dlanove znamo da je \\(m &gt; S_i\\) pa je \\(S_i\\) \\(mod\\) \\(m = S_i\\), te je dovoljno na\u0107i njihovu sumu i pomno\u017eiti je sa \\(S_i\\). Za brze upite o sumi na podnizu mo\u017eemo da koristimo strukturu podataka binarno indeksirano stablo ili segmentno stablo. Ove strukture podr\u017eavaju izmenu \u010dlanova niza, tako da lako mo\u017eemo da podr\u017eimo i a\u017euriranja igrice. Vremenska slo\u017eenost je \\(O((N+Q)logN)\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/03_igrica/#resenje-kada-je-a_i-1-i-t_i-1","title":"Re\u0161enje kada je \\(A_i = 1\\) i \\(T_i = 1\\)","text":"<p>U ovom podzadatku upiti se svode na izra\u010dunavanje sume \\(\\Sigma_{m=1}^{R_i - L_i + 1} (S_i\\) \\(mod\\) \\(m)\\). Primetimo da je \\(S_i\\) \\(mod\\) \\(m = S_i - \\lfloor \\frac{S_i}{m} \\rfloor \\cdot m\\), pa mo\u017eemo sumu da rastavimo po minusu. Prvi deo je \\(S_i \\cdot (R_i - L_i + 1)\\) i od njega oduzimamo drugi deo koji ra\u010dunamo iz vi\u0161e delova. Prvih \\(\\sqrt{S_i}\\) \u010dlanova sume ra\u010dunamo direktno po formuli. Za ostale \u010dlanove postoji najvi\u0161e \\(\\sqrt{S_i}\\) razli\u010ditih vrednosti za \\(\\lfloor \\frac{S_i}{m} \\rfloor\\) i mo\u017eemo da odredimo levu i desnu granicu za svaku vrednost tako da mo\u017eemo da izra\u010dunamo \\(\\Sigma_{m=l}^{r} \\lfloor \\frac{S_i}{m} \\rfloor \\cdot m\\) kao \\(\\lfloor \\frac{S_i}{m} \\rfloor \\Sigma_{m=l}^{r} m\\) primenom formule za zbir uzastopnih prirodnih brojeva ili prekalkulisanjem ovih suma. Vremenska slo\u017eenost je \\(O(Q \\sqrt{S})\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/03_igrica/#resenje-kada-je-t_i-1","title":"Re\u0161enje kada je \\(T_i = 1\\)","text":"<p>Upite re\u0161avamo na sli\u010dan na\u010din kao u prethodnom podzadatku, ali su formule malo komplikovanije. Prekalkulisa\u0107emo prefiksne sume niza \\(A_i\\) i niza \\(A_i \\cdot i\\). Pronalazimo grupe kao u pro\u0161lom podzadatku i umesto zbira uzastopnih celih brojeva, koristi\u0107emo prekalkulisane vrednosti. \\(\\Sigma_{m=l}^{r} A_{L_i + m - 1} \\cdot \\lfloor \\frac{S_i}{m} \\rfloor \\cdot m\\) se svodi na izra\u010dunavanje \\(\\Sigma_{m=l}^{r} A_{L_i + m - 1} \\cdot m\\) po\u0161to je vrednost \\(\\lfloor \\frac{S_i}{m} \\rfloor\\) fiksna za svaku grupu. Izra\u010dunavanje pomenute sume mogu\u0107e je preko suma podniza niza \\(A_i\\) i \\(A_i \\cdot i\\). vremenska slo\u017eenost je \\(O(Q \\sqrt(S))\\)</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/03_igrica/#resenje-za-sve-bodove","title":"Re\u0161enje za sve bodove","text":"<p>Za celo re\u0161enje potrebno je jo\u0161 podr\u017eati operacije izmene niza. Dovoljno je umesto prekalkulisanih prefiksnih suma koristiti binarno indeksirano stablo za odr\u017eavanje suma na podnizu. Vremenska slo\u017eenost ovog re\u0161enja je \\(O(Q \\sqrt{S} log N)\\)</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/04_dugmici/","title":"4 - Dugmi\u0107i","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Aleksa Milojevi\u0107 Mom\u010dilo To\u0161i\u0107 Mom\u010dilo To\u0161i\u0107"},{"location":"takprog/2021%20%7C%202022/06%20SIO/04_dugmici/#resenje-kada-t_i-leq-6-i-z_i-leq-6-za-x_i-1","title":"Re\u0161enje kada \\(T_i \\leq 6\\), i \\(Z_i \\leq 6\\) za \\(X_i = 1\\):","text":"<p>U ovom slu\u010daju treba razmatrati jedino kratke segmente \\([L,R]\\), jer ukoliko je odgovor DA, mora\u0107emo u jednom trenutku da odemo od krajnjeg levog do krajnjeg desnog dugmeta, \u0161to bi ugasilo po\u010detni tajmer ukoliko je \\(T_L &lt; (R-L)\\). Na ovim segmentima mo\u017eemo da poku\u0161amo da idemo levo-desno par puta, menjaju\u0107i na svakom koraku sve tajmere u segmentu.</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/04_dugmici/#resenje-kada-nq-leq-2000","title":"Re\u0161enje kada \\(N,Q \\leq 2000\\):","text":"<p>Uo\u010dimo da, ukoliko postoji re\u0161enje, \u0107emo do svakog dugmeta morati u nekom trenutku da do\u0111emo do levog, kao i do desnog kraja segmenta, i nazad. Dakle, za trajanje svakog tajmera u tra\u017eenom segmentu mora da va\u017ei \\(T_i \\geq 2(i-L)\\) (dugme-levi kraj-dugme) i \\(T_i \\geq 2(R-i)\\) (analogno za desni kraj). Obilazak 'levo-desno' nam upravo garantuje da uspevamo \u010dak i ako va\u017ei \\(T_i = 2(i-L)\\) i \\(T_i = 2(R-i)\\). Ove nejednakosti mo\u017eemo ru\u010dno da proverimo za svako dugme u segmentu. </p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/04_dugmici/#resenje-kada-x_i-2","title":"Re\u0161enje kada \\(X_i = 2\\)","text":"<p>\u010cinjenica da nema promena u nizu implicira offline re\u0161enje. Naime, potrebno je na\u0107i odgovore za sve segmente \\([L,R]\\) prolaskom kroz niz jednom. Primetimo da ako va\u017ei nejednakost \\(T_i \\geq 2(i-L)\\), za neko \\(L\\), ona va\u017ei i za sve manje \\(L\\). Shodno tome, obilazimo sve dugmi\u0107e od \\(1\\) ka \\(N\\) i na svakom dodajemo u neku strukturu sve leve krajeve segmenata koji u njemu po\u010dinju, dok bri\u0161emo redom (od manjih ka ve\u0107im) sve leve po\u010detke za koje ne va\u017ei \\(T_i \\geq 2(i-L)\\) (\u0161to posti\u017eemo tako \u0161to npr. u multiset dr\u017eimo vrednosti \\(2L\\) i pore\u0111ujemo ih sa \\(2i-T_i\\)), a potvr\u0111ujemo mogu\u0107nost re\u0161enja za neki segment kad do\u0111emo do dugmeta koje predstavlja njegov desni kraj. Ovo je potrebno uraditi i u drugom smeru (od kraja ka po\u010detku).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/04_dugmici/#resenje-za-pun-broj-poena","title":"Re\u0161enje za pun broj poena","text":"<p>Kako u svim dugmi\u0107ima segmenta treba da va\u017ei \\(T_i \\geq 2(i-L), T_i \\geq 2(R-i)\\) (\u0161to je ekvivalentno sa \\(2L \\geq 2i-T_i, 2R \\leq T_i+2i\\)), to zna\u010di da nam je potreban na\u010din da odredimo da li postoji vrednost \\(2i-T_i \\leq 2L\\) i \\(2i+T_i \\geq 2R\\) za \\(i\\) u segmentu \\([L, R]\\) (vrednost za koje ne va\u017ei nejednakost), kao i da promenimo vrednost na nekoj poziciji. Ovo nam omogu\u0107avaju dva segmentna stabla, gde \u010duvamo vrednosti \\(2i+T_i\\) i \\(2i-T_i\\) i pore\u0111ujemo maksimum, odnosno minimum na tra\u017eenim segmentima sa \\(2R\\) i \\(2L\\). </p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/05_us-open/","title":"5 - US Open","text":"ZadatakRe\u0161enje Vremensko ograni\u010denje Memorijsko ograni\u010denje 1s 256MB <p>U finalu \u017eenske divizije pro\u0161logodi\u0161njeg Otvorenog prvenstva Sjedinjenih Ameri\u010dkih Dr\u017eava u tenisu (poznatijem u narodu kao Ju Es Open) sastale su se Ema Radukanu i Lejla Fernandez. Neki posve\u0107eniji obo\u017eavatelji su primetili da je najdu\u017ei me\u010d koji je igrala Radukanu na putu do finala (97 minuta) bio kra\u0107i od najkra\u0107eg me\u010da koji je odigrala Fernandez na putu do finala (105 minuta).  Ceo teniski svet se slo\u017eio da je ova \u010dinjenica interesantna.</p> <p>Vi trenutno organizujete svoj turnir sa \\(N+1\\) kola, na kom se ve\u0107 odigralo prvo kolo. Ostalo je jo\u0161 \\(2^N\\) igra\u010da, koji su redom numerisani brojevima \\(1,2,3,\\cdots,2^N\\). Turnir je organizovan kao kompletno binarno stablo, a \\(i\\)-ti igra\u010d se nalazi u \\(i\\)-tom listu tog stabla pri standardnom (levo-koren-desno) obilasku, i u svakom me\u010du pobednik ide dalje, dok gubitnik otpada. Po ugledu na prethodno navedeno finale, vi ste odlu\u010dili da je me\u010d interesantan ako je du\u017eine barem kao najdu\u017ei me\u010d koji je do sada igrao igra\u010d sa leve strane \u017ereba (to jest onaj sa manjim indeksom), a du\u017eine najvi\u0161e najkra\u0107eg me\u010da koji je do sada igrao igra\u010d sa desne strane \u017ereba (to jest onaj sa ve\u0107im indeksom).</p> <p>Poznate su vam du\u017eine trajanja svih me\u010deva iz prvog kola, a ba\u0161 cilj je da turnir bude \u0161to interesantiji. Za svaki me\u010d potrebno je da izaberete pobednika i du\u017einu trajanja, tako da bude maksimalno mogu\u0107e interesantnih me\u010deva. Igra\u010di \u0107e se, naravno, slo\u017eiti sa va\u0161im predlogom o du\u017eini me\u010da i pobedniku. </p> Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Mladen Puzi\u0107 Tadija \u0160ebez <p>Prva stvar koju je potrebno da primetimo jeste   kako da dodelimo vreme trajanja nekom konkretnim me\u010du. Primetimo da nam se uvek isplati da to bude vreme trajanja prvog me\u010da pobednika. Takav me\u010d jo\u0161 uvek ima potencijal da bude interesantan, a ne ograni\u010davamo se za budu\u0107e me\u010deve vi\u0161e nego \u0161to moramo. Sada je potrebno samo odrediti pobednika svakog me\u010da dok zami\u0161ljamo da se njegovo vreme propagira na slede\u0107e kolo.</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/05_us-open/#opisi-funkcija","title":"Opisi funkcija","text":"<p>Potrebno je da implementirate funkciju</p> <ul> <li>\\(Interesantnost(N,  A[\\ldots])\\)</li> </ul> <p>gde je \\(N\\) broj kola koje treba jo\u0161 odigrati,  a \\(A[\\ldots]\\) niz du\u017eine \\(2^N\\) koji predstavlja du\u017eine trajanja me\u010deva prvog kola - prvi me\u010d igra\u010da \\(i\\) je trajao \\(A[i]\\) minuta.  Niz je indeksiran od 1.</p> <p>Funkcija treba da vrati najve\u0107i mogu\u0107i broj interesantnih me\u010deva.</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/05_us-open/#primer","title":"Primer","text":"<p>Neka je \\(N=2\\),  \\(A=\\{6,8,10,2\\}\\).  Prvi me\u010d se igra izme\u0111u igra\u010da \u010diji su me\u010devi u prvom kolu  trajali \\(6\\) i \\(8\\) minuta, tako da taj me\u010d mora trajati barem \\(6\\) a najvi\u0161e \\(8\\) minuta da bi bio interesantan - neka je na primer trajao \\(7\\) minuta, i neka je pobedio igra\u010d broj \\(2\\). Drugi me\u010d da bi bio interesantan, mora da traje barem \\(10\\) a najvi\u0161e \\(2\\) minuta, tako da o\u010dito nikada ne\u0107e biti interesantan, neka je na primer u njemu pobedio igra\u010d broj \\(4\\) i da je me\u010d trajao \\(9\\) minuta. Sada, u finalu \u0107e se sresti igra\u010d \\(2\\) sa leve strane \u017ereba, \u010diji je najdu\u017ei me\u010d trajao \\(8\\) minuta, i igra\u010d \\(4\\) sa desen strane \u017ereba, \u010diji je najkra\u0107u me\u010d trajao \\(9\\) minuta. Ako finale traje \\(8\\) minuta, onda \u0107e i ono biti interesantno tako da mo\u017ee biti najvi\u0161e \\(2\\) interesantna me\u010da, pa funkcija treba da vrati \\(2\\). </p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/05_us-open/#ogranicenja","title":"Ograni\u010denja","text":"<ul> <li>\\(1 \\leq N \\leq 20\\)</li> <li>\\(1 \\leq A[i] \\leq 10^9\\)</li> </ul>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/05_us-open/#podzadaci","title":"Podzadaci","text":"<p>Test primeri su podeljeni u \\(5\\) podzadatka:</p> <ul> <li>[10 poena]: \\(N\\le4\\).</li> <li>[17 poena]: \\(A[i]\\le2\\). </li> <li>[18 poena]: \\(N\\le 17\\) i \\(A[i]\\le100\\).  </li> <li>[26 poena]: \\(N\\le17\\).  </li> <li>[29 poena]: Nema dodatnih ograni\u010denja.</li> </ul>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/05_us-open/#detalji-implementacije","title":"Detalji implementacije","text":"<p>Potrebno je da po\u0161aljete ta\u010dno jedan fajl  <code>us_open.cpp</code>  koji implementira pomenutu funkciju. Osim tra\u017eene funkcije, va\u0161 fajl mo\u017ee sadr\u017eati i dodatne globalne promenljive, pomo\u0107ne funkcije i dodatne biblioteke.</p> <p>Va\u0161a funkcija mora biti slede\u0107eg oblika:</p> <p><code>int Interesantnost(int N, int* A);</code></p> <p>Va\u0161im programima je dozvoljeno da menjaju sadr\u017eaj nizova ali ne smeju da pristupaju van granica datih nizova.</p> <p>Uz zadatak, obezbe\u0111en vam je \"template\" fajl  <code>code.cpp</code>  koje mo\u017eete koristiti i menjati po potrebi. Tako\u0111e vam je obezbe\u0111en program  <code>grader.cpp</code>  koji slu\u017ei da lak\u0161e testirate kodove. Ovaj program u\u010ditava sa standardnog ulaza slede\u0107e podatke:</p> <ul> <li>U prvom redu broj \\(N\\).</li> <li>U narednom redu \\(2^N\\) brojeva: \\(A[i]\\).</li> </ul> <p>Zatim ovaj program zove va\u0161u funkciju i ispisuje rezultat koji va\u0161a funkcija vrati.</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/05_us-open/#resenje-kada-n-leq-4","title":"Re\u0161enje kada \\(N \\leq 4\\)","text":"<p>Po\u0161to ima \\(16\\) preostalih igra\u010da, postoja\u0107e jo\u0161 ukupno \\(15\\) me\u010deva. Za svaki me\u010d mo\u017eemo da odaberemo da li pobe\u0111uje levi ili desni igra\u010d, jer postoji samo \\(2^{15} = 32768\\) kombinacija.</p> <p>Vremenska slo\u017eenost je \\(O(2^ {2^N})\\), a memorijska \\(O(2^N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/05_us-open/#resenje-kada-ai-leq-2","title":"Re\u0161enje kada \\(A[i] \\leq 2\\)","text":"<p>Jasno je po gornjoj obzervaciji da \u0107e svaki me\u010d trajati ili \\(1\\) ili \\(2\\) minuta (mora da igra \u0110okovi\u0107). Numeri\u0161emo sve me\u010deve od \\(1\\) do \\(2^{N+1}-1\\). Sada, mo\u017eemo raditi dinami\u010dko programiranje oblika: </p> \\[ dp[i][1/2] = \\text{optimalno re\u0161enje ako me\u010d }i\\text{ traje 1, odnosno 2 minuta} \\] <p>Bazni slu\u010dajevi su o\u010digledno me\u010devi prvog kola, za koje znamo koliko su trajali (i onda na jedan slu\u010daj tih me\u010deva stavljamo \\(0\\), a na drugi \\(-\\infty\\)). </p> <p>Posmatrajmo neki fiksni me\u010d \\(i\\) koji nije me\u010d prvog kola. Neka je \\(l\\) me\u010d iz kojeg je do\u0161ao pobednik leve strane \u017ereba, a \\(d\\) me\u010d iz kojeg je do\u0161ao pobednik leve strane \u017ereba.</p> <p>Va\u017ee slede\u0107e rekurentne veze: </p> \\[ dp[i][1] = \\max(dp[l][1]+dp[r][1]+1, dp[l][1]+dp[r][2]+1, dp[l][2]+dp[r][1]) \\] \\[ dp[i][2] = \\max(dp[l][2]+dp[r][2]+1, dp[l][1]+dp[r][2]+1, dp[l][2]+dp[r][1]) \\] <p>Dakle, svaka kombinacija, sem kada je me\u010d \\(l\\) trajao \\(2\\) minuta, a me\u010d \\(r\\) trajao \\(1\\) minut, daje jedan novi interesantan me\u010d. Krajnji rezultat, ako je finale numerisano brojem \\(f\\), je \\(\\max(dp[f][1], dp[f][2])\\).</p> <p>Vremenska i memorijska slo\u017eenost je \\(O(2^N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/05_us-open/#resenje-kada-n-leq-17-i-ai-leq-100","title":"Re\u0161enje kada \\(N \\leq 17\\) i \\(A[i] \\leq 100\\)","text":"<p>Sli\u010dno prethodnom podzadatku, radi\u0107emo dinami\u010dko programiranje nad numerisanim me\u010devima:</p> \\[ dp[i][j] = \\text{optimalno re\u0161enje ako me\u010d }i\\text{ traje } j \\text{ minuta} \\] <p>Ponovo imamo tri slu\u010daja: - Prvi slu\u010daj je ako ne \u017eelimo da trenutni me\u010d bude interesantan. Onda jedan me\u010d (levi ili desni) mora trajati \\(j\\) minuta, za drugi mo\u017eemo uzeti bilo koju vrednost, pa \u0107emo uzeti onu koja daje najvi\u0161e interesantnih me\u010deva.  - Drugi slu\u010daj je da \u017eelimo da me\u010d \\(i\\) bude interesantan, a da levi me\u010d traje \\(j\\) minuta. Zato, desni me\u010d mora trajati makar toliko, da bismo dobili novi interesantan me\u010d. Uze\u0107emo naravno optimalnu du\u017einu desnog me\u010da. - Tre\u0107i slu\u010daj je tako\u0111e da \u017eelimo da me\u010d \\(i\\) bude interesantan, a da desni me\u010d traje \\(j\\) minuta. Levi me\u010d onda mora trajati najvi\u0161e toliko. Ponovo uzimamo optimalnu du\u017einu levog me\u010da.</p> <p>Sve ovo mo\u017eemo efikasno implementirati \u010duvaju\u0107i prefiksne, odnosno sufiksne maksimume nad dinami\u010dkim programiranjem za svaki me\u010d.</p> <p>Vremenska i memorijska slo\u017eenost je \\(O(2^N\\cdot maxA)\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/05_us-open/#resenje-kada-n-leq-17","title":"Re\u0161enje kada \\(N \\leq 17\\)","text":"<p>Zadatak ponovo radimo dinami\u010dkim programiranjem, mada ovaj put numeri\u0161emo i me\u010deve i igra\u010de:</p> \\[ dp[i][j] = \\text{optimalno re\u0161enje ako je pobednik me\u010da }i\\text{ igra\u010d } j \\] <p>Ovde na prvi pogled ima \\(O(2^N\\cdot 2^N)\\) stanja, ali to nije ta\u010dno - broj igra\u010da koji mogu biti pobednici nekog me\u010da (koji su u tom delu \u017ereba) dosta varira. U zbiru, zato, postoji samo \\(O(2^N \\cdot N)\\) stanja, jer svaki igra\u010d mo\u017ee biti pobednik u samo \\(N\\) razli\u010ditih me\u010deva. Dinami\u010dko programiranje mo\u017eemo raditi kolo po kolo, krenuv\u0161i od drugog kola (prvo je ve\u0107 odigrano).</p> <p>Sada, sli\u010dno prethodnom podzadatku, ako nam je pobednik sa leve strane \u017ereba i \u017eelimo interesantan me\u010d, desno moramo odabrati igra\u010da kojem je prvi me\u010d trajao makar koliko prvi me\u010d pobednika. Analogno radimo i ako \u017eelimo da pobednik bude iz desne strane \u017ereba.</p> <p>Kako bismo to efikasno uradili, moramo u obe polovine imati igra\u010de sortirane po du\u017eini prvog me\u010da. Nakon doga, poput prethodnog zadatka mo\u017eemo koriste\u0107i prefiksne/sufiksne maksimume nad nizom dinami\u010dkog programiranja, kao i tehniku dva pokaziva\u010da ili binarnu pretragu, mo\u017eemo na\u0107i odgovaraju\u0107e vrednosti. Sve ovo mo\u017eemo jednostavno implementirati rekurzijom.</p> <p>Vremenska slo\u017eenost je \\(O(2^N \\cdot N^2)\\), a memorijska \\(O(2^N)\\) (ako pamtimo uvek samo rezultate prethodnog kola).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/05_us-open/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Sli\u010dno prethodnom podzadatku, samo \u0161to umesto da koristimo sortiranje na svakom nivou rekurzije, mi odr\u017eavamo sortirani niz i spajamo ih tehnikom dva pokaziva\u010da, poput algoritma merge sort. Time smanjujemo vremensku slo\u017eenost za \\(N\\) faktor.</p> <p>Vremenska slo\u017eenost je \\(O(2^N\\cdot N)\\), a memorijska \\(O(2^N)\\).</p> us-open.cpp<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN (1&lt;&lt;20)+7\nusing namespace std;\nint a[MAXN],b[MAXN],dp[MAXN],aux[MAXN];\nvoid rek(int l,int r)\n{\nif(l==r) {dp[l]=0; return;}\nint s=(l+r)/2;\nrek(l,s); rek(s+1,r);\nint t1=l,t2=r;\nint mx=0,pmax=-500;\nfor(int i=s+1;i&lt;=r;i++) mx=max(mx,dp[i]);\nfor(int i=s;i&gt;=l;i--)\n{\nwhile(t2!=s &amp;&amp; a[t2]&gt;=a[i]) pmax=max(pmax,dp[t2--]);\naux[i]=dp[i]+max(pmax+1,mx);\n}\nmx=0; pmax=-500;\nfor(int i=l;i&lt;=s;i++) mx=max(mx,dp[i]);\nfor(int i=s+1;i&lt;=r;i++)\n{\nwhile(t1!=s+1 &amp;&amp; a[i]&gt;=a[t1]) pmax=max(pmax,dp[t1++]);\naux[i]=dp[i]+max(pmax+1,mx);\n}\nt1=l; t2=s+1;\nwhile(t1&lt;=s || t2&lt;=r)\n{\nif(t1==s+1) {b[t1+t2-s-1]=a[t2]; dp[t1+t2-s-1]=aux[t2]; t2++; continue;}\nif(t2==r+1) {b[t1+t2-s-1]=a[t1]; dp[t1+t2-s-1]=aux[t1]; t1++; continue;}\nif(a[t1]&lt;a[t2]) {b[t1+t2-s-1]=a[t1]; dp[t1+t2-s-1]=aux[t1]; t1++; continue;}\nb[t1+t2-s-1]=a[t2]; dp[t1+t2-s-1]=aux[t2]; t2++;\n}\nfor(int i=l;i&lt;=r;i++) a[i]=b[i];\n}\nint Interesantnost(int N,int *A)\n{\nint n=1&lt;&lt;N;\nfor(int i=1;i&lt;=n;i++) a[i]=A[i];\nrek(1,n);\nint res=0;\nfor(int i=0;i&lt;n;i++) res=max(res,dp[i]);\nreturn res;\n}\n</code></pre>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/06_metropole/","title":"6 - Metropole","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Pavle Martinovi\u0107 Aleksa Plav\u0161i\u0107"},{"location":"takprog/2021%20%7C%202022/06%20SIO/06_metropole/#resenje-kada-n-leq-20","title":"Re\u0161enje kada \\(N \\leq 20\\)","text":"<p>Ovo je klasi\u010dan zadatak iz dinami\u010dkog programiranja sa bitmaskama - tra\u017eenje najdu\u017eeg puta u grafu. Imamo dinami\u010dko programiranje \\(dp[i][mask]\\), gde je  \\(i\\) predstavlja \u010dvora do kog smo stigli, a \\(mask\\) je bitmaska koja predstavlja koje smo \u010dvorove posetili do sad. Slo\u017eenost \\(O(N^2\\cdot2^N)\\) </p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/06_metropole/#resenje-kada-nema-tura","title":"Re\u0161enje kada nema tura","text":"<p>U ovom slu\u010daju, dati graf je stablo, a re\u0161enje u tom slu\u010daju je poznato: mo\u017eemo ili raditi dinami\u010dkim programiranjem, ili naprosto krenemo od proizvoljnog \u010dvora i na\u0111emo od njega najdalji, a zatim od tog najdaljeg na\u0111emo najdalji, \u0161to \u0107e nam dati najdu\u017ei put.</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/06_metropole/#kako-dalje","title":"Kako dalje?","text":"<p>Sada treba da na\u0111emo neku ozbiljnu strategiju kako da tra\u017eimo najdu\u017ei put. U tu svrhu \u0107emo prona\u0107i blokove na\u0161eg grafa. To su maksimalni podskupovi \u010dvorova tako da u tim skupovima nema artikulacionih ta\u010daka. Za ovo postoji generalni algoritam, ali u na\u0161em slu\u010daju to mo\u017ee da se uradi lak\u0161e. Naime, pustimo pretragu po dubili (DFS) u na\u0161em grafu, i za svaku granu van stabla uzmemo put na stablu koji spaja njene krajeve (koji je du\u017eine \\(3\\) zbog uslova sa du\u017einama ciklusa) i utrvdimo da su te \\(4\\) grane u istom bloku (svaka grana je najvi\u0161e u jednom bloku). Kada tako na\u0111emo sve mogu\u0107e \u010detvorke, tranzitivno zatvorimo relaciju \"u istom bloku\" (u prevodu, napravimo graf nad granama i u njemu na\u0111emo povezane komponente - \u010dvorovi koje one obuhvataju nam predstavljaju blokove grafa). Sporije implementacije ovog dela su obuhva\u0107ena podzadatkom \\(N\\le2500\\).</p> <p>Sada, u proizvoljnom grafu mo\u017eemo uvesti pojam block-cut stabla tako \u0161to izbacimo sve grane koje su deo nekog bloka i onda za svaki blok napravimo novi \u010dvor koji je povezan sa svim \u010dvorovima u tom bloku. Ovo je interesantno, jer ako je po\u010detni graf povezan, onda nam je block-cut stablo zaista stablo (ako nije povezan onda je u pitanju \u0161uma). Svaki put u ovom grafu mo\u017ee da se preslika u put na block-cut stablu, samo svaki fragment puta koji predstavlja kretanje unutar jednog bloka zamenimo sa putem od po\u010detnog do \u010dvora koji predstavlja taj blok, i onda od tog do zavr\u0161nog.</p> <p>Sada nam je cilj da  modifikujemo block-cut stablo. Za svaki blok \u017eelimo da prona\u0111emo stablo tako da su nam \u010dvorovi bloka listovi, i da je najdu\u017ei put od \\(u\\) do \\(v\\) unutar bloka jednak du\u017eini puta od \\(u\\) do \\(v\\) u na\u0161em stablu. Ako svaki blok \u010dvor u block-cut stablu zamenimo sa ovom mre\u017eom koja enkodira optimizaciju tra\u017eenja najdu\u017eeg puta na onom fragmentu puta koji se nalazi unutar stabla, onda nam se zadatak samo svodi na prethodni podzadatak - tra\u017eenje najdu\u017eeg puta na stablu (ovde konkretno na tom na\u0161em modifikovanom block-cut stablu), jer svaki put u stablu mo\u017eemo na isti na\u010din da preslikamo na put na modifikovanom block-cut stablu, a po konstrukciji \u0107e se najdu\u017ei put preslikati u put iste du\u017eine.</p> <p>Sada nam treba detaljan opis blokova na\u0161eg grafa. Za to nam treba slede\u0107a lema: Lema: Svaki blok u na\u0161em grafu je kompletan bipatritivan graf gde je jedna particija veli\u010dine \\(2\\). Dokaz: Po\u0161to svaki ciklus parne du\u017eine, graf je bipartitivan - neka je u na\u0161em bloku \\(b\\) belih i \\(c\\) crnih. Mogu\u0107e je dokazati da unutar bloka, za svake dve grane postoji ciklus koji ih sadr\u017ei. Pretpostavimo da postoje crni \u010dvor \\(u\\) i beli \u010dvor \\(v\\) koji nisu spojeni granom, i neka iz njih izlaze grane \\(ua\\) i \\(vb\\). Po prethodno navedenom, postoji ciklus koji sadr\u017ei, a to jedino mo\u017ee biti ciklus \\(u-a-b-v\\), tako da su \\(u\\) i \\(v\\) ipak povezani granom, pa je graf kompletan i bipartitivan. Najzad, onda trivijalno postoji ciklus du\u017eine \\(2\\min(b,c)=4\\), pa je zaista u jednoj particiji samo \\(2\\) \u010dvora.  </p> <p>Sada smo ve\u0107 blizu kraja. Za konstrukciju na\u0161ih stabala razlikujemo dva slu\u010daja (i to ba\u0161 oni iz podzataka!!)</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/06_metropole/#svaka-grana-se-nalazi-u-najvise-jednom-ciklusu","title":"Svaka grana se nalazi u najvi\u0161e jednom ciklusu","text":"<p>U ovom slu\u010daju su  nam blokovi samo \\(K_{2,2}\\) to jest ciklusi du\u017eine \\(4\\). Posmatrajmo ciklus \\(a-b-c-d\\), tu suprotni na ciklusu treba da budu na distanci \\(2\\), a susedni na ciklusu treba da budu na distanci \\(3\\). Dodajmo \u010dvorove \\(e\\) i \\(f\\) i pove\u017eemo parove \\(a-e\\), \\(c-e\\), \\(b-f\\), \\(d-f\\) i \\(e-f\\). Lako se proverava da je ova konstrukcija ba\u0161 ono \u0161to smo tra\u017eili.</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/06_metropole/#svaka-grana-koja-se-nalazi-u-jednom-ciklusu-se-nalazi-u-barem-dva-ciklusa","title":"Svaka grana koja se nalazi u jednom ciklusu se nalazi u barem dva ciklusa","text":"<p>U ovom slu\u010daju su  nam blokovi samo \\(K_{2,t}\\) sa \\(t\\ge3\\), neka su nam ova \\(2\\) \u010dvora bela, a ostalih \\(t\\) crni. Mo\u017eemo da vidimo da najdu\u017ea putanja izme\u0111u \\(2\\) crna \u010dvora du\u017eine \\(4\\), izme\u0111u crnog i belog du\u017eine \\(3\\) i izme\u0111u dva dela du\u017eine \\(2\\). Zato je dovoljno da uzmemo jedan novi \u010dvor koji spojimo sa svim belima direktno granom, a sa svim crnima putem du\u017eine \\(2\\).</p>"},{"location":"takprog/2021%20%7C%202022/06%20SIO/06_metropole/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Naprosto spojimo konstrukcije iz predhotna dva slu\u010daja, i onda na dobijenom stablu na\u0111emo najdu\u017ei put. Slo\u017eenost \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/01_poslovan-covek/","title":"1 - Poslovan \u010dovek","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Aleksa Plav\u0161i\u0107 Mladen Puzi\u0107 Pavle Martinovi\u0107"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/01_poslovan-covek/#resenje-kada-n-leq-20","title":"Re\u0161enje kada \\(N \\leq 20\\)","text":"<p>Po\u0161to za svaki dan postoji dve mogu\u0107nosti, oti\u0107i na prvi ili drugi posao, ukupno postoji \\(2^N\\) mogu\u0107nosti. Mo\u017eemo probati svaku mogu\u0107nost, simulirati zaradu novca i odabrati optimalni odabir poslova.</p> <p>Vremenska slo\u017eenost je \\(O(N\\cdot 2^N)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/01_poslovan-covek/#resenje-kada-c-0","title":"Re\u0161enje kada \\(C = 0\\)","text":"<p>Po\u0161to je od po\u010detka ispunio kvotu za dupliranu platu na drugom poslu, potrebno je \\(i\\)-tog dana oti\u0107i na prvi posao ukoliko je \\(A \\leq 2\\cdot B_i\\),  u suprotnom oti\u0107i na drugi posao. </p> <p>Vremenska i memorijska slo\u017eenost je \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/01_poslovan-covek/#resenje-kada-b_i-b_j","title":"Re\u0161enje kada \\(B_i = B_j\\)","text":"<p>Po\u0161to je plata na drugom poslu ista svakog dana, nazovimo je \\(B\\). Fiksirajmo \\(k\\) kao prvi dan kada je ispunjena kvota (prvi dan kad bi plata na drugom poslu bila \\(2\\cdot B\\)), isprobajmo sve brojeve od \\(1\\) do \\(N\\), tim redom. </p> <p>Kako bi dan \\(k\\) bio prvi kad je plata duplirana, potrebno je da Huan u prvih \\(k-1\\) dana ta\u010dno \\(\\lceil \\frac{C}{B} \\rceil\\) dana ode na drugi posao (ukoliko \\(\\lceil \\frac{C}{B} \\rceil &gt; k-1\\), ta vrednost za \\(k\\) nije mogu\u0107a). Samim tim rezultat za fiksno \\(k\\) je \\(\\lceil \\frac{C}{B} \\rceil \\cdot B + (k-1-\\lceil \\frac{C}{B} \\rceil) \\cdot A + (N-k+1) \\cdot \\max(A, 2\\cdot B)\\), \u0161to se mo\u017ee lako izra\u010dunati.</p> <p>Vremenska i memorijska slo\u017eenost je \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/01_poslovan-covek/#resenje-kada-b_i-leq-b_i1","title":"Re\u0161enje kada \\(B_i \\leq B_{i+1}\\)","text":"<p>Sli\u010dno prethodnom re\u0161enju, fiksirajmo \\(k\\). U prvih \\(k-1\\) dana, na drugi posao \u0107e sigurno oti\u0107i kada va\u017ei \\(B_i \\geq A\\). Ukoliko sa tim danima nije ispunio kvotu, potrebno je da na drugi posao ode jo\u0161 nekoliko dana dok ne ispuni kvotu, uvek idu\u0107i danima kada je najve\u0107e \\(B_i\\). Po\u0161to mu se ve\u0107 ne isplati, \u017eeli da \u0161to manje dana potro\u0161i na to. </p> <p>Po\u0161to je niz \\(B\\) neopadaju\u0107i, mo\u017eemo primetiti da \u0107e za neko \\(0 \\leq t_1 \\leq k-1\\) prvih \\(t_1\\) dana oti\u0107i na prvi posao, a danima \\([t_1+1, k-1]\\) oti\u0107i na drugi posao. </p> <p>Sem toga, postoji neko \\(k \\leq t_2 \\leq N\\), takvo da se danima \\([t_2, N]\\) vi\u0161e isplati oti\u0107i na drugi posao (ako \\(k\\)-tog dana ispunimo kvotu). Dakle, rezultat za fiksno \\(k\\) je:</p> \\[ t_1 \\cdot A +\\sum_{i = t_1+1}^{k-1} B_i  + (t_2-k)\\cdot A + 2\\cdot \\sum_{i = t_2}^{N} B_i  \\] <p>Brojeve \\(t_1\\) i \\(t_2\\) mo\u017eemo na\u0107i binarnom pretragom, dok rezultat mo\u017eemo efikasno izra\u010dunati prefiksnom sumom nad nizom \\(B\\). Ponovo moramo paziti da je mogu\u0107e da nam fiksirana vrednost mo\u017ee biti \\(k\\).</p> <p>Vremenska slo\u017eenost je \\(O(NlogN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/01_poslovan-covek/#resenje-kada-n-a-c-b_i-leq-2000","title":"Re\u0161enje kada \\(N, A, C, B_i \\leq 2000\\)","text":"<p>Ovo re\u0161enje je veoma sli\u010dno prethodnom - po\u0161to je \\(N\\) malo, za svako \\(k\\) mo\u017eemo iznova sortirati niz \\(B\\) na intervalima \\([1, k-1]\\) i \\([k, N]\\) i primeniti prethodno re\u0161enje. </p> <p>Vremenska slo\u017eenost je \\(O(N^2logN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/01_poslovan-covek/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Ponovo fiksiramo \\(k\\) i idemo sleva nadesno, odvojeno re\u0161avamo intervale \\([1, k-1]\\) i \\([k, N]\\). Za desni interval, jednostavno \u0107emo izra\u010dunati sufiksne sume \\(suf_i = suf_{i+1} + \\max(A, 2\\cdot B_j)\\) koje \u0107emo kasnije koristiti u krajnjem re\u0161enju.</p> <p>\u0160to se ti\u010de levog intervala, spomenuli smo da postoje oni dani kada se Huanu uvek isplati da ode na drugi posao (\\(B_i \\geq A\\)) i oni kad ide na drugi posao samo kako bi ispunio kvotu. Za prvi tip, dovoljno je odr\u017eavati njihovu sumu \\(Bsum\\) kako menjamo \\(k\\). Za drugi tip je komplikovanije, jer mo\u017ee da se desi da za jedno \\(k\\) ode na drugi posao, a za slede\u0107e \\(k\\) istog dana ode na prvi posao. </p> <p>Zato \u0107emo odr\u017eavati min hip (priority_queue) sa najve\u0107im vrednostima \\(B\\) koji nisu prvog tipa (dakle, za koje va\u017ei \\(B_i &lt; A\\)). \u010cuva\u0107emo u njemu sve vrednosti koje su nam potrebne da, zajedno sa danima prvog tipa, ispuni kvotu. Nazovimo sumu elemenata u hipu \\(Hsum\\). Odr\u017eavamo hip tako da u njemu imamo \u0161to manje elemenata, a va\u017ei \\(Bsum + Hsum \\geq C\\). Kada se \\(k\\) premesti sa \\(i-1\\) na \\(i\\), ukoliko je \\(B_i \\leq A\\) onda uve\u0107avamo \\(Bsum\\) i potencijalno bri\u0161emo neke najmanje elemente iz hipa, ukoliko nam vi\u0161e nisu potrebni, smanjuju\u0107i \\(Hsum\\). Ukoliko va\u017ei \\(B_i &lt; A\\), onda \u0107emo prvo dodati \\(B_i\\) u hip i pove\u0107ati \\(Hsum\\), a onda potencijalno obrisati najmanje elemente koji su vi\u0161ak (to mo\u017ee biti i element koji smo upravo dodali) i smanjujemo \\(Hsum\\). </p> <p>Rezultat za fiksno \\(k\\) je onda \\(Hsum + Bsum + suf_i\\).</p> <p>Vremenska slo\u017eenost je \\(O(NlogN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/02_arhitekta/","title":"2 - Arhitekta","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Aleksa Milisavljevi\u0107 Aleksa Milisavljevi\u0107 Mladen Puzi\u0107 Aleksa Plav\u0161i\u0107"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/02_arhitekta/#resenje-kada-mn1","title":"Re\u0161enje kada \\(M=N\u22121\\)","text":"<p>U ovom podzadatku moramo odabrati sve putevi da bismo konstruisali odgovaraju\u0107i plan. Na\u0111imo bitovsku disjunkciju cena svih grana. </p> <p>Vremenska i memorijska slo\u017eenost je \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/02_arhitekta/#resenje-kada-skup-puteva-pravi-ciklus","title":"Re\u0161enje kada skup puteva pravi ciklus","text":"<p>U ovom podzadatku, moramo odabrati sve puteve sem jednog, gde mo\u017eemo bilo koji izostaviti. Mo\u017eemo prebaciti ovaj graf u niz du\u017eine \\(N\\), gde \u010duvamo cene puteva redom. Da bismo efikasno na\u0161li bitovsku disjunkciju svih puteva sem jednog, \u010duva\u0107emo prefiksnu i sufiksnu bitovsku disjunkciju tog niza. Re\u0161enje je onda bitovska disjunkcija odgovaraju\u0107eg prefiksa i sufiksa. Od svih mogu\u0107ih opcija, biramo onu koja daje najjeftiniji plan. </p> <p>Vremenska i memorijska slo\u017eenost je \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/02_arhitekta/#resenje-kada-0leq-w_i-leq-1","title":"Re\u0161enje kada \\(0\\leq w_i \\leq 1\\)","text":"<p>Bitovska disjunkcija brojeva iz skupa \\(\\{0,1\\}\\) mo\u017ee biti 0 samo ako su svi brojevi \\(0\\). U suprotnom ona je \\(1\\). Zato, proverimo da li kada uzmemo sve puteve cene \\(0\\) dobijemo dr\u017eavu u kojoj je svaki grad povezan sa svakim drugim. Ukoliko da, re\u0161enje je \\(0\\), u suprotnom, re\u0161enje je \\(1\\). Ovo mo\u017eemo proveriti na primer DFS algoritmom. </p> <p>Vremenska i memorijska slo\u017eenost je \\(O(N+M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/02_arhitekta/#resenje-kada-1-leq-m-w_i-leq-103","title":"Re\u0161enje kada \\(1 \\leq M, w_i \\leq 10^3\\)","text":"<p>Po\u0161to su cene puteva do \\(1000\\), onda je najve\u0107i mogu\u0107i rezultat \\(1023\\). Proveri\u0107emo sve mogu\u0107e ukupne cene jednu po jednu od najmanje ka najve\u0107oj. Recimo da proveravamo rezultat \\(x\\). Pro\u0111imo redom kroz sve grane i dodajmo samo one koje mo\u017eemo, tako da \\(x\\) ostane mogu\u0107 rezultat. U ovom slu\u010daju, to zna\u010di da ni na jednoj poziciji u binarnom zapisu nema cifru \\(1\\), a da je u broju \\(x\\)-ta cifra \\(0\\). Kada dodamo sve te grane, kao u prethodnom podzadatku proverimo da li je mogu\u0107e sti\u0107i od svakog grada do svakog drugog koriste\u0107i te grane. Ako da, i to je najmanje takvo \\(x\\), to je re\u0161enje. </p> <p>Vremenska slo\u017eenost je \\(O(M\\cdot \\max(w_i))\\), a memorijska \\(O(N+M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/02_arhitekta/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Umesto da fiksiramo mogu\u0107i rezultat kao u prethodnom zadatku, gradi\u0107emo rezultat bit po bit, krenuv\u0161i od najvrednijeg bita. Po\u0161to va\u017ei da je \\(2^0+2^1+\\ldots+2^i\\leq 2^{i+1}\\), u interesu nam je da najvredniji bit bude \u0161to manji. Poku\u0161ajmo prvo da izbegnemo najvredniji bit. Dodajmo sve grane u \u010dijim te\u017einama je ta cifra \\(0\\). Ukoliko mo\u017eemo da napravimo plan samo sa tim granama, stavljamo \\(0\\) na tu cifru rezultata, a izbacujemo iz skupa grana sve grane \u010dijoj ceni je ta cifra \\(1\\), jer su nepotrebne. Ukoliko ne mo\u017eemo, onda stavljamo \\(1\\) na tu cifru, ali odr\u017eavamo isti skup grana (neophodne su nam obe vrste). U oba slu\u010daja, prelazimo na slede\u0107i bit na isti na\u010din. Na kraju, ima\u0107emo konstruisani rezultat. </p> <p>Vremenska slo\u017eenost je \\(O(M\\log(w_i))\\), a memorijska \\(O(N+M)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/03_zagrade/","title":"3 - Zagrade","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Mladen Puzi\u0107 Aleksa Milisavljevi\u0107"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/03_zagrade/#resenje-kada-n-q-leq-50","title":"Re\u0161enje kada \\(N, Q \\leq 50\\)","text":"<p>Nakon svake promene, prebacujmo jednu po jednu zagradu sa po\u010detka na kraj, dok ne nai\u0111emo na prvi put kada imamo validan niz zagrada. Re\u0161enje je broj preba\u010denih zagrada. Proveravamo da li je niz zagrada validan tako \u0161to idemo sleva nadesno i odr\u017eavamo broj neuparenih otvorenih zagrada. Ukoliko nai\u0111emo na otvorenu zagradu, pove\u0107avamo taj broj. Ukoliko nai\u0111emo na zatvorenu zagradu, a broj neuparenih otvorenih zagrada je ve\u0107i od \\(0\\), onda uparujemo jednu otvorenu zagradu sa tom zatvorenom zagradom, pa smanjujemo taj broj. Ukoliko nemamo neuparenih otvorenih zagrada, a nai\u0111emo na zatvorenu zagradu, niz zagrada nije validan. On tako\u0111e nije validan ako zavr\u0161imo proces sa neuparenim otvorenim zagradama. </p> <p>Vremenska slo\u017eenost je \\(O(QN^2)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/03_zagrade/#resenje-kada-nq-leq-5000","title":"Re\u0161enje kada \\(N,Q \\leq 5000\\)","text":"<p>U ovom podzadatku \u0107emo primeniti svaku promenu i poku\u0161ati da na\u0111emo re\u0161enje u \\(O(N)\\). Posmatrajmo slede\u0107i niz:</p> \\[ p_0 = 0 \\] \\[ \\begin{equation} p_i = \\begin{cases}   p_{i\u22121}+1, &amp; i \\text{-ta zagrada je otvorena} \\\\   p_{i\u22121}\u22121, &amp; i \\text{-ta zagrada je zatvorena}     \\end{cases} \\end{equation} \\] <p>Primetimo da je uslov da niz zagrada bude validan da va\u017ei \\(p_i \\leq 0\\) za svako \\(1 \\leq i \\leq N\\) i \\(p_N = 0\\) (ovo je ekvivalentno tome da nijedan prefiks nema vi\u0161e zatvorenih nego otvorenih zagrada i da ukupno imamo jednako otvorenih i zatvorenih zagrada).</p> <p>Posmatrajmo sad \u0161ta se desi kada prvih \\(i\\) zagrada prebacimo na kraj. Mo\u017eemo primetiti da \u0107e se prvih \\(i\\) elemenata niza \\(p_i\\) prebaciti na kraj i onda \u0107e se ceo niz pove\u0107ati za \\(\u2212p_i\\). Po\u0161to \u017eelimo da svi elementi budu ve\u0107i ili jednaki \\(0\\), onda moramo da ga pove\u0107amo za \u0161to vi\u0161e, \u0161to zna\u010di da \u0107emo uzeti \u0161to manje \\(p_i\\). Dakle, re\u0161enje je \\(i\\) za koje je \\(p_i\\) najmanje. Ukoliko ima izjedna\u010denja, onda uzimamo najmanje takvo \\(i\\). Nakon svake promene samo ponovo izra\u010dunamo niz \\(p_i\\). </p> <p>Vremenska slo\u017eenost je \\(O(QN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/03_zagrade/#resenje-kada-sve-promene-menjaju-zatvorene-zagrade-u-otvorene","title":"Re\u0161enje kada sve promene menjaju zatvorene zagrade u otvorene","text":"<p>Primetimo da, kako bi niz zagrada bio validan, moramo imati jednak broj otvorenih i zatvorenih zagrada. Recimo da na po\u010detku imamo \\(l\\) otvorenih, a \\(r\\) zatvorenih zagrada. Ukoliko \\(r &lt; l\\) onda o\u010digledno nikad ne mo\u017eemo dobiti validan niz zagrada. U suprotnom, mo\u0107i \u0107emo da imamo validan niz zagrada samo nakon \u0161to \\(\\frac{r \u2212 l}{2}\\) zatvorenih zagrada pretvorimo u otvorene. Ukoliko \\(\\frac{r \u2212 l}{2} &gt; Q\\), onda opet nikad ne\u0107emo imati re\u0161enje. U suprotnom, dovoljno je da primenimo re\u0161enje iz prethodnog podzadatka nakon \\(\\frac{r \u2212 l}{2}\\) promena (svi ostali rezultati su \\(\u22121\\)). </p> <p>Vremenska slo\u017eenost je \\(O(N + Q)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/07%20EJOI%20izborno/03_zagrade/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Ovaj podzadatak se radi sli\u010dno kao drugi podzadatak, samo zbog efikasne promene niza \\(p_i\\) potrebno je da odr\u017eavamo segmentno stablo sa lenjom propagacijom nad njim. Promena koja je potrebna je dodavanje \\(+1\\) ili \\(\u22121\\) na neki sufiks, i nala\u017eenje minimuma celog niza. Da bismo uzeli najlevlji minimum celog niza, segmentno stablo gradimo nad nizom parova \\(\\{p_i, i\\}\\), pa \u0107emo upitom minimuma dobiti onaj par sa najmanjim \\(p_i\\), a najmanjim indeksom u slu\u010daju izjedna\u010denja. </p> <p>Vremenska slo\u017eenost je \\(O(QlogN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/01_racunar/","title":"1 - Ra\u010dunar","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Igor Pavlovi\u0107 Igor Pavlovi\u0107 Vladimir Milovanovi\u0107 Vladimir Milovanovi\u0107 <p>Najpre je neophodno uo\u010diti da svaki zadatak iz postavke ima svoj redni broj (indeks) u redosledu zadataka, po\u010detak i kraj izvr\u0161avanja, te trenutak upisa rezultata u memoriju koji je potrebno odrediti. Stoga je korisno iskoristiti neku od struktura koja grupi\u0161e ove \u010detiri karateristike svakog zadatka. Tako\u0111e, prema postavci, zadaci nisu sortirani ni prema po\u010detnom, a ni prema krajnjem trenutku svog izvr\u0161avanja.</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/01_racunar/#kvadratno-resenje","title":"Kvadratno re\u0161enje","text":"<p>Dovoljno je u dve ugne\u017e\u0111ene petlje redosledom pro\u0107i po svim zadacima i za svaki zadatak ispitati da li postoji neki drugi zadatak koji je po\u010deo pre njega, a koji se zavr\u0161ava nakon njega. Drugim re\u010dima, u petljama za svaka dva zadatka \\(i\\) i \\(j\\) proveravati da li je \\(A_j &lt; A_i\\) i \\(B_j &gt; B_i\\) i simultano a\u017eurirati tra\u017eeno vreme upisa u memoriju na maksimalno \\(B_j\\) od zadataka koji zadovoljavaju prethodni uslov. Najzad, po redosledu pro\u0107i i ispisati vremena. Kako se u svakoj od dve petlje prolazi kroz sve zadatke, ovo re\u0161enje ima kvadratnu vremensku slo\u017eenost, odnosno \\(\\mathcal{O}(N^2)\\), gde \\(N\\) predstavlja broj zadataka.</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/01_racunar/#glavno-resenje-u-loglinearnoj-slozenosti","title":"Glavno re\u0161enje u loglinearnoj slo\u017eenosti","text":"<p>Da bi se problem re\u0161io na efikasan na\u010din, mogu se zadaci umesto po indeksu sortirati po vremenu po\u010detka izvr\u0161avanja. Po\u0161to u tako sortiranim zadacima nakon \\(i\\)-tog zadatka nema zadataka koji su po\u010deli posle njega, to je dovoljno u samo jednom prolasku kroz zadatke, vode\u0107i ra\u010duna o dotada\u0161njem maksimumu, a\u017eurirati vreme upisa u memoriju kao trenutnu vrednost maksimuma. Najzad, potrebno je pre ispisa zadatke ponovo sortirati po redosledu u\u010ditavanja, odnosno po indeksima, kako bi se u jednom prolasku ispisala tra\u017eena vremena. Kako je operaciju sortiranja efikasnim algoritmima mogu\u0107e izvr\u0161iti u loglinearnoj vremenskoj slo\u017eenosti \\(\\mathcal{O}(N\\log N)\\), a kako je ovo vremenski najzahtevnija operacija u predlo\u017eenom re\u0161enju, to je i ukupna slo\u017eenost ovog re\u0161enja loglinearna po broju zadataka.</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/02_xxl-matrica/","title":"2 - XXL Matrica","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Marko Savi\u0107 Aleksa Milisavljevi\u0107 Dragan Uro\u0161evi\u0107 Vladimir Milovanovi\u0107 <p>Neka je \\(N\\) broj vrsta i neka je \\(M\\) broj kolona. Pretpostavimo da su vrste numerisane brojevima od \\(0\\) do \\(N-1\\), a kolone brojevima od \\(0\\) do \\(M-1\\). </p> <p>Primetimo da ne mora za svaki izbor ulaznih podataka postojati re\u0161enje. Naime ako je \\(0\\leqslant a_i &lt; M\\), onda to zna\u010di da se na polju sa koordinatama \\((i,a_i)\\) nalazi crno polje. Zbog toga broj belih polja kojima po\u010dinje kolona \\(a_i\\) nije ve\u0107i od \\(a_i\\), pa je \\(b_{a_i} \\leqslant i\\). Odnosno, ako je \\(0\\leqslant a_i &lt; M\\) i \\(b_{a_i} &gt; i\\) za neko \\(i\\), onda ne postoji matrica koja zadovoljava uslove opisane nizovima \\(a\\) i \\(b\\). Sli\u010dno, ako je \\(0\\leqslant b_j &lt; N\\), onda je polje sa koordinatama \\((b_j, j)\\) crno, pa vrsta \\(b_j\\) po\u010dinje sa ne vi\u0161e od \\(j\\) belih polja i zbog toga je \\(a_{b_j} \\leqslant j\\). Dakle ako za neko \\(j\\) (\\(0\\leqslant j &lt; M\\)) va\u017ei da je \\(0\\leqslant b_j &lt; N\\) i \\(a_{b_j}&gt;j\\), onda ne postoji matrica koja zadovoljva uslove opisane nizovima \\(a\\) i \\(b\\).</p> <p>Pretpostavimo da postoji matrica opisana nizovima \\(a\\) i \\(b\\). Tada za svako \\(i\\) za koje je \\(0\\leqslant a_i &lt; M\\) va\u017ei da je polje sa koordinatama \\((i,a_i)\\) crno. Sli\u010dno, ako za neko \\(j\\) va\u017ei da je \\(0\\leqslant b_j &lt; N\\), onda je polje sa koordinatama \\((b_j,j)\\) crno.  I to je minimalni skup crnih polja. Prema tome, broj crnih polja \u0107emo odrediti tako \u0161to izbrojimo koliko ima razli\u010ditih polja u uniji skupova $$ A={(i,a_i)|0\\leqslant i &lt; N, 0\\leqslant a_i &lt; M} \\quad \\text{i} \\quad B={(b_j,j)|0\\leqslant j &lt; M, 0\\leqslant b_j &lt; N}. $$</p> <p>Pretpostavimo da postoji matrica koja zadovoljava uslove opisane nizovima \\(a\\) i \\(b\\). Tada mogu biti crna sva polja \\((i,j)\\) (\\(0\\leqslant i &lt; N\\), \\(0\\leqslant j &lt; M\\)) koja zadovoljavaju i slede\u0107a dva uslova: $$ a_i \\leqslant j &lt; M \\quad \\text{i}\\quad b_j \\leqslant i &lt; N. $$</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/02_xxl-matrica/#resenje-kad-je-nm-leq-4","title":"Re\u0161enje kad je \\(N,M \\leq 4\\)","text":"<p>U ovom slu\u010daju se mogu ispitati sve matrice dimenzija \\(N\\times M\\) \u010dija su polja bela ili crna (tj, za svaku od njih se mo\u017ee proveriti da li zadovoljava uslove opisane nizovima \\(a\\) i \\(b\\)). Naime matrica ima \\(2^{N M} \\leqslant 2^{16} = 65536\\). Nakon toga se lako odredi broj crnih polja u matrici koja ima najmanji i/ili najve\u0107i broj crnih polja.</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/02_xxl-matrica/#resenje-kad-je-nm-leq-1000","title":"Re\u0161enje kad je \\(N,M \\leq 1.000\\)","text":"<p>U ovom slu\u010daju se za svako polje matrice odre\u0111uje da li je crno, za varijantu kada treba da odredimo najmanji broj crnih polja i/ili za varijantu kada treba da odredimo najve\u0107i broj crnih polja. Za odre\u0111ivanje boje koristimo gore navedene uslove. Slo\u017eenost ovog re\u0161enja je \\(\\Theta(NM)\\).</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/02_xxl-matrica/#resenje-kad-je-n-m-leq-100000","title":"Re\u0161enje kad je \\(N, M \\leq 100.000\\)","text":"<p>Opi\u0161imo kako odre\u0111ujemo maksimalni broj crnih polja (opet \u0107emo pretpostaviti da postoji matrica koja zadovoljava uslove problema). Maksimalan broj crnih polja odre\u0111ujemo tako \u0161to odre\u0111ujemo maksimalan broj crnih polja u vrstama polaze\u0107i od nulte vrste i obra\u0111uju\u0107i ih redom. Ako trenutno obra\u0111ujemo vrstu sa rednim brojem \\(i\\), onda mogu biti crna sva polja \\((i,j)\\) koja zadovoljavaju uslove \\(j\\geqslant a_i\\) i \\(b_j \\leqslant i\\). Jedan od na\u010dina da to uradimo je da defini\u0161emo pomo\u0107ni niz \\(c\\) du\u017eine \\(M\\) \u010diji elementi na po\u010detku imaju vrednost \\(0\\), a ako se trenutno obra\u0111uje vrsta broj \\(i\\), onda \u0107e vrednosti elemenata niza \\(c\\) biti $$ c_j = \\begin{cases} 1,\\quad &amp;\\text{ako je }b_j\\leqslant i\\ 0,\\quad &amp;\\text{ako je }b_j &gt; i. \\end{cases} $$ Tada \u0107e najve\u0107i broj crnih polja u vrsti broj \\(i\\) biti $$ c_{a_i} + c_{a_i+1} + c_{a_i+2} + \\dotsb + c_{M-1}. $$ Ove zbirove \u0107emo najefikasnije odrediti koriste\u0107i Fenvikovo stablo (Fenwick tree) ili segmentno stablo. Primetimo da se niz \\(c\\) (potencijalno) menja pri obradi svake vrste, pa u skladu sa tim treba a\u017eurirati i odgovaraju\u0107e stablo. Slo\u017eenost ovog re\u0161enja je \\(\\Theta(N\\log M)\\).</p> <p>Minimalni broj crnih polja mo\u017eemo odrediti tako \u0161to formiramo skup sastavljen od parova \\((i,a_i)\\) (\\(0\\leqslant i &lt; N\\), \\(a_i &lt; M\\)) i \\((b_j,j)\\) (\\(0\\leqslant j &lt; M\\), \\(b_j &lt; N\\)), a zatim izbrojimo koliko u tom skupu ima elemenata. </p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/03_nadvlacenje-konopca/","title":"3 - Nadvla\u010denje konopca","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Aleksa Milisavljevi\u0107 Pavle Martinovi\u0107 Pavle Martinovi\u0107"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/03_nadvlacenje-konopca/#resenje-kada-n-leq-20","title":"Re\u0161enje kada \\(N \\leq 20\\)","text":"<p>Za svaki me\u010d ima ukupno \\(2\\) na\u010dina da se izabere pobednik tako da ima ukupno \\(2^N\\)  ukupno na\u010dina da se izaberu pobednici. Naprosto pro\u0111emo kroz sve te kombinacije (npr iteriranjem brojeva od \\(0\\) do \\(2^N-1\\) i gledaju\u0107i njihov binarni zapis) i vidimo da li u svakoj od njih se desi da ima jednu pobedi. Slo\u017eenost \\(O(2^N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/03_nadvlacenje-konopca/#resenje-kada-svaki-takmicar-ucestvuje-u-2-meca","title":"Re\u0161enje kada svaki takmi\u010dar u\u010destvuje u 2 me\u010da","text":"<p>Posmatrajmo graf \u010diji su \u010dvorovi takmi\u010dari i postoji grana izme\u0111u dva takmi\u010dara ako igraju me\u010d me\u0111usobno. Sada nam je zadatak ekvivalentan sa time da se orijenti\u0161u grane tako da svaki \u010dvor ima izlazni stepen ta\u010dno \\(1\\) (ovakvi grafovi se ina\u010de zovu funkcionalni grafovi).</p> <p>U ovom podzadatku svaki \u010dvor je stepena ta\u010dno \\(2\\). Za takav graf znamo da je svaka povezana komponenta ciklus (doka\u017eite!). U ciklusu o\u010dito imamo samo \\(2\\) na\u010dina da orijenti\u0161emo grane (neformalno re\u010deno u smeru kazaljke na satu i suprotno). Tako da je u ovom slu\u010daju odgovor \\(2^{\\text{broj komponenti}}\\). Slo\u017eenost \\(O(N)\\).</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/03_nadvlacenje-konopca/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Zapravo je glavno re\u0161enje mala modifikacija prethonog. Naime, o\u010dito nam je potreban uslov da u svakoj komponenti ima isto \u010dvorova i grana (da bi mogao savko da pobedi barem jednom). Ispostavlja se da ako je ovaj uslov ispunjen, odgovor je opet \\(2^{\\text{broj komponenti}}\\) (a u suprotnom je \\(0\\)). Dokaz ovoga mo\u017eemo da vidimo na slede\u0107i na\u010din: ako postoji \u010dvor stepena \\(1\\) znamo da on mora da pobedi taj me\u010d tako da nam je to jedinstveno odre\u0111eno i mo\u017eemo da skinemo taj \u010dvor i granu i opet dobijemo graf sa isto \u010dvorova i grana, i to za \\(1\\) manje. Nastavljamo ovaj proces, i kad nema nijedan \u010dvor stepena \\(1\\), tada svi imaju stepen \\(2\\), \u0161to po prethodnom podzadatku znamo da imamo ta\u010dno \\(2\\) na\u010dina da orijenti\u0161emo.</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/04_sestougao/","title":"4 - \u0160estougao","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Nikola Milosavljevi\u0107 Aleksa Milisavljevi\u0107 Aleksa Milisavljevi\u0107 Pavle Martinovi\u0107 <p>Prva stvar koju treba da primetimo je da uslov da je figura \u0161estogao i da ima stranice paralelne ivicama matrice zapravo zna\u010di da je u pitanju figura koja se dobija tako \u0161to iz pravougaonika izbacimo manji pravougaonik koji je takav da im se ta\u010dno jedan \u0107o\u0161ak poklapa.</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/04_sestougao/#resenje-kada-n-leq-5","title":"Re\u0161enje kada \\(N \\leq 5\\)","text":"<p>U ovom podzadatku mo\u017eemo da fiksiramo svaki \u0161estougao, proverimo da li je on lep i prera\u010dunamo odgovor za svaku podmatricu. Razli\u010ditih \u0161estouglova ima \\(O(N^6)\\), dok razli\u010ditih podmatrica ima \\(O(N^4)\\). Zbog toga, ovo re\u0161enje radi u vremenskoj slo\u017eenosti \\(O(N^{10})\\).</p> <p>Vremenska slo\u017eenost je \\(O(N^{10})\\), a memorijska \\(O(N^4)\\).</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/04_sestougao/#resenje-kada-a-8-q-leq-10","title":"Re\u0161enje kada \\(A = 8, Q \\leq 10\\)","text":"<p>Primetimo da su \u0161estouglovi sa obimom \\(8\\) upravo kvadrati dimenzija \\(2  \\times  2\\) iz kojih je izba\u010den jedan \u0107o\u0161ak. Takvih \u0161estouglova ima \\(O(N^2)\\) u matrici. U svakom upitu mo\u017eemo da iteriramo kroz celu podmatricu i izra\u010dunamo zbir brojeva u svakom lepom \u0161estouglu.</p> <p>Vremenska slo\u017eenost je \\(O(Q \\cdot N^2)\\), a memorijska je \\(O(N^2)\\).</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/04_sestougao/#resenje-kada-n-leq-50-q-leq-10","title":"Re\u0161enje kada \\(N \\leq 50, Q \\leq 10\\)","text":"<p>Za re\u0161avanje ovog podzadatka moramo detaljnije da razmotrimo kada ta\u010dno izbacivanjem manjeg pravougaonika iz ve\u0107eg nastaje lep \u0161estougao.</p> <p>Pretpostavimo da smo imali pravougaonik dimenzija \\(w \\times h\\) i da smo iz jednog njegovog \u0107o\u0161ka izbacili pravougaonik dimenzija \\(p \\times q\\). Posmatrajmo dva slu\u010daja:</p> <ul> <li>Prvi slu\u010daj: \\(w \\neq h\\), tj. orginalni pravougaonik nije kvadrat. Bez umanjenja op\u0161tosti, pretpostavimo da \\(w &gt; h\\). \u0160estougao koji nastaje brisanjem pravougaonika ima stranice du\u017eina \\(w\\), \\(h\\), \\(w-p\\), \\(q\\), \\(p\\), \\(h-q\\). Kako \\(w \\neq h\\) i kako u \u0161estouglu, da bi bio lep, svaka du\u017eina mora da se javlja barem dva puta , to mora da va\u017ei \\(w = w-p\\) ili \\(w = q\\) ili \\(w = p\\) ili \\(w = h-q\\). Me\u0111utim, kako va\u017ei \\(p, w-p &lt; w\\) i \\(q, h-q &lt; h &lt; w\\) , to ovaj slu\u010daj nije mogu\u0107, tj. \u0161estougao mora biti kvadarat.</li> <li>Drugi slu\u010daj: \\(w = h\\). Uvedimo \\(a = w = h\\). \u0160estougao koji nastaje brisanjem pravougaonika ima stranice du\u017eina \\(a\\), \\(a\\), \\(a-p\\), \\(q\\), \\(p\\), \\(a-q\\). Kako svaka du\u017eina mora da se javlja barem dva puta, to razlikujemo slede\u0107a dva slu\u010daja: \\(p = q\\) i \\(p = a - q\\). Dodatno, primetimo da je obim ovog \u0161estougla upravo \\(a + a + a - p + q + p + a - q = 4a\\), tj. \\(a = \\frac{A}{4}\\).</li> </ul> <p>Dakle, da bi \u0161estougao bio lep, on mora da nastane tako \u0161to se iz kvadrata stranice \\(a = \\frac{A}{4}\\) izbaci pravougaonik dimenzija \\(p \\times q\\), za koje va\u017ei \\(p = q\\) ili \\(p + q = a\\). Primetimo da u po\u010detnoj matrici kvadrata stranice \\(a\\) ima \\((N-a+1)^2\\), a za svaki od njih postoji \\(4(a-1)\\) pravougaonika koje mo\u017eemo da izbacimo da bi dobili lep \u0161estougao. Dakle, ukupno postoji \\(O(N^3)\\) lepih \u0161estouglova u matrici.</p> <p>Koriste\u0107i ovu informaciju, lako mo\u017eemo da re\u0161imo podzadatak. U svakom upitu, pro\u0111emo kroz sve lepe \u0161estouglove. Ovo je najlak\u0161e uraditi tako \u0161to prvo fiksiramo gornji levi \u0107o\u0161ak kvadrata iz kojeg bri\u0161emo pravougaonik, zatim stranice pravougaonika i kona\u010dno jedan od \u010detiri \u0107o\u0161ka kvadrata koji se poklapa sa pravougaonikom.</p> <p>Vremenska slo\u017eenost je \\(O(Q N^3)\\), a memorijska je \\(O(N^2)\\).</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/04_sestougao/#resenje-kada-n-leq-50","title":"Re\u0161enje kada \\(N \\leq 50\\)","text":"<p>Ovaj zadatak zahteva da malo popravimo re\u0161enje iz prethodnog. Klju\u010dno je primetiti da za svaki gornji levi \u0107o\u0161ak kvadrata iz kojeg izbacujemo pravougaonik mo\u017eemo da izra\u010dunamo lep \u0161estougao koji nastaje sa najve\u0107im zbirom. Ovo zapamtimo za svako polje. Potom u svakom upitu pro\u0111emo kroz sva polja koja su kandidati za gornji levi \u0107o\u0161ak pravougaonika i na taj na\u010din prona\u0111emo lep \u0161estougao sa najve\u0107im zbirom koji se potpuno nalazi u podmatrici iz upita.</p> <p>Vremenska slo\u017eenost je \\(O(Q N^2)\\), a memorijska je \\(O(N^2)\\).</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/04_sestougao/#resenje-kada-a-8","title":"Re\u0161enje kada \\(A = 8\\)","text":"<p>Za re\u0161enja ovog podzadatka je neophodna tehnika sparse tabela.</p> <p>Prvo u pomo\u0107noj matrici \\(b[i][j]\\) zapamtimo lep \u0161estougao sa najve\u0107im zbirom koji je nastao tako \u0161to smo kvadratu kome je gornje levo polje upravo \\((i,j)\\) sklonili jedan \u0107o\u0161ak.</p> <p>U pomo\u0107noj matrici \\(sparse[i][j][k]\\), prera\u010dunamo maksimume svih lepih \u0161estouglova koji nastaju od kvadrata dimenzija \\(2 \\times 2\\) kojima je gornji levi \u0107o\u0161ak na nekom od polja iz skupa \\(\\{(i,j),(i,j+1),...,(i,j+2^k-1)\\}\\). Za ovu matricu je lako na\u0107u rekurzivnu formulu:</p> \\[ sparse[i][j][0] = b[i][j], \\] \\[ sparse[i][j][k] = max(sparse[i][j][k-1],sparse[i][j+2^(k-1)][k-1]) \\] <p>Na osnovu ove matrice, mo\u017eemo da odgovaramo na upite u vremenskoj slo\u017eenosti \\(O(N)\\). Neka je \\(k\\) najve\u0107i broj takav da je \\(2^k \\leq r-l\\). Da bi odgovorili na upit, pro\u0111emo kroz svaki red \\(i\\) u intervalu \\([u,d-1]\\) i za svaki od njih izra\u010dunamo vrednost \\(max(b[i][l][k],b[i][r-2^k][k])\\) (na ovaj na\u010din smo uzeli maksimum svih lepih \u0161estouglova kojima je gornji levi \u0107o\u0161ak u redu \\(i\\)). Maksimum od svih tih vrednosti je odgovr na upit.</p> <p>Vremenska slo\u017eenost je \\(O(N^2 \\log N + Q N)\\), a memorijska \\(O(N^2 \\log N)\\) (ako pamtimo uvek samo rezultate prethodnog kola).</p>"},{"location":"takprog/2021%20%7C%202022/08%20EGOI%20izborno/04_sestougao/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Za glavno re\u0161enje, neophodno je generalizovati ideju iz prethodnog podzadatka, kori\u0161\u0107enjem opservacije o tome kakav pravougaonik moramo da izbacimo da bi dobili lep \u0161estougao. U matrici \\(b[i][j]\\) zapamtimo maksimum svih lepih \u0161estouglova koji su nastali tako \u0161to smo izbacili neki pravougaonik iz kvadrata kojem je gornje levo polje \\((i,j)\\). Potom ra\u010dunamo i koristimo tabelu na sli\u010dan na\u010din kao u prethodnom podzadatku.</p> <p>Vremenska slo\u017eenost je \\(O(N^3 + Q N)\\), a memorijska \\(O(N^2 \\log N)\\).</p> <p>Zadatak je bilo mogu\u0107e re\u0161iti i u boljoj vremenskoj slo\u017eenosti \\(O(N^3 + N^2 \\log^2 N + Q)\\), kori\u0161\u0107enjem dvodimenzionalnih tabela, ali to nije bilo potrebno za maksimalne poene.</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/01_sudar/","title":"1 - Sudar brojeva","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Vladimir Milovanovi\u0107 Vladimir Milovanovi\u0107 Vladimir Milovanovi\u0107 Igor Pavlovi\u0107"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/01_sudar/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Zadatak je najlak\u0161e re\u0161iti posmatraju\u0107i date prirodne brojeve \\(X\\) i \\(Y\\) kao niske. Naime, u jednoj petlji treba porediti znakove (karaktere) niski \\(X\\) i \\(Y\\), koji zapravo predstavljaju cifre brojeva na odgovaraju\u0107im indeksima. Kre\u0107u\u0107i se unazad, po\u010dev\u0161i od cifara najmanje te\u017eine i idu\u0107i ka cifrma najve\u0107e te\u017eine, ideja je dodavati ve\u0107u od njih u neku novostvorenu nisku. Ukoliko se pak desi da su cifre odgovaraju\u0107e te\u017eine jednake, neophodno ih je obe dodati u pomenutu novoformiranu nisku, to jest tu jednu cifru dva puta. Nisku napravljenu u prethodnom postupku na kraju zadatka potrebno je ispisati. Slu\u010dajevi kada su zadati ulazni brojevi razli\u010ditih du\u017eina re\u0161ava se tako da kada se tokom prolaska kroz opisanu petlju broj cifara jednog od brojeva iscrpi, rezultuju\u0107u nisku samo treba dopuniti preostalim ciframa ve\u0107eg broja koje nisu bile iskori\u0161\u0107ene u pore\u0111enju.</p> <p>Pod pretpostavkom da se zadat broj \\(X\\) sastoji iz \\(M\\) cifara, dok zadati broj \\(Y\\) sadr\u017ei \\(N\\) cifara, slo\u017eenost opisanog algoritma je \\(\\mathcal{O}(M+N)\\), odnosno linearna po broju cifara.</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/02_namestanje_granice/","title":"2 - Name\u0161tanje glasanja","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Toni \u0160krijelj Dragan Uro\u0161evi\u0107 Vladimir Milovanovi\u0107"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/02_namestanje_granice/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Pretpostavimo da je niz \\(A\\) sortiran u neopadaju\u0107em poretku,  da je ukupan broj elemenata niza \\(N\\) i da su elementi niza indeksirani brojevima od \\(0\\) do \\(N-1\\). Tada je medijana niza element sa indeksom \\(N/2\\) ()pri \u010demu se ra\u010duna celobrojni deo koli\u010dnika. Neka je \\(B\\) broj poena koji Markos \u017eeli kao granicu. Tada razlikujemo tri slu\u010daja</p> <p>Ako je \\(A[N/2] = B\\), onda je medijana ve\u0107 jednaka broju \\(B\\) i Markos glasa \\(0\\) puta.</p> <p>Ako je \\(B\\) \\(&lt;\\) \\(A[N/2]\\) odre\u0111ujemo indeks \\(i\\) poslednjeg elementa koji nije ve\u0107i od \\(B\\) (ako takav ne postoji, onda je \\(i=-1\\)). Tada postoji  \\(i+1\\) elemenata koji su manji od ili jednaki \\(B\\) i \\(N-i-1\\) elemenata koji su ve\u0107i od \\(B\\), pri \u010demu je \\(i+1 \\leq N-i-1\\). Da bi obezbedili da \\(B\\) bude medijana potrebno je da grupa manjih ili jednakih ima bar jedan element vi\u0161e od grupe ve\u0107ih, pa je potrebno ubaciti \\(N-i-1-(i+1)+1 = N-2i-1\\) glasova.</p> <p>Ako je \\(B&gt;A[N/2]\\) odre\u0111ujemo indeks \\(i\\) prvog elementa koji nije manji od \\(B\\) ( ako takav ne postoji, onda je \\(i=N\\)). Tada postoji  \\(i\\) elemenata koji su manji od \\(B\\) i \\(N-i\\) elemenata koji su ve\u0107i od ili \\(B\\), pri \u010demu je \\(i \\geq N-i\\). Da bi obezbedili da \\(B\\) bude medijana potrebno je da grupa ve\u0107ih ili jednakih ima bar onoliko elementa koliko ima manjih, pa je potrebno ubaciti \\(i - (N - i) = 2i-N\\) glasova.</p> <p>Slo\u017eenost algoritma je odre\u0111ena slo\u017eeno\u0161\u0107u sortiranja (koja mo\u017ee biti \\(\\Theta(N\\log N)\\)) i slo\u017eeno\u0161\u0107u pronala\u017eenja poslednjeg elementa koji nije ve\u0107i od \\(B\\), odnosno prvog elementa koji nije manji od \\(B\\). Ako ovo realizujemo kao sekvencijalno pretra\u017eivanje, slo\u017eenost dela koji se odnosi na odre\u0111ivanje odgovora na pitanja \u0107e biti \\(\\Theta(QN)\\), pa \u0107e ukupna slo\u017eenost biti \\(\\Theta(N\\log N + NQ)\\). Ako pronala\u017eenje opisanog elementa realizujemo kori\u0161\u0107enjem binarne pretrage (koju svakako mo\u017eemo koristiti, ako smo niz sortirali), onda je slo\u017eenost odre\u0111ivanja odgovora na pitanja \\(\\Theta(Q\\log N)\\), pa je slo\u017eenost kompletnog algoritma \\(\\Theta((N+Q)\\log N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/03_sante/","title":"3 - Sante","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Mom\u010dilo To\u0161i\u0107 Mom\u010dilo To\u0161i\u0107 Mom\u010dilo To\u0161i\u0107 Marko Milenkovi\u0107 <p>Korisno je uo\u010diti da sante formiraju graf od \\(N\\) \u010dvorova i \\(M\\) grana, gde svaka grana ima te\u017einu 0 ili 1. Mogu\u0107e je bez promene stanja ma\u0161ine kretati se samo preko grana one te\u017eine koje je trenutno stanje (0 - ma\u0161ina ne radi, 1 - ma\u0161ina radi). Po\u010detno stanje je 0.</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/03_sante/#resenje-kada-m-n-1-i-iz-svake-sante-ide-jedna-ili-dve-grane","title":"Re\u0161enje kada \\(M = N-1\\) i iz svake sante ide jedna ili dve grane","text":"<p>Ovako zadate sante formiraju niz gde je svaka povezana sa prethodnom i slede\u0107om (osim prve i poslednje). Mo\u017eemo do\u0107i od jedne do druge sante na jedinstven na\u010din (poku\u0161amo da idemo levo od Mike dok ne stignemo do kraja, ili do Laze, i isto tako na desno), i simulirati promene stanja.</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/03_sante/#resenje-kad-je-put-izmeu-svake-dve-sante-tesko-prohodan","title":"Re\u0161enje kad je put izme\u0111u svake dve sante te\u0161ko prohodan","text":"<p>Ovde je jedini mogu\u0107i odgovor 1 ili -1, zavisno od toga da li je mogu\u0107e do\u0107i od Mikine do Lazine sante. Ovo mo\u017eemo proveriti nekim algortimom poput \\(DFS\\)-a (rekurzivni obilazak svake sante sa pam\u0107enjem pose\u0107enih).</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/03_sante/#resenje-kad-je-m-n-1-i-uvek-se-moze-doci-od-jedne-do-druge-sante","title":"Re\u0161enje kad je \\(M = N-1\\) i uvek se mo\u017ee do\u0107i od jedne do druge sante","text":"<p>Graf koji sante opisuju u ovoj grupi primera je stablo. Kao u prvom podzadatku, jedinstven je na\u010din da se do\u0111e od jedne sante do druge (osobina stabla), samo je ovaj put potrebno koristiti neki algoritam za nala\u017eenje puta (ovde je put skup grana, a ne termin iz teksta) izme\u0111u dva \u010dvora (kao \\(BFS\\)), i simulirati promene stanja ma\u0161ine na njemu.</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/03_sante/#resenje-za-pun-broj-poena","title":"Re\u0161enje za pun broj poena","text":"<p>Primetimo da ukoliko je stanje ma\u0161ine \\(s\\), a nalazimo se u \u010dvoru \\(u\\), mogu\u0107e je slobodno (bez pove\u0107anja kona\u010dnog odgovora) se kretati po svim \u010dvorovima do kojih se granama te\u017eine \\(s\\) mo\u017ee do\u0107i iz \\(u\\). Dakle, konstrukcija na\u0161eg re\u0161enja mo\u017ee izgledati tako \u0161to prvo obi\u0111emo sve \u010dvorove do kojih se mo\u017ee do\u0107i iz po\u010detnog koriste\u0107i grane te\u017eine 0, zatim promeniti te\u017einu i na\u0107i sve dosti\u017ene preko grana te\u017eine jedan od prethodno dostignutih itd. (naravno ne obilaze\u0107i ve\u0107 pose\u0107ene \u010dvorove). Elegantnu implementaciju ove ideje nam pru\u017ea takozvani \\(0-1\\) \\(BFS\\). U redu sa dva kraja (double ended queue) pamtimo \u010dvor kao i stanje u kom se nalazimo kad ga pose\u0107ujemo (na po\u010detku dodamo Mikinu santu i 0), i na po\u010detak reda dodajemo one \u010dvorove koji su povezani granama te\u017eine koja odgovara stanju \u010dvora,  dok se na kraj dodaju \u010dvorovi povezani granama suprotne te\u017eine (i u oba slu\u010daja a\u017euriramo cenu dolaska do nekog \u010dvora). Ovako smo se osigurali da prvo prolazimo kroz sve dostupne iz prvog \u010dvora bez promene stanja, a da dalje ne menjamo stanje dok nismo obi\u0161li sve koji se dosti\u017eu jednom promenom stanja, itd. Na kraju jednostavno proverimo da li je obi\u0111en Lazin \u010dvor, i koja je cena njegovog obilaska. Vremenska i memorijska slo\u017eenost su \\(O(N+M)\\).</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/03_sante/#resenje-2-za-pun-broj-poena","title":"Re\u0161enje 2 (za pun broj poena)","text":"<p>Kako je mogu\u0107e slobodno se kretati od nekog \u010dvora po odre\u0111enoj grupi \u010dvorova, mo\u017eemo grupisati \u010dvorove u 0-komponente i 1-komponente (zavisno od toga kakvim se granama kre\u0107emo) \\(DFS\\)-om, a zatim formirati novi graf u kom povezujemo dve komponente ukoliko ne postoji \u010dvor preko kog je mogu\u0107e pre\u0107i iz jedne u drugu (u ovom \u010dvoru menjamo stanje ma\u0161ine). Kasnije nalazimo najkra\u0107i put izme\u0111u odgovaraju\u0107ih komponenti u ovom grafu \\(BFS\\)-om (s tim \u0161to je po\u010detna udaljenost 1 ukoliko kre\u0107emo od 1-komponente). Svaka komponenta je ili 1 ili 0 komponenta i ima najmanje jedan \u010dvor, te  njih ima reda veli\u010dine \\(N\\), dok grana izme\u0111u njih ima najvi\u0161e \\(N\\) (jer jedan \u010dvor predstavlja granu izme\u0111u komponenti) - dakle red veli\u010dine slo\u017eenosti je ponovo linearan.</p> <p>Napomena: sporija implementacija ideje za 100 poena (npr Dajkstrin algoritam u kvadratnoj slo\u017eenosti umesto 0-1 BFS) \u0107e raditi za vrednosti N i M do 5000</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/04_vage/","title":"4 - Vage","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Mladen Puzi\u0107 Mladen Puzi\u0107 Mladen Puzi\u0107 Aleksa Milisavljevi\u0107"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/04_vage/#resenje-kada-n-m-leq-1000","title":"Re\u0161enje kada \\(N, M \\leq 1000\\)","text":"<p>Za svako pitanje mo\u017eemo jednostavno pro\u0107i kroz sve bitne vage i proveriti da li mogu izmeriti trenutno \\(x_i\\). </p> <p>Vremenska slo\u017eenost je \\(O(NM)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/04_vage/#resenje-kada-d_iu_i","title":"Re\u0161enje kada \\(d_i=u_i\\)","text":"<p>U ovom slu\u010daju potrebno je odrediti, za svako pitanje, koliko vaga kojima je \\(d_i\\) jednako \\(x_i\\) ima indeks od \\(l_i\\) do \\(r_i\\). Po\u0161to nam nisu bitne konkretne vrednosti \\(d_i\\), \\(u_i\\) i \\(x_i\\), ve\u0107 samo da li su jednaki, ove vrednosti mo\u017eemo kompresovati, na primer koriste\u0107i std::map, tako da sve budu najvi\u0161e \\(N\\). Kada to uradimo, mo\u017eemo za svaki razli\u010dit element u nizu \\(d_i\\) da napravimo novi niz, koji sadr\u017ei, sortirano rastu\u0107e, sve indekse vaga kojima odgovara ta vrednost \\(d_i\\). </p> <p>Sada, kad je potrebno da odgovorimo na pitanje, mo\u017eemo koriste\u0107i binarnu pretragu da na\u0111emo koliko elemenata u nizu indeksa koji odgovara vrednosti \\(x_i\\) se nalazi na intervalu \\([l_i, r_i]\\).</p> <p>Vremenska slo\u017eenost je \\(O((N+M)logN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/04_vage/#resenje-kada-ne-postoji-x-koje-mogu-da-izmere-dve-razlicite-vage","title":"Re\u0161enje kada ne postoji \\(x\\) koje mogu da izmere dve razli\u010dite vage","text":"<p>Ovaj uslov se druga\u010dije mo\u017ee napisati da su intervali \\([d_i, u_i]\\) disjunktni. Sortirajmo intervale po levoj granici, tako\u0111e \u010duvaju\u0107i indeks svakog intervala. Nakon toga re\u0161avamo pitanja jedno po jedno, tako \u0161to binarnom pretragom tra\u017eimo poslednji interval kome je leva granica manja od trenutnog \\(x_i\\).  </p> <p>Ukoliko se \\(x_i\\) ne nalazi u tom intervalu ili se indeks tog intervala ne nalazi u intervalu \\([l_i, r_i]\\), rezultat za trenutno pitanje je \\(0\\). U suprotnom, rezultat je \\(1\\).</p> <p>Vremenska slo\u017eenost je \\(O((N+M)logN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/04_vage/#resenje-kada-u_i-leq-20","title":"Re\u0161enje kada \\(u_i \\leq 20\\)","text":"<p>Ovaj slu\u010daj se re\u0161ava sli\u010dno slu\u010daju kada va\u017ei \\(d_i = u_i\\), s tim \u0161to, umesto da ubacimo svaki indeks u niz indeksa samo za vrednost \\(d_i\\), mi \u0107emo ga ubaciti u niz indeksa za svaku vrednost u intervalu \\([d_i, u_i]\\). Nakon toga, odgovor na pitanje nalazimo na isti na\u010din kao ranije. Potrebno je posebno paziti za slu\u010daj kada \\(x_i &gt; 20\\). </p> <p>Vremenska slo\u017eenost je \\(O(N\\cdot max(u_i) + MlogN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/04_vage/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Kako bismo re\u0161ili zadatak za sve bodove, potrebno je da na pitanja odgovaramo offline, odnosno u druga\u010dijem redosledu nego \u0161to su data, pa \u0107emo ih na kraju ispisati u ta\u010dnom redosledu. Na pitanja \u0107emo odgovarati u redosledu rastu\u0107e po \\(x_i\\) (ukoliko vi\u0161e pitanja ima isto \\(x_i\\), nije bitno na koje odgovaramo prvo). </p> <p>Znamo da nam je vaga \\(j\\) bitna samo ako va\u017ei \\(d_j \\leq x_i \\leq u_j\\). Dakle, kako idemo kroz pitanja rastu\u0107e po \\(x_i\\), postoje dve vrste doga\u0111aja: </p> <ul> <li>Vaga \\(j\\) postaje bitna prvi put kada postavljamo pitanje za koje va\u017ei \\(x_i \\geq d_j\\);</li> <li>Vaga \\(j\\) prestaje da bude bitna pri put kada postavljamo pitanje za koje va\u017ei \\(x_i \\geq u_j+1\\).</li> </ul> <p>Ubacimo svih \\(2N\\) doga\u0111aja u jedan niz i sortirajmo ga rastu\u0107e po njihovim granicama za \\(x_i\\). Sada mo\u017eemo zajedno prolaziti kroz niz pitanja i niz doga\u0111aja metodom dva pokaziva\u010da i odr\u017eavati niz nula i jedinica du\u017eine \\(N\\) koji na \\(i\\)-toj poziciji sadr\u017ei \\(1\\) ako i samo ako je vaga sa indeksom \\(i\\) trenutno bitna. Naravno, ovaj niz \u0107emo menjati svaki put kada na red do\u0111e neki novi doga\u0111aj.</p> <p>Kako bismo efikasno odgovorili na pitanje, potrebno je da efikasno na\u0111emo zbir na intervalu \\([l_i, r_i]\\) ovog niza, u trenutku kada smo obradili sve doga\u0111aje koji dolaze pre ovog pitanja. Za ovo mo\u017eemo koristiti segmentno ili Fenvikovo stablo kako bismo ostvarili dobru slo\u017eenost.</p> <p>Vremenska slo\u017eenost je \\(O((N+M)logN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/05_zlatnici3/","title":"5 - Zlatnici 3","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Marko \u0160i\u0161ovi\u0107 Pavle Martinovi\u0107 Pavle Martinovi\u0107"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/05_zlatnici3/#resenje-u-oqn2","title":"Re\u0161enje u \\(O(QN^2)\\)","text":"<p>Poku\u0161ajmo da prona\u0111emo za svaki \u010dvor \\(u\\) koliko treba poteza da bismo sve zlatnike preneli u njega. Ovo je suma \\(\\sum_{i=1}^nd(u,i)\\cdot w_i\\), gde \\(w_i\\) broj zlatnika u \\(i\\), a \\(d(u,v)\\) du\u017eina puta izme\u0111u \u010dvorova \\(u\\) i \\(v\\). Ovo se lako mo\u017ee izra\u010dunati pu\u0161tanjem DFS iz svakog \u010dvora.</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/05_zlatnici3/#resenje-u-oqn","title":"Re\u0161enje u \\(O(QN)\\)","text":"<p>Potrebno je da malo dublje analiziramo koji \u010dvor \u0107e biti odgovor. Neka sa \\(V_v\\) ozna\u010davamo broj poteza koji je potreban da bi svi zlatnici stigli u \u010dvor \\(v\\). Potrebno je na\u0107i \u010dvor tako da je \\(V_u=\\sum_{i=1}^nd(u,i)\\cdot w_i\\) minimalno. Posmatrajmo vrednost \\(V_u-V_v\\) za neku granu \\(uv\\). Iz gorenavedene formule vidimo da je ovo zapravo jednako razlici suma te\u017eina u dva stabla koja dobijemo kada ise\u010demo granu \\(uv\\) (uverite se!). Kada smo u optimalnom \u010dvoru, ova vrednost treba da bude negativna za sve grane, \u0161to je ekvivalentno sa tim da kad ise\u010demo taj \u010dvor, u svakom od dobijenih stabala je najvi\u0161e pola od ukupne te\u017eine (ovakav \u010dvor se zove centroidom stabla). Sada lako se vidi da je ovakav \u010dvor jedinstven, ili ih je dva koja su spojena granom sa razlikom renjenja od \\(0\\) (a u tom slulaju su oba validno re\u0161enje). Stoga, sveli smo zadatak na tra\u017eenje \u0161ta je centroid u ovom stablu, \u0161to mo\u017ee da se uradi DFS i \u010duvaju se veli\u010dine svih podstabala, a zatim se uradi jednostavna provera.</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/05_zlatnici3/#resenje-kada-je-stablo-put","title":"Re\u0161enje kada je stablo put","text":"<p>U ovom slu\u010daju je re\u0161enje ternarno pretra\u017eivo po putu, i sve dist funkcije se mogu izra\u010dunati lako. Mogu\u0107e je uraditi tad u zadatak \\(O(N\\log N + Q\\log^2 N)\\), za jednu ta\u010dku pretrage u ternarnoj nam treba samo sume po prefiksima i sufiksima, a promeni tih mo\u017eemo da pratimo u segmentnom stablu. </p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/05_zlatnici3/#resenje-kada-je-stablo-kompletno-binarno","title":"Re\u0161enje kada je stablo kompletno binarno","text":"<p>Nastavljamo na re\u0161enje iz drugog podzadatka. Ono \u0161to treba primetiti je da je vrednost \\(V_v-V_u\\) mogu\u0107e izra\u010dunati brzo za neku granu. Zaista ako smestimo \u010dvorove u niz po ulaznom ili izlaznom poretku DFS, i imamo segmentno stablo nad tim nizom, po\u0161to \u0107e svi \u010dvorovi u nekom stablu formirati interval. Nama je potrebna samo te\u017eina u dva stabla koja dobihemo kad ise\u010demo ovu granu, a jedno od tih stabala \u0107e morati da bude podtablo ukorenjenog stabla. Te\u017einu u drugom mo\u017eemo izra\u010dunati kao ukupna te\u017eina minus to \u0161to smo izra\u010dunali. Stoga, promenu rezultata prolaskom iz jednog \u010dvora u drugi, (to jest da li je bolje ako pre\u0111emo) mo\u017eemo izra\u010dunati u \\(O(\\log N)\\).</p> <p>Sada kad dodamo novi \u010dvor, novo re\u0161enje \u0107e se nalaziti na putu od trenutnog re\u0161enja do tog novog na koji smo dodali zlatnike. Stoga, na tom putu \u0107e promene rezultata biti pozitivne, pa negativne. Da bismo re\u0161ili zadatak potrebno je samo iterirati kroz put i na\u0107i sve grane kroz koje kad pro\u0111emo pobolj\u0161avamo rezultat. Po\u0161to su na ovom stablu svi putevi kratki, nalazimo re\u0161enje u \\(O(N\\log N + Q\\log^2 N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/01_Kvalifikacije_1/05_zlatnici3/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Kona\u010dno re\u0161enje je mala nadogradnja prethodnog. Naime, umesto da idemo redom po putu izme\u0111u starog i novog \u010dvora, uraidmo binarnu pretragu na tom putu da bismo prona\u0161li poslednju granu koja nam daje pozitivan skor na rezultat. Po svemu opisanom u prethodnom podzadatku, ovo \u0107e zaista biti binarno pretra\u017eivo i stoga \u0107e ovo re\u0161enje raditi u \\(O(N\\log N + Q\\log^2 N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/01_spojler/","title":"1 - Spojler","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Andrej Iva\u0161kovi\u0107 Vladimir Milovanovi\u0107 Vladimir Milovanovi\u0107"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/01_spojler/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Nije te\u0161ko uo\u010diti da na osnovu rezultata \\(a:b\\) na kraju utakmice, kao i rezultata \\(x:y\\) na poluvremenu, postoji \u010detiri razli\u010dita slu\u010daja:</p> <ul> <li>\\(x = a\\) i \\(y = b\\), odnosno da je rezultat na kraju jednak rezultatu na poluvremenu, pa u nastavku ne\u0107e biti golova;</li> <li>\\(x &lt; a\\) i \\(y &lt; b\\), \u0161to dalje zna\u010di da \u0107e obe ekipe posti\u0107i gol, pa na osnovu rezultata nije mogu\u0107e utvrditi koja \u0107e ekipa zabiti naredni;</li> <li>\\(x &lt; a\\) i \\(y = b\\), \u0161to implicira da \u0107e prva ekipa posti\u0107i naredni gol;</li> <li>\\(x = a\\) i \\(y &lt; b\\), \u0161to zna\u010di da \u0107e druga ekipa posti\u0107i naredni gol.</li> </ul> <p>Jednostavnim postavljanjem ova \u010detiri uslova i odgovaraju\u0107im ispisima dolazi se do tra\u017eenog re\u0161enja u konstantnoj vremenskoj slo\u017eenosti \\(\\mathcal{O}(1)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/02_finale/","title":"2 - Finale","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Marko Milenkovi\u0107 Marko \u0160i\u0161ovi\u0107 Jovan Bengin Vladimir Milovanovi\u0107"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/02_finale/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Ako posmatramo puteve na rubu matrice, vidimo da i sva polja na rubu (tj. prvi i poslednji red i kolona) moraju imati redara. Ako je \\(N \\leq 2\\) ili \\(M \\leq 2\\), to zna\u010di da \u0107e sva polja u matrici imati redara, pa je u tom slu\u010daju re\u0161enje \\(N \\times M\\).</p> <p>Nadalje pretpostavljamo da va\u017ei \\(N, M \\geq 3\\). Posmatrajmo matricu dobijenu brisanjem prvog i poslednjeg reda i kolone - u ovoj novoj \\((N-2) \\times (M-2)\\) matrici \u0107emo tra\u017eiti maksimalan broj polja gde ne moramo postaviti redare, ako znamo da su svi putevi na rubu ve\u0107 pokriveni.  Za svaka dva susedna polja va\u017ei da barem jedno od njih ima redara, jer ina\u010de put koji ih razdvaja ne bi bio pokriven. Ovaj uslov je i dovoljan, jer \u0107e tada i svi putevi biti pokriveni.</p> <p>Dakle, potrebno je na\u0107i najve\u0107i skup polja u kome ne postoje dva susedna. Ovo je poznat zadatak: obojimo matricu \u0161ahovski crno-belo i uzmemo sva polja one boje koja se vi\u0161e puta pojavljuje. Po\u0161to se broj polja crne i bele boje razlikuje za najvi\u0161e jedan, bi\u0107e \\(\\lceil \\frac{(N-2) \\cdot (M-2)}{2} \\rceil\\) polja jedne, i \\(\\lfloor \\frac{(N-2) \\cdot (M-2)}{2} \\rfloor\\) polja druge boje. To zna\u010di da mo\u017eemo imati maksimalno \\(\\lceil \\frac{(N-2) \\cdot (M-2)}{2} \\rceil\\) polja bez redara, pa je minimalan broj redara \\(N \\cdot M - \\lceil \\frac{(N-2) \\cdot (M-2)}{2} \\rceil\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/03_guzva/","title":"3 - Gu\u017eva","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Aleksa Milisavljevi\u0107 i Mladen Puzi\u0107 Aleksa Milisavljevi\u0107 Mladen Puzi\u0107 Dragan Uro\u0161evi\u0107 <p>Dalje u re\u0161enjima \u0107emo re\u0107i da se kre\u0107emo na dole ukoliko se pomeramo sa polja \\((i, j)\\) na polje \\((i+1, j)\\), u suprotnom se kre\u0107emo udesno.</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/03_guzva/#resenje-kada-n-2","title":"Re\u0161enje kada \\(N = 2\\)","text":"<p>Na ta\u010dno jednoj poziciji \u0107emo se pomeriti na dole, svi ostali potezi bi\u0107e udesno. Ozna\u010dimo sa \\(d_i\\) broj navija\u010da koje sretnemo ukoliko se u koloni \\(i\\) pomerimo na dole. Ovaj niz mo\u017eemo izra\u010dunati koriste\u0107i prefiksni zbir nad gornjim redom i sufiksni zbir nad donjim redom.</p> <p>Ukoliko je blokirano neko polje u prvom redu, npr. \\((1, i)\\), onda se moramo pomeriti na dole pre \\(i\\)-te kolone, pa je re\u0161enje \\(\\min(d_1, d_2, \\ldots d_{i-1})\\). Ukoliko je blokirano neko polje u drugom redu, npr. \\((2, j)\\), onda se moramo pomeriti na dole posle \\(i\\)-te kolone, pa je re\u0161enje \\(\\min(d_{i+1}, d_{i+2}, d_M)\\).</p> <p>Vremenska slo\u017eenost je \\(O(M+Q)\\), a memorijska \\(O(M)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/03_guzva/#resenje-kada-q-leq-100-n-m-leq-7","title":"Re\u0161enje kada \\(Q \\leq 100\\), \\(N, M \\leq 7\\)","text":"<p>Re\u0161enje mo\u017eemo dobiti brute force metodom, odnosno isprobavanjem svih mogu\u0107ih puteva od prvog do poslednjeg polja, za svako blokirano polje. Takvih puteva postoji \\({N+M-2 \\choose N-1}\\) (imamo ukupno \\(N+M-2\\) koraka, od kojih biramo \\(N-1\\) da budu usmereni na dole). Sve puteve mo\u017eemo proveriti rekurzijom. </p> <p>Vremenska slo\u017eenost je \\(O(Q\\cdot{N+M-2 \\choose N-1})\\), a memorijska \\(O(NM)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/03_guzva/#resenje-kada-q-leq-2000-n-cdot-m-leq-2000","title":"Re\u0161enje kada \\(Q \\leq 2000\\), \\(N \\cdot M \\leq 2000\\)","text":"<p>Za svako blokirano polje, koristi\u0107emo dinami\u010dko programiranje - izra\u010duna\u0107emo \\(dp_{i, j}\\), najmanji broj navija\u010da koje moramo da sretnemo na putu od \\((1, 1)\\) do \\((i, j)\\), ako ne posetimo trenutno blokirano polje. Jasno je da va\u017ei \\(dp_{1, 1} = a_{1, 1}\\) i \\(dp_{i, j} = dp_{i-1, j} + dp_{i, j-1}\\), s tim \u0161to prilikom ra\u010dunanja uvek preska\u010demo polja koja su van matrice i trenutno blokirano polje. Re\u0161enje se onda nalazi u \\(dp_{N, M}\\). </p> <p>Vremenska slo\u017eenost je \\(O(QNM)\\), a memorijska \\(O(NM)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/03_guzva/#resenje-kada-q-leq-104","title":"Re\u0161enje kada \\(Q \\leq 10^4\\)","text":"<p>Kao u prethodnom re\u0161enju, izra\u010dunajmo niz \\(A_{i, j}\\) - najmanji broj navija\u010da koje moramo da sretnemo na putu od \\((1, 1)\\) do \\((i, j)\\), i sli\u010dno \\(B_{i, j}\\) - najmanji broj navija\u010da koje moramo da sretnemo na putu od \\((i, j)\\) do \\((N, M)\\). </p> <p>Recimo da blokiramo polje \\((x, y)\\). Posmatrajmo sva polja \\((x', y')\\) za koja va\u017ei \\(x+y = x' + y'\\). Mo\u017eemo videti da se zapravo sva ova polja nalaze na istoj dijagonali, kao i da na svakom putu od \\((1, 1)\\) do \\((N, M)\\) prolazimo kroz ta\u010dno jedno od ovih polja. </p> <p>Ovo nam govori da, kako bismo garantovali da ne prolazimo kroz polje \\((x, y)\\), dovoljno je da garantujemo da prolazimo kroz neko drugo polje na ovoj dijagonali. Mo\u017eemo na\u0107i put sa najmanje navija\u010da koji prolazi kroz polje \\((i, j)\\) sa \\(A_{i, j} + B_{i, j} - a_{i, j}\\). </p> <p>Mo\u017eemo, dakle, pro\u0107i kroz sva polja na dijagonali blokiranog polja i videti za koje dobijamo najmanji put. Bitno je primetiti da je broj polja na toj dijagonali najvi\u0161e \\(\\min(N, M)\\), \u0161to je manje od \\(\\sqrt{NM}\\).</p> <p>Vremenska slo\u017eenost je \\(O(Q\\cdot \\sqrt{N M} + NM)\\), a memorijska \\(O(NM)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/03_guzva/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Uradimo sve isto kao u prethodnom re\u0161enju, sem \u0161to \u0107emo efikasnije na\u0107i minimum na dijagonali bez jednog polja. To \u0107emo uraditi tako \u0161to \u0107emo \u010duvati prefiksni i sufiksni minimum za svaku dijagonalu. Za blokirano \\((x, y)\\) uze\u0107emo minimum od prefiksa do \\((x-1, y+1)\\) i sufiksa od \\((x+1, y-1)\\).</p> <p>Vremenska slo\u017eenost je \\(O(Q + NM)\\), a memorijska \\(O(NM)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/04_formacija/","title":"4 - Formacija","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Mladen Puzi\u0107 Mladen Puzi\u0107 Mladen Puzi\u0107 Pavle Martinovi\u0107 <p>Za tri ta\u010dke \\(A, B\\) i \\(C\\) ka\u017eemo da trojka \\((A, B, C)\\) ima levi zaokret ukoliko ako se kre\u0107emo od \\(A\\) do \\(C\\) preko ta\u010dke \\(B\\) moramo skrenuti u levo. Sli\u010dno defini\u0161emo desni zaokret. Ta\u010dke \\(A, B\\) i \\(C\\) su kolinearne ukoliko postoji prava koja sadr\u017ei sve tri. Sve ovo mo\u017eemo proveriti koriste\u0107i vektorski proizvod vektora \\(\\overrightarrow{AB}\\) i \\(\\overrightarrow{BC}\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/04_formacija/#resenje-kada-n-3","title":"Re\u0161enje kada \\(N = 3\\)","text":"<p>Za svaki podskup potrebno je proveriti posebno. Imamo tri podskupa sa dva igra\u010da, gde je potrebno proveriti da li se Mesi nalazi na du\u017ei izme\u0111u ta dva igra\u010da. To mo\u017eemo tako \u0161to proverimo da li je kolinearan sa ta dva igra\u010da, kao i da su mu \\(x\\) i \\(y\\) koordinate izme\u0111u njihovih.</p> <p>Tako\u0111e je potrebno proveriti za podskup od sva tri fudbalera. Ako je Mesi u ta\u010dki \\(M\\), a tri date ta\u010dke \\(A, B\\) i \\(C\\), onda je potrebno da trojke \\((A, B, M)\\), \\((B, C, M)\\) i \\((C, A, M)\\) imaju isti zaokret, kako bi se \\(M\\) nalazio u konveksnom omota\u010du ta\u010daka \\(A, B\\) i \\(C\\).</p> <p>Vremenska i memorijska slo\u017eenost je \\(O(1)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/04_formacija/#resenje-kada-y_1-1-i-y_k-1-za-1-k-leq-n","title":"Re\u0161enje kada \\(y_1 = 1\\) i \\(y_k = -1\\), za \\(1 &lt; k \\leq N\\)","text":"<p>Jasno je da \u0107emo igra\u010da sa dresom broj \\(1\\) morati da uklju\u010dimo u podskup kako bi konveksni omota\u010d sadr\u017eao ta\u010dku \\((0, 0)\\). </p> <p>Posmatrajmo ta\u010dku \\((-x_1, -1)\\). Postoji dva slu\u010daja:</p> <ul> <li>Ukoliko postoji igra\u010d koji se nalazi u toj ta\u010dki, tada, ako ga uklju\u010dimo u podskup, mo\u017eemo uzeti bilo koji podskup ostalih igra\u010da, kojih ima \\(2^{N-2}\\). Sem toga, moramo dodati broj podskupova u kojima se ne nalazi taj igra\u010d;</li> <li>Ukoliko ne postoji igra\u010d u toj ta\u010dki, ne\u0107emo dodati \\(2^{N-2}\\) na re\u0161enje.</li> </ul> <p>Recimo da posmatramo broj podskupova koji ne sadr\u017ee igra\u010da u ta\u010dki \\((-x_1, -1)\\) (ako takav uop\u0161te postoji). Jasno je da onda moramo uzeti makar jednog igra\u010da levo (odnosno sa manjom \\(x\\) koordinatom) od te ta\u010dke i makar jednog igra\u010da desno (odnosno sa ve\u0107om \\(x\\) koordinatom). Ako sa \\(L\\) ozna\u010dimo broj igra\u010da levo, a sa \\(R\\) broj igra\u010da desno, onda je re\u0161enje \\((2^L-1)\\cdot (2^R - 1)\\) (na \u0161ta dodajemo \\(2^{N-2}\\) ukoliko postoji igra\u010d u ta\u010dki \\((-x_1, -1)\\)).</p> <p>Vremenska slo\u017eenost je \\(O(NlogN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/04_formacija/#resenje-kada-y_k-in-1-1-za-1-leq-k-leq-n","title":"Re\u0161enje kada \\(y_k \\in \\{-1, 1\\}\\), za \\(1 \\leq k \\leq N\\)","text":"<p>Sli\u010dno prethodnom re\u0161enju, moramo da imamo makar po jednog igra\u010da sa obe \\(y\\) koordinate. Ako fiksiramo najlevlju i najde\u0161nju ta\u010dku sa prave \\(y = 1\\) iz podskupa koji biramo, onda ponovo nalazimo \\(L\\) i \\(R\\) i primenjujemo sli\u010dnu formulu kao u prethodnom re\u0161enju. </p> <p>Ovo je presporo pa je potrebno da primetimo da \\(L\\) zavisi samo od najlevlje odabrane ta\u010dke, a \\(R\\) samo od najde\u0161nje odabrane ta\u010dke. Ovo koristimo uz tehniku prefiksnih suma, da na\u0111emo zbir svih podskupova za fiksiranu najlevlju ta\u010dku (a kroz sve mogu\u0107e najde\u0161nje). </p> <p>Vremenska slo\u017eenost je \\(O(NlogN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/04_formacija/#resenje-kada-n-leq-18","title":"Re\u0161enje kada \\(N \\leq 18\\)","text":"<p>Za svaki podskup ta\u010daka, na\u0111imo konveksni omota\u010d nekim poznatim algoritmom (npr. monotoni lanac) i onda proverimo da li se ta\u010dka \\((0, 0)\\) nalazi u njemu. To mo\u017eemo uraditi tako \u0161to idemo u krug kroz ivice omota\u010da i proveravamo da li sve ivice imaju isti zaokret sa ta\u010dkom \\((0, 0)\\).</p> <p>Vremenska slo\u017eenost je \\(O(2^N \\cdot N)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/04_formacija/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Umesto da ra\u010dunamo broj podskupova u \u010dijem konveksnom omota\u010du se Mesi nalazi, od \\(2^N - 1\\) oduzmimo broj podskupova u \u010dijem konveksnom omota\u010de se ne nalazi Mesi. To radimo zato \u0161to je lak\u0161e proveriti ovaj uslov - dovoljno je da postoji prava kroz \\((0, 0)\\), tako da su sve ta\u010dke podskupa sa iste strane ove prave.</p> <p>Pretpostavi\u0107emo da nema kolinearnih ta\u010daka (\u010dak ni kad ra\u010dunamo Mesijevu poziciju). Re\u0161anje kolinearnih ta\u010daka svede se detalje implementacije. Krenuv\u0161i od pozitivne \\(x\\) ose, sortirajmo ta\u010dke po polarnom uglu oko ta\u010dke \\((0, 0)\\), rastu\u0107e. Ozna\u010dimo sa \\(M\\) ta\u010dku \\((0, 0)\\). </p> <p>Fiksirajmo svaku ta\u010dku \\(p_i\\) i sa \\(cnt\\) ozna\u010dimo broj drugih ta\u010daka koje imaju levi zaokret sa vektorom od \\(p_i\\) do \\(M\\). Onda je broj podskupova u kojima je \\(p_i\\) najlevlja ta\u010dka (ta\u010dka takva da nije zaokret \\((M, x, p_i)\\) nije nadesno, za svako \\(x\\) u podskupu),  a da konveksni omota\u010d ne sadr\u017ei ta\u010dku \\(M\\) - \\(2^{cnt}\\). Kada od \\(2^N - 1\\) oduzmemo ovaj rezultat za svaku ta\u010dku \\(p_i\\), dobijemo kona\u010dno re\u0161enje. Broj \\(cnt\\) mo\u017eemo odr\u017eavati tehnikom dva pokaziva\u010da.</p> <p>Vremenska slo\u017eenost je \\(O(NlogN)\\), a memorijska \\(O(N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/05_opklada/","title":"5 - Opklada","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Pavle Martinovi\u0107 Aleksa Milisavljevi\u0107"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/05_opklada/#resenje-kada-je-l_iju_ij","title":"Re\u0161enje kada je \\(l_{i,j}=u_{i,j}\\)","text":"<p>Neka je \\(c_i\\) broj operacija koje smo primenili na \\(i\\)-tu kolonu, a \\(r_i\\) broj operacija koje smo primenili na \\(i\\)-ti red. Preimtimo da je onda \\(m_{i,j}=r_{i}-c_{j}\\). iz ovoga mo\u017eemo da zaklju\u010dimo da je \\(m_{i,j}=r_{i}-c_{j}=r_{i}+r_{1}-c_{j}-c_{1}-m_{1,1}=(r_i-c_1)+(r_1-c_j)+m_{1,1}=m_{i,1}+m_{1,j}-m_{1,1}\\). Mo\u017ee se bez ve\u0107ih pote\u0161ko\u0107a dokazati da je ovaj uslov potreban i dovoljan uslov za Momirovu krajnju tabelu (su\u0161tinski re\u0161avanjem sistema jedna\u010dina za \\(r_i\\) i \\(c_i\\)). Tako da je potrebno samo proveriti uslov i nalazimo re\u0161enje u \\(O(TNM)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/05_opklada/#resenje-kada-je-l_iju_ij-u-prvom-redu-i-koloni","title":"Re\u0161enje kada je \\(l_{i,j}=u_{i,j}\\) u prvom redu i koloni","text":"<p>Iz prethodnog podzadatka mo\u017eemo da vidimo zapravo da po\u0161to su nam fiksirani prvi red i kolona da nam je ostatak tabele fiksrian. Onda samo izra\u010dunamo koje vrednosti moraju da se nalaze na kraju u svakom polju i proverimo da li je u tra\u017eenom intervalu. Slo\u017eenost:  \\(O(TNM)\\).</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/05_opklada/#resenje-kada-je-u_ij-l_ijleq1-i-nm10","title":"Re\u0161enje kada je \\(u_{i,j}-l_{i,j}\\leq1\\) i \\(N,M&lt;=10\\)","text":"<p>U ovom podzadatku, koristimo re\u0161enje prethodnog. Naime primetimo da za vrednosti u prvom redu i koloni imamo najvi\u0161e \\(2^{M+N-1}\\) opcija. Fiksiramo svaku od tih opcija i probamo algoritmom sli\u010dan onome u prethodnom podzadatku (sa potencijalno nekim odsecanjem zbog ubrzanja). Slo\u017eenost:  \\(O(T2^{M+N}NM)\\)</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/05_opklada/#resenje-kada-je-l_iju_ij-u-svim-belim-poljima","title":"Re\u0161enje kada je \\(l_{i,j}=u_{i,j}\\) u svim belim poljima","text":"<p>Vratimo se na interpretaciju \\(m_{i,j}=r_{i}-c_{j}\\). Vidimo da nam polje gde je \\(l_{i,j}=u_{i,j}\\) daje jedinstvenu vezu izme\u0111u \\(r_{i}\\) i \\(c_{j}\\). Zbog uslova ovog zadatka, sve vrednosti \\(r_i\\) i \\(c_i\\) \u0107emo mo\u0107i da izrazimo samo preko \\(r_1\\) ili samo preko \\(r_2\\). Kada se te veze ispune i ubace u nejedna\u010dine ostalih polja, onda \u0107e sva preostala polja da nam daju neke nejedna\u010dine oblika \\(a\\le r_1-r_2\\le b\\). Kombinuju\u0107i ove nejednakosti po svim poljima, nalazimo u kom intervalu  \\(r_1-r_2\\) zaista treba da bude (kao presek svih gorenavedenih intervala), i odatle mo\u017eemo da uzmemo proizvoljnu vrednosti. Na kraju pustimo algoritam iz tre\u0107eg podzadatka (drugom u ovom tekstualnom re\u0161enju), da bismo videli da li je validno re\u0161enje to koje smo na\u0161li.</p>"},{"location":"takprog/2022%20%7C%202023/02_Kvalifikacije_2/05_opklada/#resenje-bez-dodatnih-ogranicenja","title":"Re\u0161enje bez dodatnih ograni\u010denja","text":"<p>Primetimo da nam se uslovi u su\u0161tini svode na \\(l_{i,j}\\leq r_i-c_j\\leq u_{i,j}\\). Prezapi\u0161imo ovo kao \\(r_i-c_j\\leq u_{i,j}\\) i \\(c_j-r_i\\leq-l_{i,j}\\). Sada smo sveli zadatak: na re\u0161avanje sistema nejedna\u010dina po promenljivima \\(x_1,x_2\\cdots,x_{M+N}\\) gde je svaka nejedna\u010dina oblika \\(x_i-x_j\\leq c\\). Postoji generalni na\u010din na koji se ovo re\u0161ava koji \u0107emo prezentovati ovde.</p> <p>Napravimo graf \u010diji \u010dvorovi odgovaraju promenljivima na\u0161eg sistema nejedna\u010dina. Napravimo za svaku nejedna\u010dinu oblika \\(x_i-x_j\\leq c\\) granu od \u010dvora \\(j\\) do \u010dvora \\(i\\) sa te\u017einom \\(c\\). Pusti\u0107emo algoritam Belman-Ford, da bismo na\u0161li distancu od \\(1\\) do svakog drugog \u010dvora u ovom grafu. Tvrdimo da ukoliko u na\u0161em grafu postoji negativan ciklus, odgovor je da re\u0161enje ne postoji, dok ako ne postoji negativan ciklus, re\u0161enje uvek postoji i nalatimo ga kao \\(x_i=dist(1,i)\\). Ukoliko postoji negativan ciklus, onda neka je to ciklus \\(a_1,a_2,\\cdots,a_k\\). Tada za njih imamo neke nejednakosti oblika \\(x_{a_i}-x_{a_{i+1}}\\leq c_{i}\\) (indeksi uzeti po modulu \\(k\\)). Sada kad saberemo ove jedna\u010dine, svaki od promenljivih nam se skrati i dobijamo \\(0\\leq c_1+c_2+\\cdots+c_k&lt;0\\) (jer je u pitanju negativan ciklus). Iz ovoga zaklju\u010dujemo da kad ima negativan ciklus, re\u0161enje zaista ne postoji. Sada pretpostavimo da negativan ciklus ne postoji. Doka\u017eimo da je \\(x_i=dist(1,i)\\) zaista re\u0161enje. Treba da se uverimo da je \\(dist(1,i)-dist(1,j)\\leq c\\), odnosno \\(dist(1,j)+c\\geq dist(1,i)\\), \u0161to je svakako ta\u010dno jer je desna strana najkra\u0107i put od \\(1\\) do \\(i\\), dok leva strana predstavlja neki put od \\(1\\) do \\(i\\), gde prvo idemo do \\(j\\) a onda od \\(j\\) do \\(i\\) direktnom granom te\u017eine \\(c\\). Ovime smo se uverili da je ovo zaista re\u0161enje.</p> <p>Najzad da bismo fini\u0161irali zadatak, potrebno je dati dve fusnote na prethodni algoritam. Prva je da su neke vrednosti promenljivih mo\u017eda negativne, a nama trebaju samo pozitivne vrednosti. Ovo, me\u0111utim, nije problem jer mo\u017eemo svim promenljivama da dodamo neko \\(k\\) da bi smo dobili opet validno re\u0161enje sistema, gde su sve promeljive ve\u0107e za \\(k\\), pa za dovoljno veliko \\(k\\) i pozitivne. Druga bitna stvar je da re\u0161enje ovakvog sistema jedna\u010dina, u generalnom slu\u010daju, ne mora biti samo od celih brojeva. Me\u0111utim, zbog na\u010dina koji smo na\u0161li re\u0161enja, to jest kao najkra\u0107i put u nekom grafu gde su te\u017eine svih grana cele, onda \u0107e ovo re\u0161enje koje smo detektovali u gornjem algoritmu ipak biti validno.</p> <p>Ovime smo re\u0161ili zadatak u \\(O(TNM(N+M))\\).</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/01_kuvar/","title":"B1 - Kuvar","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Vladimir Milovanovi\u0107 Dimitrije Erdeljan Dimitrije Erdeljan Marko \u0160i\u0161ovi\u0107"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/01_kuvar/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Prva dva podzadatka mo\u017eemo jednostavno re\u0161iti sa dve ugnje\u017edene petlje koje isprobavaju svaki par \\((i, j)\\) i broje za koliko takvih parova je \\(X_i = Z_{Y_j}\\). Vremenska slo\u017eenost ovog algoritma je \\(\\mathcal{O}(N^2)\\), \u0161to ne\u0107e biti dovoljno za preostale podzadatke.</p> <p>Algoritam mo\u017eemo pobolj\u0161ati tako \u0161to razdvojimo ove dve petlje: prvo \u0107emo prebrojati koliko postoji epizoda za svako mogu\u0107e jelo, odnosno izra\u010dunati niz \\(C\\), gde je \\(C_i\\) broj indeksa \\(j\\) gde \\(X_j = i\\). Po\u0161to su sve vrednosti \\(X_i\\) najvi\u0161e \\(N\\), ovaj niz staje u memoriju i mo\u017eemo ga popuniti jednim prolazom kroz \\(X\\).</p> <p>Sada je dovoljno da pro\u0111emo kroz \\(Z\\), i za svako \\(Z_i\\) ukupnom broju dodamo \\(C_{Z_i}\\) (broj elemenata u \\(X\\) koji bi bili odgovaraju\u0107i par). Vremenska slo\u017eenost je sada \\(\\mathcal{O}(N)\\), sasvim dovoljno za \\(N \\leq 10^5\\).</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/02_razmena_znaka/","title":"B2 - Razmena znaka","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Dragan Uro\u0161evi\u0107 Dragan Uro\u0161evi\u0107"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/02_razmena_znaka/#analiza","title":"Analiza","text":"<p>Pretpostavimo za trenutak da se operacija koju izvr\u0161ava \u017dika sastoji samo od zamene mesta dva susedna elementa, tj. da se ne izvr\u0161ava promena znaka. Mo\u017ee se pokazati da se primenom takve operacije, od polaznog niza mo\u017ee dobiti bilo koji niz sastavljen od elemenata niza \\(A\\), tj. bilo koji raspored elemenata niza \\(A\\): $$ A_{i_1}, A_{i_2}, A_{i_3}, \\dots, A_{i_n}.  $$</p> <p>Ako operacija koju izvodi \u017dika sastoji i od promene znaka, onda je za odre\u0111ivanje vrednosti nekog elementa nakon izvo\u0111enja svih operacija dovoljno da znamo njegovu po\u010detnu poziciju i njegovu poziciju na kraju (tj. nakon svih izvedenih operacija). Naime, \u010dak i u slu\u010daju da se isti element pomerao levo-desno (prema po\u010detku i prema kraju), njegov znak na kraju \u0107e biti odre\u0111en samo rastojanjem izme\u0111u po\u010detne o krajnje pozicije (zato \u0161to se pri svakom pomeranju levo-desno ili desno-levo izvodi paran broj operacija, pa element niza promeni znak paran broj puta, a to zna\u010di da ima isti znak kao da to pomeranje levo-desno nije ni izvodio).</p> <p>Prema tome, ako se element \\(A_i\\) premestio sa pozicije \\(i\\) na poziciju \\(j\\) (\\(j\\lt i\\)), onda \u0107e njegova vrednost biti  \\(B_j = (-1)^{i-j}A_i\\), tj. \\(B_j = (-1)^i : (-1)^j A_i\\), odnosno va\u017ei\u0107e \\((-1)^j B_j = (-1)^i A_i\\). Sli\u010dno, ako se element \\(A_i\\) premestio sa pozicije \\(i\\) na poziciju \\(j\\) (\\(j&gt;i\\)), onda \u0107e njegova vrednost biti  \\(B_j = (-1)^{j-i}A_i = (-1)^{i-j}A_i\\), tj. \\(B_j = (-1)^i : (-1)^j A_i\\), odnosno va\u017ei\u0107e \\((-1)^j B_j = (-1)^i A_i\\).   Odavde zaklju\u010dujemo da \u017dika od niza \\(A\\) mo\u017ee dobiti niz \\(B\\) ako i samo ako se nizovi \\(C\\) (\\(C_i = (-1)^iA_i\\)) i \\(D\\) (\\(D_i = (-1)^iB_i\\)) sastoje od istih elemenata (naravno, ne nu\u017eno na istim pozicijama).</p> <p>## Re\u0161enje prvog podzadatka  U ovom slu\u010daju je dovoljno odrediti pozicije elemenata koji su razli\u010diti od nule. Ako je \\(A_i \\ne 0\\) i \\(B_j \\ne 0\\), tada mogu nastupiti tri slu\u010daja</p> <ul> <li>Ako je \\(A_i = B_j\\) i \\(2 | (i-j)\\), onda se od niza \\(A\\) mo\u017ee dobiti niz \\(B\\);</li> <li>Ako je \\(A_i = -B_j\\) i \\(2 \\not | (i-j)\\), onda se od niza \\(A\\) mo\u017ee dobiti niz \\(B\\);</li> <li>Ako ne va\u017ei nijedan od dva gornja uslova, onda od niza \\(A\\) nije mogu\u0107e dobiti niz \\(B\\).</li> </ul> <p>Slo\u017eenost opisanog re\u0161enja je \\(\\Theta(n)\\).</p> <p>## Re\u0161enje drugog podzadatka Prema analizi, niz \\(B\\) se mo\u017ee dobiti od niza \\(A\\) ako i samo ako se nizovi \\(C\\) (\\(C_i = (-1)^iA_i\\)) i \\(D\\) (\\(D_i = (-1)^iB_i\\)) sastoje od istih elemenata. Me\u0111utim svi elementi nizova \\(C\\) i \\(D\\) imaju vrednost \\(1\\) ili \\(-1\\) i dovoljno je izbrojati da li nizovi \\(C\\) i \\(D\\) imaju isti broj elemenata \u010dija je vrednost \\(1\\) (odnosno isti broj elemenata \u010dija je vrednost \\(-1\\)), Slo\u017eenost opisanog re\u0161enja je \\(\\Theta(n)\\).</p> <p>## Re\u0161enje tre\u0107eg podzadatka  U ovom slu\u010daju mo\u017eemo sortirati nizove parova \\(E\\) \\((E_i = (|A_i|, i))\\) i \\(F\\) \\((F_i=(|B_i|, i))\\), pri \u010demu parove poredimo po vrednosti prvog elementa (komponente) para. Tada od niza \\(A\\) mo\u017eemo dobiti niz \\(B\\), ako i samo ako za sve odgovaraju\u0107e parove va\u017ei -   prvi elementi parova moraju biti jednaki (jer oni predstavljaju apsolutne vrednosti odgovaraju\u0107ih elemenata nizova \\(A\\) i \\(B\\)); -   drugi elementi parova predstavljaju pozicije tih elemenata u nizovima \\(A\\) i \\(B\\); na osnovu pozicija mo\u017eemo saznati i odgovaraju\u0107e elemente nizova \\(A\\) i \\(B\\); oni treba da budu jednaki (ako je razlika pozicija parna) ili suprotnih znakova (ako je razlika pozicija neparna).</p> <p>Slo\u017eenost opisanog re\u0161enja je \\(\\Theta(n\\log n)\\), zbog sortiranja nizova.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/02_razmena_znaka/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Koristimo \u010dinjenicu da nizovi \\(C\\) i \\(D\\), opisani u Analizi, treba da sadr\u017ee iste elemente (naravno, ako se od niza \\(A\\)  mo\u017ee dobiti niz \\(B\\)). Ako te nizove sortiramo, onda odgovaraju\u0107i elementi imaju jednake vrednosti. Zbog toga mo\u017eemo srtirati nizove \\(C\\) i \\(D\\) i proveriti da li su odgovaraju\u0107i elementi jednaki. Slo\u017eenost opisanog re\u0161enja je \\(\\Theta(n\\log n)\\), zbog sortiranja nizova.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/03_pikado/","title":"B3 - Jednostavni pikado","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Mom\u010dilo To\u0161i\u0107 Mom\u010dilo To\u0161i\u0107 Mom\u010dilo To\u0161i\u0107 Aleksa Milisavljevi\u0107"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/03_pikado/#analiza","title":"Analiza","text":"<p>Uo\u010dimo da Bane dobija poene samo ako izabere ta\u010dku sa \\(x\\) koordinatom me\u0111u unetim \\(x\\) koordinatama, i sa \\(y\\) koordinatom koja tako\u0111e pripada nekoj od kontrolnih ta\u010daka. Dakle, za re\u0161enje za prvih \\(i\\) ta\u010daka biramo \\(x_A\\) iz skupa \\(x_1,x_2,\\ldots x_i\\) i \\(y_A\\) iz skupa \\(y_1,y_2,\\ldots y_i\\) takve da je opisana suma maksimalna.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/03_pikado/#resenje-u-om4","title":"Re\u0161enje u \\(O(M^4)\\)","text":"<p>Za svako \\(i \\leq M\\) potrebno je iterirati kroz sve mogu\u0107e parove \\(x_A,y_A\\) iz pomenutih skupova (kvadratna slo\u017eenost) i prona\u0107i zbir iz zadatka (linearna slo\u017eenost). Ukupno je potrebno \\(O(M^4)\\) koraka.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/03_pikado/#resenje-u-om3","title":"Re\u0161enje u \\(O(M^3)\\)","text":"<p>Fiksirajmo \\(x\\) koordinatu. Tada je formula za broj poena koji maksimizujemo u obliku \\(\\sum_{j=1}^{i} const*|y_j-y_A|\\)</p> <p>Intuicija nam govori da ova suma \"odlazi u beskona\u010dnost\" kada izabrana ipsilon koordinata ili velika (ka beskona\u010dnosti) ili mala (ka minus beskona\u010dnosti) te mo\u017eemo poku\u0161ati samo vrednost najve\u0107eg \\(y_j\\) i najmanjeg \\(y_j\\), \u0161to daje br\u017ee re\u0161enje jer radimo isto kao u pro\u0161lom podzadatku samo proveravamo dve vrednosti za \\(y\\) (minimum i maksimum a\u017euriramo kako se unose nove ta\u010dke). </p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/03_pikado/#resenje-u-om2","title":"Re\u0161enje u \\(O(M^2)\\)","text":"<p>Doka\u017eimo intuiciju iz prethodnog re\u0161enja. Dokaza\u0107emo gramziv pristup tako \u0161to doka\u017eemo da uvek mo\u017eemo dobiti re\u0161enje koje nije lo\u0161ije tako \u0161to umesto neke ipsilon koordinate izaberemo neku manju ili ve\u0107u (i stoga je najbolje birati najmanju ili najve\u0107u).</p> <p>Neka su svi \\(y\\) jednako razmaknuti (ovo nije problemati\u010dna pretpostavka, naime, ako nisu, dodavanjem fiktivnih me\u0111uvrednosti ni\u0161ta ne menjamo jer ove vrednosti daju skor 0). Fiksijarmo \\(x\\) koordinatu i posmatrajmo re\u0161enje za \\(N\\) ta\u010daka i odabrano \\(y=y_i\\). Tada posmatrajmo kako se suma menja ako odaberemo \\(y\\) koordinatu levo, odnosno desno, od \\(y_i\\). Naime, ako je fiksirano \\(x\\), suma je u obliku \\(\\sum_{j=1}^{N} const*|y_j-y_i|\\)</p> <p>Poku\u0161ajmo sada da vidimo \u0161ta se de\u0161ava kada izabranu ipsilon koordinatu \"pomerimo\" za \\(\\Delta y\\) koje je razlika dveju ipsilon koordinata (dalje formule ne zavise od toga da li je pozitivno ili negativno). </p> <p>Neka su i bez gubljenja op\u0161tosti ipsilon koordinate ure\u0111ene tako da je prvih \\(i-1\\) manje od \\(y_i\\), a izme\u0111u \\(i\\) i \\(k\\) su jednake, dok su nakon \\(k\\) ve\u0107e.  Tada \u0107e suma biti (\\(const\\) predstavljaju pozitivne konstante - apsolutne razlike \\(x\\) koordinata i fiksirane \\(x\\) koord.) \\(\\sum_{j=1}^{N} const*|y_j+\\Delta y-y_i| = \\sum_{j=1}^{i-1} const*(y_i-y_j-\\Delta y)+\\sum_{j=k}^{N} const*(y_j+\\Delta y-y_i) + (k-i)*const*|\\Delta y|\\) Izdvojimo prethodnu sumu: $ \\sum_{j=1}^{N} const|y_j-y_i| - \\sum_{j=1}^{k} const\\Delta y + \\sum_{j=k+1}^{i} const\\Delta y + const|\\Delta y| = \\sum_{j=1}^{i} const|y_j-y_A| + P_i\\Delta y + Q_i*|\\Delta y| $ Vidimo da se Banetov skor promenio za \\(P_i*\\Delta y + Q_i*|\\Delta y|\\).</p> <p>Da li je \\(P_i\\) pozitivan, negativan, ili nula ne zavisi od toga da li poku\u0161avamo da se \"pomerimo\" u levo ili u desno ve\u0107 samo od iks vrednosti. Kako je \\(Q_i\\) uvek nenegatino, to je \\(P_i*\\Delta y + Q_i*|\\Delta y|\\) u zavisnosti od znaka \\(\\Delta y\\) (pozitivno predstavlja pomeranje u desno, ka najve\u0107em \\(y\\), a negativno u levo, ka najmanjem) ili u oba slu\u010daja nenegativna vrednost, ili u jednom slu\u010daju negativna, a u drugom nenegativna. Svakako, mo\u017eemo odabrati ono \\(y\\) za koje je ova vrednost nenegativna, odnosno Banetov skor nije manji, i stoga se \"pomeriti\" ka najve\u0107em ili najmanjem \\(y\\). Induktivno sledi da najve\u0107e ili najmanje \\(y\\) koje mo\u017eemo da odaberemo i daju najbolje re\u0161enje.</p> <p>Ako sada fiksiramo \\(y\\), zbog potpuno simetri\u010dnog izraza, analogno dokazujemo da treba odabrati najmanje ili najve\u0107e \\(x\\). Izbor jedne koordinate ne zavisi od izbora druge, te dolazimo do zaklju\u010dka da postoji samo 4 mogu\u0107nosti za \\(x_A,y_A\\) a to su najve\u0107a i najmanja \\(x\\) i \\(y\\) koordinata.</p> <p>Ove \u010detiri sume mo\u017eemo izra\u010dunati za svaki prefiks niza ta\u010daka, ili iskoristiti ideju razdvajanja na dve sume iz dokaza za pun broj poena.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/03_pikado/#resenje-u-om","title":"Re\u0161enje u \\(O(M)\\)","text":"<p>Uo\u010dimo da ako biramo ekstremne vrednosti \\(x\\) i \\(y\\) koordinata sume gube apsolutne zagrade i mogu se raspisati tako da u njima faktori\u0161u  \\(\\sum_{i=1}^{N}x_i*y_i\\),  \\(x_A*\\sum_{i=1}^{N}y_i\\),  \\(y_A*\\sum_{i=1}^{N}y_i\\) i  \\(y_A*x_A\\), te se 4 mogu\u0107e sume mogu izra\u010dunati u konstantoj slo\u017eenosti ako se sume iz ovih faktora a\u017euriraju prilikom unosa svake nove ta\u010dke.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/04_poklon/","title":"A1 - Poklon","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Jovan Bengin Jovan Bengin Dragan Uro\u0161evi\u0107 Igor Pavlovi\u0107"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/04_poklon/#resenje-prvog-podzadatka","title":"Re\u0161enje prvog podzadatka","text":"<p>U ovom slu\u010daju, zbog ograni\u010denja na du\u017einu niza \\(A\\) (broj \\(N\\)) i broj upita \\(Q\\), mogu\u0107e je za svaki upit \\((L_i, R_i)\\) proveriti da li podniz postaje sortiran nakon izbacivanja elementa \\(A_j\\) (\\(j= L_i, L_i+1, L_i+2, \\dots R_{i-1}, R_i\\)). Provera da li je niz sortiran izvodi se tako \u0161to se porede parovi uzastopnih (naravno, uzimaju\u0107i u obzir da je izba\u010den element \\(A_j\\), pa su elementi \\(A_{j-1}\\) i \\(A_{j+1}\\), ako je \\(L_i &lt; j &lt; R_i\\), uzastopni). Slo\u017eenost ovog re\u0161enja je \\(O(QN^2)\\).</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/04_poklon/#resenje-drugog-i-treceg-podzadatka","title":"Re\u0161enje drugog i tre\u0107eg podzadatka","text":"<p>Re\u0161enje ovih podzadataka dobija se \"profinjenjem\" re\u0161enja za prvi zadatak. To \"profinjenje\" se posti\u017ee tako \u0161to se za vrednosti \\(j\\) za koje je \\(A_{j-1}\\leq A_j \\leq A_{j+1}\\) ne proverava da li je podniz dobijen izbacivanjem elementa \\(A_j\\) sortiran (jer element \\(A_j\\) \"ne smeta\", budu\u0107i da je, po vrednosti, izme\u0111u elemenata levo i desno od njega). Tokom obrade se proverava da li je podniz koji sadr\u017ei sve elemente od pozicije  \\(L_i\\) do pozicije \\(R_i\\) sortiran i ako jeste onda je odgovor na upit \"DA\". Naravno, i u slu\u010daju da se za neko \\(j\\) ispostavi da je podniz dobijen nakon izbacivanja elementa \\(A_j\\) sortiran, odgovor je \"DA\".</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/04_poklon/#resenje-cetvrtog-podzadatka","title":"Re\u0161enje \u010detvrtog podzadatka","text":"<p>U ovom podzadatku je mogu\u0107e sa svaki indeks \\(i\\)  (\\(1\\leq i \\leq N\\)) odrediti: - indeks \\(j\\) (\\(j\\geq i\\)) prvog elementa u delu niza koga \u010dine elementi \\(A_i, A_{i+1}, A_{i+2}, \\dots, A_N\\) koji ima vrednost  \\(1\\); ozna\u010dimo tu vrednost sa \\(next_{i,1}\\); ako takav element ne postoji onda \u0107e odgovaraju\u0107i indeks imati vrednost \\(N+1\\).  - indeks \\(j\\) (\\(j\\geq i\\)) prvog elementa u delu niza koga \u010dine elementi \\(A_i, A_{i+1}, A_{i+2}, \\dots, A_N\\) koji ima vrednost  \\(2\\); ozna\u010dimo tu vrednost sa \\(next_{i,2}\\); ako takav element ne postoji onda \u0107e odgovaraju\u0107i indeks imati vrednost \\(N+1\\).</p> <p>Ovaj deo se mo\u017ee odraditi nakon u\u010ditavanja elemenata niza, a pre odgovaranja na upite.</p> <p>Kada odgovaramo na upit za par brojeva \\((L,R)\\), onda odre\u0111ujemo indeks \\(X\\) prvog elementa od pozicije \\(L\\) koji ima vrednost \\(2\\) (\\(X=next_{L,2}\\)) i indeks \\(Y\\) prvog elementa od pozicije \\(X\\) koji ima vrednost \\(1\\) (\\(Y=next_{X,1}\\)). Mo\u017ee se pokazati da \u0107e odgovor biti \"DA\" samo u slede\u0107im slu\u010dajevima</p> <ul> <li>ako je \\(Y&gt;R\\) (jer su elementi od pozicije \\(L\\) do pozicije \\(X-1\\) jednaki \\(1\\), a od pozicije \\(X\\) pa do pozicije \\(Y-1\\geq R\\) jednaki \\(2\\); </li> <li>ako je \\(next_{Y+1,1}&gt;R\\), jer se mo\u017ee izbaciti jedinica sa pozicije \\(Y\\), i tako \u0107e se dobiti blok dvojki od pozicije \\(X\\) pa do pozicije \\(next_{Y+1,1}-1 \\geq R\\) i podniz \u0107e biti sortiran;</li> <li>ako je \\(Y=X+1\\) i  \\(next_{next_{Y,2},1}&gt;R\\), jer se na poziciji \\(X\\) nalazi broj \\(2\\), ali odmah nakon toga broj \\(1\\), a nakon prve dvojke posle pozicije \\(Y\\) sledi blok dvojki koji se zavr\u0161ava nakon pozicije \\(R\\); brisanjem dvojke na poziciji \\(X\\) dobija se sortiran podniz.</li> </ul> <p>U svim ostalim slu\u010dajevima, odgovor je \"NE\". Matrica \\(next\\) mo\u017ee biti izra\u010dunata u vremenu \\(\\Theta(N)\\), a kako je slo\u017eenost odgovora na svaki upit \\(\\Theta(1)\\), to je ukupna slo\u017eenost \\(\\Theta(N+Q)\\).</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/04_poklon/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Za svaki indeks \\(i\\) (\\(1\\leq i \\leq N\\)) se mo\u017ee odrediti najve\u0107i indeks \\(j\\) tako da je podniz od indeksa \\(i\\) do indeksa \\(j\\) neopadaju\u0107i:  $$  A_i \\leq A_{i+1} \\leq A_{i+2} \\leq \\dotsb \\leq A_{j-1} \\leq A_j.  $$  Ozna\u010dimo indeks \\(j\\) koji ima gornju osobinu  sa \\(last_i\\). Primetimo da je \\(last_i = N\\) ili je \\(A_{last_i} &gt; A_{last_i+1}\\).  Tada \u0107e odgovor na upit za par indeksa \\((L,R)\\) biti \"DA\" u slede\u0107im slu\u010dajevima:</p> <ul> <li>ako je \\(last_L \\geq R-1\\) (jer mo\u017ee biti obrisan \\(A_R\\))</li> <li>ako je \\(last_{last_L+1} \\geq R\\) i \\(last_L = L\\) ili je \\(A_{last_L-1} \\leq A_{last_L+1}\\), jer se brisanjem elementa  \\(A_{last_L}\\) dobija sortiran podniz.</li> <li>ako je \\(last_{last_L+2} \\geq R\\) i \\(A_{last_L} \\leq A_{last_L+2}\\), jer se tada brisanjem elementa \\(A_{last_L+1}\\) dobija sortiran podniz. </li> </ul> <p>Elementi niza \\(last\\) mogu biti sra\u010dunati kori\u0161enjem slede\u0107ih \u010dinjenica:</p> <ul> <li>\\(last_N = N\\),</li> <li>\\(last_i = last_{i+1}\\) ako je \\(A_i \\leq A_{i+1}\\) i \\(last_i = i\\), ako je \\(A_i &gt; A_{i+1}\\), za \\(i=N-1, N-2, \\dots, 2, 1\\). Prema tome, slo\u017eenost izra\u010dunavanja elemenata niza \\(last\\) je \\(\\Theta(N)\\), a budu\u0107i da je slo\u017eenost odgovaranja na jedan upit \\(\\Theta(1)\\), slo\u017eenost kompletnog re\u0161enja je \\(\\Theta(N+Q)\\).</li> </ul>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/05_krompiri/","title":"A2 - Krompiri","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Igor Pavlovi\u0107 Igor Pavlovi\u0107 Igor Pavlovi\u0107 Nikola Pe\u0161i\u0107"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/05_krompiri/#resenje-kada-nm-a_i-leq-c_i-leq-b_i-leq-d_i","title":"Re\u0161enje kada \\(N=M, a_i \\leq c_i \\leq b_i \\leq d_i\\)","text":"<p>U ovom podzadatku je dovoljno du\u017e dijagonale posaditi \\(b_i\\) krompira.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/05_krompiri/#resenje-kada-a_i-b_i-c_i-d_i","title":"Re\u0161enje kada \\(a_i = b_i, c_i = d_i\\)","text":"<p>Za re\u0161avanje ovog podzadatka mo\u017eemo primeniti tehniku dva pokaziva\u010da. Pokaziva\u010d \\(i\\) iterira po redovima, a pokaziva\u010d \\(j\\) iterira po kolonama. Ako je \\(b_i=0\\) ili \\(d_i=0\\) tada uve\u0107amo \\(i\\) to jest \\(j\\) za 1. Ako je \\(b_i \\neq 0\\) i \\(d_j \\neq 0\\) posadi \\(min(b_i,d_j)\\) krompira na polje \\(i, j\\) i smanji \\(b_i\\) i \\(d_j\\) za \\(min(b_i,d_j)\\).</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/05_krompiri/#resenje-kada-a_i-b_i","title":"Re\u0161enje kada \\(a_i = b_i\\)","text":"<p>Ovaj podzadatak mo\u017eemo re\u0161iti analogno prethodnom. U ovom podzadatku je potrebno iterirati po kolonama 2 puta. Prvi put postavljamo broj krompira u svakoj koloni na donju granicu, a drugi put na gornju i a\u017euriramo broj krompira u svakoj koloni. Kada zavr\u0161imo sa iteracijom po redovima tada prekidamo iteraciju po kolonama tako\u0111e. Nakon \u0161to smo odredili broj krompira u svakoj koloni mo\u017eemo primeniti re\u0161enje iz prethodnog podzadatka.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/05_krompiri/#resenje-kada-n-1","title":"Re\u0161enje kada \\(N = 1\\)","text":"<p>U slu\u010daju da va\u017ei \\(\\sum_{i=1}^{M} d_i \\leq b_1\\) dovoljno je samo u \\(i\\)-toj koloni posaditi \\(d_i\\) krompira.</p> <p>U suprotnom se re\u0161enje ovog podzadatka svodi na re\u0161enje prethodnog kada donju granicu postavimo da bude jednaka gornjoj (jer je neophodno posaditi \\(b_i\\) krompira u prvom redu kako bismo maksimizovali prinos).</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/05_krompiri/#resenje-kada-a_i-c_i-0","title":"Re\u0161enje kada \\(a_i = c_i = 0\\)","text":"<p>Ovaj podzadatak mo\u017eemo re\u0161iti gramzivom metodom i tehnikom 2 pokaziva\u010da. Pokaziva\u010d \\(i\\) iterira po redovima, a pokaziva\u010d \\(j\\) iterira po kolonama. Ako je \\(b_i=0\\) ili \\(d_i=0\\) tada uve\u0107amo \\(i\\) to jest \\(j\\) za 1. Ako je \\(b_i \\neq 0\\) i \\(d_j \\neq 0\\) posadi \\(min(b_i,d_j)\\) krompira na polje \\(i, j\\) i smanji \\(b_i\\) i \\(d_j\\) za \\(min(b_i,d_j)\\). Primetimo da je ovo re\u0161enje identi\u010dno podzadatku 2 samo \u0161to je u ovom slu\u010daju neophono zavr\u0161iti iteraciju po kolonama \u010dim se zavr\u0161i iteracija po vrstama i obrnuto. U podzadatku 2 se ove dve iteracije zar\u0161avaju istovremeno s obirom da re\u0161enje mora postojati.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/05_krompiri/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Primetimo prvo da nije mogu\u0107e posaditi vi\u0161e od \\(min(\\sum_{i=1}^{N} b_i,\\sum_{j=1}^{M} d_i)\\) krompira ukupno. Dakle ukoliko konstrui\u0161emo re\u0161enje sa ta\u010dno \\(min(\\sum_{i=1}^{N} b_i,\\sum_{j=1}^{M} d_i)\\) krompira onda smo tako\u0111e dostigli maksimalan mogu\u0107i prinos.</p> <p>Bez umanjenja op\u0161tosti pretpostavimo da va\u017ei \\(\\sum_{i=1}^{N} b_i \\leq \\sum_{j=1}^{M} d_i\\). Da bismo maksimizovali prinos potrebno je u svakom redu posaditi \\(b_i\\) krompira. Po\u0161to nam je poznat broj krompira koji je potrebno posaditi u svakom redu sada se re\u0161enje zadatka svodi na re\u0161enje podzadatka 3. Primetimo tako\u0111e da ukuliko postoji neko re\u0161enje tada va\u017ei \\(\\sum_{j=1}^{M} c_i \\leq \\sum_{i=1}^{N} b_i\\), odakle sledi da mogu\u0107e konstruisati re\u0161enje sa ta\u010dno \\(min(\\sum_{i=1}^{N} b_i,\\sum_{j=1}^{M} d_i)\\) primenom algoritma iz podzadatka 3.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/06_sdneirf/","title":"A3 - Sdneirf","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Jovan Bengin Aleksa Milisavljevi\u0107"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/06_sdneirf/#analiza","title":"Analiza","text":"<p>Primetimo prvo da nikada ne moramo napraviti potez sa nekim \\(X\\) koje nije stepen dvojke. Naime, umesto jednog poteza sa \\(X = 2^{i_1} + 2^{i_2} + 2^{i_3} + .... + 2^{i_k}\\), \\(i_1 &lt; i_2 &lt; ... &lt; i_k\\), mo\u017eemo da napravimo \\(k\\) poteza nad istim putem sa vrednostima \\(2^{i_1}, 2^{i_2}, ... , 2^{i_k}\\). Dakle, mo\u017eemo pretpostaviti da \u0107e \\(X\\) koje biramo uvek biti oblika \\(2^j\\). </p> <p>Po\u0161to sada nijedan potez nad nekim bitom ne uti\u010de na druge, mo\u017eemo za svaki bit nezavisno na\u0107i optimalno re\u0161enje i na kraju ih sva sumirati. Formalnije, defini\u0161imo matrice \\(B_0, B_1, ... , B_K\\), gde je \\(B_{x, i, j} = 1\\) ako \\(A_{i, j}\\) sadr\u017ei \\(x\\)-ti bit, u suprotnom je \\(B_{x, i, j} = 0\\). Ako je \\(C_i\\) optimalno re\u0161enje za matricu \\(B_i\\), onda je optimalno re\u0161enje za matricu \\(A\\) jednako \\(\\sum\\limits_{i=0}^{K} 2^i*C_i\\). Po\u0161to va\u017ei \\(A_{i,j} \\leq 10^9 &lt; 2^{30}\\), dovoljno je uzeti \\(K = 29\\) (jer bi matrice B_i za ve\u0107e vrednosti \\(i\\) sadr\u017eale samo nule, pa bi i \\(C_i\\) bilo \\(0\\)).</p> <p>Dalje \u0107emo razmatrati samo matrice \u010diji su svi \u010dlanovi \\(0\\) ili \\(1\\), a poteze vr\u0161imo isklju\u010divo sa \\(X = 1\\). Cilj nam je da dobijemo matricu sa minimalnim brojem jedinica.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/06_sdneirf/#resenje-kada-je-n-m-leq-2","title":"Re\u0161enje kada je \\(N, M \\leq 2\\)","text":"<p>Ako je \\(N = 1\\) ili \\(M = 1\\), postoji ta\u010dno jedan put od \\((1, 1)\\) do \\((N, M)\\). Ako je \\(N = M = 2\\), postoje dva puta. Po\u0161to postoje najvi\u0161e dva razli\u010dita puta, time i najvi\u0161e \u010detiri razli\u010dite kombinacije poteza (po\u0161to se dva ista poteza skra\u0107uju), mo\u017eemo za svaku kombinaciju proveriti kako \u0107e matrica izgledati, i uzeti onu sa najmanjom rezultuju\u0107om sumom.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/06_sdneirf/#resenje-kada-je-n-1","title":"Re\u0161enje kada je \\(N = 1\\)","text":"<p>Po\u0161to postoji samo jedan mogu\u0107 put, postoje samo dva mogu\u0107a niza poteza: jedan gde ne radimo ni\u0161ta (tada \u0107e matrica sadr\u017eati \\(a\\) jedinica), i drugi gde put prolazi kroz celu matricu (tada \u0107e matrica sadr\u017eati \\(M - a\\) jedinica), pa \u0107e re\u0161enje biti \\(min(a, M - a)\\).</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/06_sdneirf/#resenje-kada-je-n-2","title":"Re\u0161enje kada je \\(N = 2\\)","text":"<p>Grupisa\u0107emo polja tako da sva polja sa istom \\(i + j\\) vrednosti budu u istoj grupi. Svaka grupa \u0107e onda zapravo biti dijagonala koja ide od dole-levo ka gore-desno, i sadr\u017ea\u0107e najvi\u0161e dva polja.</p> <p>Primetimo da svaki put od  \\((1, 1)\\) do \\((N, M)\\) sadr\u017ei po ta\u010dno jedan element iz svake grupe. To zna\u010di da ako je ukupan xor svih elemenata neke grupe jednak \\(0\\), posle jednog poteza bi\u0107e \\(1\\), i obrnuto. Neka na po\u010detku \\(a\\) dijagonala ima xor jednak nuli, a \\(b\\) dijagonala xor jednak jedinici. Onda \u0107e nakon jednog poteza biti \\(b\\) dijagonala sa xor \\(0\\), i \\(a\\) sa \\(1\\), nakon drugog poteza \u0107e ponovo biti \\(a\\) sa \\(0\\) i \\(b\\) sa \\(1\\) itd. Po\u0161to svaka dijagonala koja ima xor jednak jedinici mora da sadr\u017ei barem jednu jedinicu, vidimo da je re\u0161enje barem \\(min(a, b)\\).</p> <p>Ispostavlja se da je ovaj minimum uvek mogu\u0107e posti\u0107i. Bez umanjenja op\u0161tosti, neka je \\(a \\geq b\\) (\\(b &lt; a\\) se radi na isti na\u010din, samo \u0161to se na po\u010detku uradi bilo koji potez). Pokaza\u0107emo da je dijagonale sa xor-om \\(1\\) (kojih ima \\(b\\)) mogu\u0107e transformisati tako da imaju ta\u010dno jednu jedinicu, a one sa xor-om \\(0\\) tako da nemaju nijednu.</p> <p>Za dijagonale koje sadr\u017ee jedno polje je o\u010digledno: ako im je xor \\(0\\), onda je njihov jedini element \\(0\\), uostalom je \\(1\\). Dijagonale koje sadr\u017ee dva polja i imaju xor \\(1\\) tako\u0107e sadr\u017ee ta\u010dno jednu jedinicu. Ostalo nam je da poka\u017eemo da, ako imamo dijagonalu koja sadr\u017ei dve jedinice, mo\u017eemo obe pretvoriti u nule a da ne menjamo ostale elemente. Neka su elementi te dijagonale \\((2, i)\\) i \\((1, i + 1)\\). Napravi\u0107emo dva poteza: u prvom biramo put \\((1, 1), (1, 2), ... , (1, i), (1, i+1), (2, i+1), (2, i+2), ..., (2, M)\\), a u drugom put \\((1, 1), (1, 2), ... , (1, i), (2, i), (2, i+1), (2, i+2), ... , (2, M)\\). Primetimo da su jedina polja koja se nalaze u ta\u010dno jednom putu ba\u0161 \\((2, i)\\) i \\((1, i + 1)\\). To zna\u010di da su to jedina dva polja \u010dija \u0107e se vrednost obrnuti, pa tako od dve jedinice dobijamo dve nule.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/06_sdneirf/#resenje-kada-su-sve-pocetne-vrednosti-0-ili-1","title":"Re\u0161enje kada su sve po\u010detne vrednosti \\(0\\) ili \\(1\\)","text":"<p>Po\u0161to smo po\u010detnu matricu \\(A\\) podelili na matrice sa vrednostima \\(0\\) i \\(1\\), ovaj podzadatak se re\u0161ava na isti na\u010din kao glavno re\u0161enje. Ipak, mogu\u0107e ga je uraditi i bez znanja da mo\u017eemo nezavisno nalaziti re\u0161enje za svaki bit.</p>"},{"location":"takprog/2022%20%7C%202023/03_Okru%C5%BEno/06_sdneirf/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Sli\u010dno kao u re\u0161enju za \\(N = 2\\), grupisa\u0107emo polja po dijagonali. Ovde se tako\u0111e ispostavlja da, ako imamo \\(a\\) dijagonala sa xor \\(0\\) i \\(b\\) sa xor \\(1\\), re\u0161enje je \\(min(a, b)\\). Ovo mo\u017eemo pokazati na sli\u010dan na\u010din kao za \\(N = 2\\), samo \u0161to sada moramo za svaku dijagonalu sa neparnim brojem jedinica dokazati da je mo\u017eemo transformisati da ima jednu jedinicu, a za one sa parnim brojem jedinica da nemaju nijednu.</p> <p>Na sli\u010dan na\u010din kao u slu\u010daju \\(N = 2\\), mo\u017eemo u dva poteza obrnuti vrednosti neka dva polja \\((i, j)\\) i \\((i -1, j + 1)\\). Ako dijagonalu predstavimo kao niz, ova operacija nam zapravo zna\u010di da obr\u0107emo vrednosti neka dva susedna polja. Upotrebom ove operacije treba da dobijemo minimalan broj jedinica.</p> <p>Ovo se mo\u017ee uraditi na slede\u0107i na\u010din: iteriramo kroz niz sleva nadesno, i ako nai\u0111emo na neki element koji je \\(1\\) (a nije poslednji), jednom operacijom obr\u0107emo njega i slede\u0107i element. Na kraju \u0107e svi elementi niza biti \\(0\\), sem eventualno poslednjeg. Po\u0161to na\u0161a operacija ne menja parnost broja jedinica, ako je na po\u010detku bio neparan broj jedinica, poslednji element \u0107e biti \\(1\\), uostalom \u0107e biti \\(0\\), pa smo dokazali da je mogu\u0107e dosti\u0107i \u017eeljeni minimum.</p> <p>Ukupna slo\u017eenost \u0107e biti \\(O(NMlog(max(A_{i,j}))\\), jer za svaki bit re\u0161enje nalazimo u \\(O(NM)\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/01_bakterijada/","title":"B1 - Bakterijada","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Marko Milenkovi\u0107 Marko Milenkovi\u0107 Marko Milenkovi\u0107 Dragan Uro\u0161evi\u0107"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/01_bakterijada/#resenje-kada-t-1-i-n-leq-20","title":"Re\u0161enje kada \\(T = 1\\) i \\(N \\leq 20\\)","text":"<p>U ovom podzadatku je dovoljno u svakom potezu generisati sve mogu\u0107e podele bakterija, njih \\(2^N\\). Svaka bakterija mo\u017ee da u\u010destvuje u najvi\u0161e \\(N\\) merenja. Vremenska slo\u017eenost je \\(O(N2^N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/01_bakterijada/#resenje-kada-sve-bakterije-imaju-istu-tezinu","title":"Re\u0161enje kada sve bakterije imaju istu te\u017einu","text":"<p>Mo\u017eemo uo\u010diti da je optimalno odvajati po jednu bakteriju u jednu grupu i preostale u drugu. Na ovaj na\u010din maksimizujemo ukupnu sumu (dokaz ostavljamo \u010ditaocu za ve\u017ebu - pomo\u0107: kada quick sort radi najsporije?). Suma \u0107e iznositi \\(X(N + N + N - 1 + N - 2 + \\ldots + 3 + 2) = X\\left(\\frac{N(N+1)}{2} + N - 1\\right)\\), gde je \\(X\\) te\u017eina bakterija. Vremenska slo\u017eenost je \\(O(1)\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/01_bakterijada/#resenje-kada-1-leq-n-leq-1000","title":"Re\u0161enje kada \\(1 \\leq N \\leq 1000\\)","text":"<p>Sli\u010dno, kao u prethodnom podzadatku, odvaja\u0107emo po jednu bakteriju i to ba\u0161 onu sa najmanjom te\u017einom (dokaz sli\u010dan kao u prethodnom podzadatku). Posle svakog merenja nalazi\u0107emo najlak\u0161u bakteriju i shodno tome ra\u010dunati sumu, a deljenja \u0107e biti ta\u010dno \\(N\\). Vremenska slo\u017eenost je \\(O(N^2)\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/01_bakterijada/#resenje-bez-dodatnih-ogranicenja","title":"Re\u0161enje bez dodatnih ograni\u010denja","text":"<p>Umesto simulacije biranja u prethodnom podzadatku, lak\u0161e je izanalizirati da \u0107e se najlak\u0161a bakterija brojati dva puta, druga najlak\u0161a tri puta, ..., druga najte\u017ea \\(N\\) puta i najte\u017ea \\(N\\) puta. Vremenska slo\u017eenost je \\(O(N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/02_xor_fabrika/","title":"B2 - XOR fabrika","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Marko \u0160i\u0161ovi\u0107 Pavle Martinovi\u0107 Igor Pavlovi\u0107"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/02_xor_fabrika/#resenje-kada-su-sve-operacije","title":"Re\u0161enje kada su sve operacije +","text":"<p>U ovom podzadatku va\u017ei da je svaka operacija \\(+1\\), tako da \u0107e sve \u0161to \u0107e se desiti \\(+1\\) ta\u010dno \\(R-L+1\\) puta, odnosno potrebno je ispisati \\(X+R-L+1\\)</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/02_xor_fabrika/#resenje-kada-nqleq-2000","title":"Re\u0161enje kada \\(N,Q\\leq 2000\\)","text":"<p>U ovom podzadatku naprosto mo\u017eemo da idemo redom za svaki upit i izsimuliramo sve operacije za slo\u017eenost \\(O(NQ)\\)</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/02_xor_fabrika/#resenje-kada-su-sve-operacije_1","title":"Re\u0161enje kada su sve operacije ^","text":"<p>U ovom podzadatku re\u0161avamo sli\u010dno kao prvi podzadatak. Primetimo da svaka operacija broj ksoruje sa \\(1\\), a dva ksora se poni\u0161tavaju, tako da je bitna samo parnost \\(R-L+1\\): ako je parno onda ispi\u0161emo \\(X\\), a u suprotnom \\(X\\text{ xor }1\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/02_xor_fabrika/#resenje-kada-ima-najvise-500-operaicja","title":"Re\u0161enje kada ima najvi\u0161e \\(500\\) operaicja ^","text":"<p>Podelimo na\u0161 interval na (najvi\u0161e \\(500\\)) intervala sa svim operacijama +. Svaki od njih simuliramo po prvom podzadatku, i onda samo primenimo po jednu operaciju ^. Slo\u017eenost \\(O(500Q)\\)</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/02_xor_fabrika/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Primetimo da nam se u svakom potezu zapravo menja parnost. Tako da \u0107e svaka operacija biti \\(+1\\) osim nekih ^ operacija koja \u0107e biti \\(-1\\) ako je tada broj na kom vr\u0161imo inicijalne poteze neparan. Me\u0111utim, ono \u0161to treba primetiti da nam je onda samo potreban broj ^ na mestima odre\u0111ene parnosti  (ta odre\u0111ena parnost zavisi od \\(L\\) i \\(X\\): ako je \\(X\\) parno onda iste parnost kao \\(L\\) nam treba, a u suprotnom suprotna parnost). Zato je dovoljno samo zapamtiti dva niza parcijalnih suma: za parne i neparne pozicije broj operacija ^, i onda klasi\u010dnim oduzimanjem desnog kraja od levog na\u0111emo koliko ih je u intervalu. Slo\u017eenost \\(O(N+Q)\\) </p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/03_kirbi/","title":"B3 - Kirbi","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Marko Milenkovi\u0107 Marko Milenkovi\u0107 Marko Milenkovi\u0107 Dimitrije Erdeljan"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/03_kirbi/#resenje-kada-1-leq-nmp-leq-5","title":"Re\u0161enje kada \\(1 \\leq N,M,P \\leq 5\\)","text":"<p>U ovom podzadatku koristimo to da su sve vrednosti male brojke. Mo\u017eemo izbrisati svako prljavo polje i zatim isprobati sve putanje da vidimo koja sadr\u017ei najve\u0107i broj uprljanih polja i da li se to razlikuje od po\u010detnog maksimalnog broja polja koje Kirbi mo\u017ee da o\u010disti. Vremenska slo\u017eenost je \\(O(TP2^{N+M})\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/03_kirbi/#resenje-kada-n-2-ili-m-2","title":"Re\u0161enje kada \\(N = 2\\) ili \\(M = 2\\)","text":"<p>Posmatra\u0107emo slu\u010daj \\(N=2\\), jer se drugi slu\u010daj analogno re\u0161ava. Primetimo da \u0107e se Kirbi ta\u010dno jednom spustiti u drugi red. Pamtimo prefiksni niz prljvih polja za prvi red i pamtimo sufiksni niz prljavih polja za drugi red. Maksimalan broj polja koje Kirbi mo\u017ee da o\u010disti je \\(S = \\max_{1 \\leq i \\leq M}\\{pref_i + suf_i\\}\\). Neka je \\(i_{min}\\) prva kolona u kojoj izraz \\(pref_{i_{min}} + suf_{i_{min}}\\) dosti\u017ee vrednost \\(S\\) i neka je \\(i_{max}\\) poslednja kolona u kojoj izraz \\(pref_{i_{max}} + suf_{i_{max}}\\) dosti\u017ee vrednost \\(S\\). Tra\u017eeno re\u0161enje je \\(pref_{i_{min}} + suf_{i_{max}}\\). Vremenska slo\u017eenost je \\(O(T(P+M))\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/03_kirbi/#resenje-kada-1-leq-nmp-leq-100","title":"Re\u0161enje kada \\(1 \\leq N,M,P \\leq 100\\)","text":"<p>Neka je \\(S\\) ponovo maksimalan broj polja koje Kirbi mo\u017ee da o\u010disti u startu. To mo\u017eemo izra\u010dunati standardnim dinami\u010dkim programiranjem. Stanje \\(dp_{i,j}\\) predstavlja maksimalan broj polja koje Kirbi mo\u017ee da o\u010disti kre\u0107u\u0107i sa polja \\((1,1)\\) do polja \\((i,j)\\). Krenemo \"redom\" da obilazimo matricu po redovima, pa po kolonama (kao u ulazu) i vr\u0161imo prelaz \\(dp_{i,j} = \\max(dp_{i-1,j}, dp_{i,j-1}) + a_{i,j}\\), gde je \\(a_{i,j}\\) binarni indikator da li je polje \\((i,j)\\) urljano (\\(1\\) ako jeste, \\(0\\) ako nije). Sada mo\u017eemo da izbacujemo jedno po jedno uprljano polje i ra\u010dunamo iznova celu \\(dp\\) matricu i vidimo kada je vrednost \\(dp_{N,M} &lt; S\\). Vremenska slo\u017eenost \\(O(TPNM)\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/03_kirbi/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Mo\u017eemo primetiti da kada posmatramo redom polja koja je Kirbi o\u010distio, njihove kolone formiraju neopadaju\u0107i niz. Odnosno, ukoliko sortiramo uprljana polja po redovima, maksimalan broj polja koja Kirbi mo\u017ee da o\u010disti je najdu\u017ei neopadaju\u0107i podniz kolona ovog niza. Dati problem je ekvivalentan nala\u017eenju najdu\u017eeg rastu\u0107eg podniza (\\emph{Longest increasing subsequence}, ili skra\u0107eno LIS), \u0161to je poznat problem i mo\u017ee se re\u0161iti/implementirati u vremenskoj slo\u017eenosti \\(O(P\\log P)\\). Ono \u0161to nama treba jesu prefiksni i sufiksni LIS nizovi. Formalno, \\(pref_i\\) predstavlja \\(LIS\\) od po\u010detka niza do \\(i\\)-tog elementa, ali tako da on zasigurno figuri\u0161e u \\(LIS\\)-u. Sli\u010dno, \\(suf_i\\) predstavlja \\(LIS\\) niza od \\(i\\)-tog elementa do kraja niza, tako da \\(i\\)-ti element u\u010destvuje u \\(LIS\\)-u. Za \\(i\\)-ti element niza uprljanih polja va\u017ei da je deo nekog od putanja koje sadr\u017ee najve\u0107i broj uprljanih polja ako i samo ako je \\(pref_i + suf_i - 1 = S\\). Sa druge strane, element niza pripada svim takvim putanjama ako i samo ako dodatno va\u017ei i da je vrednost \\(pref_i\\) jedinstvena me\u0111u svim prefiksnim \\(LIS\\)-ovima. Potrebno je samo ispisati broj takvih polja. Vremenska slo\u017eenost je \\(O(TP\\log P)\\). </p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/04_zivot_u_gradu/","title":"A1 - \u017divot u gradu","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Dragan Uro\u0161evi\u0107 Aleksa Milisavljevi\u0107"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/04_zivot_u_gradu/#resenje-prvog-podzadatka","title":"Re\u0161enje prvog podzadatka","text":"<p>U ovom slu\u010daju, zbog ograni\u010denja na du\u017einu veli\u010dinu table mogu\u0107e je u datom vremenskom ograni\u010denju proveriti sve puteve i odrediti za svaki od njih koliko se koncerta odr\u017eava na tom putu. Naime broj raznih putvea je \\(2^{N+M-2}\\leq 2^{18}\\). Naravno, ako je na nekom putu broj koncerta ba\u0161 \\(K\\), prekida se proveravanje puteva, ispisuje odgovor  \"DA\" i ako je potrebno ispisuje odgovaraju\u0107i put. Ako ni na jednom putu nije bilo \\(K\\) koncerta, ispisuje se odgovor \"NE\". Slo\u017eenost opisanog re\u0161enja je \\({\\mathcal O}(2^{N+M})\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/04_zivot_u_gradu/#resenje-drugog-i-treceg-podzadatka","title":"Re\u0161enje drugog i tre\u0107eg podzadatka","text":"<p>Za po\u010detak je potrebno odrediti podmatricu koju \u010dine polja na kojima se odr\u017eavaju koncerti. Nakon toga treba diskutovati (razlikovati) nekoliko slu\u010dajeva, u zavisnosti od dimenzija i pozicije podmatrice i broja \\(K\\). Mislimo da nema potrebe da izvodimo kompletnu diskusiju. Slo\u017eenost opisanog re\u0161enja je \\({\\mathcal O}(NM)\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/04_zivot_u_gradu/#resenje-cetvrtog-i-petog-podzadatka","title":"Re\u0161enje \u010detvrtog i petog podzadatka","text":"<p>Ovi podzadaci se mogu re\u0161iti primenom dinami\u010dkog programiranja. Neka je \\(dp[i][j][l]=true\\), ako postoji put od polja \\((1,1)\\) do polja \\((i,j)\\) na kome postoji \\(l\\) polja na kojima se odr\u017eava koncert i \\(dp[i][j][l]=false\\) u suprotnom. Tada je \\(dp[N][M][K]\\) odgovor na pitanje da li postoji tra\u017eeni put ili ne. Niz \\(dp\\) popunjavama (ra\u010dunamo) vrsta po vrsta:</p> <ul> <li>\\(dp[1][1][1]=true\\), ako se na polju \\((1,1)\\) odr\u017eava koncert i \\(dp[1][1][1]=false\\), ako se na polju \\((1,1)\\) ne odr\u017eava koncert.</li> <li>\\(dp[1][1][0]=true\\), ako se na polju \\((1,1)\\) ne odr\u017eava koncert i \\(dp[1][1][0]=false\\), ako se na polju \\((1,1)\\) odr\u017eava koncert.</li> <li>\\(dp[1][1][l]=false\\), za \\(2\\leq l \\leq K\\).</li> <li>Ako se na polju \\((i,j)\\)  odr\u017eava koncert, onda je \\(dp[i][j][l]=true\\), ako i samo ako je \\(dp[i-1][j][l-1]=true\\) ili \\(dp[i][j-1][l-1]=true\\) (naravno, ako je \\(i \\geq 2\\) i \\(j \\geq 2\\), u suprotnom, odgovaraju\u0107i element ne postoji). Primetimo tako\u0111e da je u ovom slu\u010daju \\(dp[i][j][0]=false\\).</li> <li>Ako se na polju \\((i,j)\\)  ne odr\u017eava koncert, onda je \\(dp[i][j][l]=true\\), ako i samo ako je \\(dp[i-1][j][l]=true\\) ili \\(dp[i][j-1][l]=true\\) (naravno, ako je \\(i \\geq 2\\) i \\(j \\geq 2\\), u suprotnom, odgovaraju\u0107i element ne postoji).</li> </ul> <p>Ako tra\u017eeni put postoji, on se mo\u017ee rekonstrisati kori\u0161\u0107enjem niza  \\(dp\\). Naime, kre\u0107emo od polja \\((N,M)\\) i tra\u017eimo put na kome se odr\u017eava \\(K\\) koncerta. Ako se nalazimo na polju \\((i,j)\\) i tra\u017eimo put na kome se odr\u017eava \\(l\\) koncerta, onda mora biti \\(dp[i][j][l]=true\\) i mogu nastupiti slede\u0107a dva slu\u010daja:</p> <ul> <li>Na polju \\((i,j)\\) se od\u017eava koncert. Tada broj koncerata smanjujemo za jedan, tj. \\(l\\) se smanjuje za jedan (\\(l \\leftarrow l-1\\)) i pomeramo se na polje levo ili gore (ako postoji) za koje odgovaraju\u0107i element niza \\(dp\\) (\\(dp[i-1][j][l-1]\\) ili \\(dp[i][j-1][l-1]\\)) ima vrednost \\(true\\).</li> <li>Na polju \\((i,j)\\) se ne od\u017eava koncerta. Tada broj kocerta ostaje nepromenjen, a pomeramo se na polje levo ili gore (ako postoji) za koje odgovaraju\u0107i element niza \\(dp\\) (\\(dp[i-1][j][l]\\) ili \\(dp[i][j-1][l]\\)) ima vrednost \\(true\\).</li> <li>Postupak prekidamo kada stignemo do polja \\((1,1)\\).</li> </ul> <p>Slo\u017eenost opisanog re\u0161enja je odre\u0111ena slo\u017eeno\u0161\u0107u popunjavanja niza \\(dp\\) i iznosi \\({\\mathcal O}(NMK)\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/04_zivot_u_gradu/#resenje-sestog-podzadatka","title":"Re\u0161enje \u0161estog podzadatka","text":"<p>U ovom slu\u010daju mo\u017eemo formirati graf u kome su \u010dvorovi polja na koja je podeljen grad, a ivice postoje od polja do njegovih suseda levo i dole. Polja na kojima se odr\u017eavaju koncerti su zabranjena i na njih se ne mo\u017ee stati. Tra\u017eeni put postoji, ako postoji put u grafu (put zaobilazi zabranjena polja). Taj put mo\u017eeo prona\u0107i, na primer, primenom obilaska u \u0161irinu. Za svako polje mo\u017eemo pamtiti odakle smo stigli i na taj na\u010din rekonstruisati re\u0161enje. Slo\u017eenost opisanog re\u0161enja je  \\({\\mathcal O}(NM)\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/04_zivot_u_gradu/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Neka je \\(dp_1[i][j]\\) minimalni broj \\(l\\) takav da postoji put od polja \\((1,1)\\) do polja \\((i,j)\\), na kome se odr\u017eava \\(l\\) koncerata. Neka je \\(dp_2[i][j]\\) maksimalni broj \\(l\\) takav da postoji put od polja \\((1,1)\\) do polja \\((i,j)\\), na kome se odr\u017eava \\(l\\) koncerata. Tada za svako polje \\((i,j)\\) va\u017ei da postoji put od polja \\((1,1)\\) do polja \\((i,j)\\) na kome se odr\u017eava \\(l\\) koncerta, gde je \\(l\\) bilo koji broj izme\u0111u \\(dp_1[i][j]\\) i \\(dp_2[i][j]\\)  (\\(dp_1[i][j]\\leq l  \\leq dp_2[i][j]\\)). Naime od bilo kog po\u010detnog puta izme\u0111u dva polja se mo\u017ee sti\u0107i do bilo kog zavr\u0161nog, tako \u0161to se prelazi preko niza puteva od kojih se svaka dva uzastopna razlikuju u samo jednom polju. Kada se na putu promeni samo jedno polje i broj polja na kojima se odr\u017eava koncert se mo\u017ee promeniti (smanjiti ili pove\u0107ati) za najvi\u0161e jedan (1). Ako krenemo od puta sa minimalnim brojem koncerta prema putu sa maksimalnim brojem koncerta, pro\u0107i \u0107emo preko puteva na kojima je broj koncerta bilo koji broj izme\u0111u ta dva broja.  Zbog toga, postoji put sa ta\u010dno \\(K\\) koncerata, ako i samo ako je \\(dp_1[N][M]\\leq K  \\leq dp_2[N][M]\\). Nizove \\(dp_1\\) i \\(dp_2\\) ra\u010dunamo na sli\u010dan na\u010din kao niz \\(dp\\) u \u010detvrtom i petom podzadatku:</p> <ul> <li>Ako se na polju \\((1,1)\\) odr\u017eava koncert, onda je \\(dp_1[1][1]=dp_2[1][1]=1\\).</li> <li>Ako se na polju \\((1,1)\\) ne odr\u017eava koncert, onda je \\(dp_1[1][1]=dp_2[1][1]=0\\).</li> <li>Ako se na polju \\((i,j)\\) odr\u017eava koncert, onda je \\(dp_1[i][j]=\\min(dp_1[i-1][j],dp_1[i][j-1])+1\\) i \\(dp_2[i][j]=\\max(dp_2[i-1][j],dp_2[i][j-1])+1\\).</li> <li>Ako se na polju \\((i,j)\\) ne odr\u017eava koncert, onda je \\(dp_1[i][j]=\\min(dp_1[i-1][j],dp_1[i][j-1])\\) i \\(dp_2[i][j]=\\max(dp_2[i-1][j],dp_2[i][j-1])\\).</li> </ul> <p>Ako postoji put sa ta\u010dno \\(K\\) koncerata, onda se on rekonstrui\u0161e tako \u0161to se krene od polja \\((N,M)\\) i tra\u017ei put koji ima \\(l=K\\) koncerata. Ako se nalazimo na polju \\((i,j)\\) i tra\u017eimo put koji ima \\(l\\) koncerata (\\(dp_1[i][j]\\leq l \\leq dp_2[i][j]\\)), onda mogu nastupiti dva slu\u010daja:</p> <ul> <li>Ako se na polju \\((i,j)\\) odr\u017eava koncert, onda treba smanjiti broj koncerata \\(l\\) za jedan i pre\u0107i na polje iznad ili polje levo, tako da broj koncerata bude izme\u0111u \\(dp_1\\) i \\(dp_2\\) za to novo polje.</li> <li>Ako se na polju \\((i,j)\\) ne odr\u017eava koncert, onda se broj koncerata \\(l\\) ne menja, a treba pre\u0107i na polje iznad ili polje levo, tako da broj koncerata bude izme\u0111u \\(dp_1\\) i \\(dp_2\\) za to novo polje.</li> <li>Postupak prekidamo kada stignemo do polja \\((1,1)\\).</li> </ul> <p>Slo\u017eenost opisanog re\u0161enja je odre\u0111ena slo\u017eeno\u0161\u0107u popunjavanja nizova \\(dp_1\\) i \\(dp_2\\) i iznosi \\({\\mathcal O}(NM)\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/05_bekstvo/","title":"A2 - Bekstvo","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Aleksa Milisavljevi\u0107 Aleksa Milisavljevi\u0107 Jovan Bengin Andrej Iva\u0161kovi\u0107"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/05_bekstvo/#analiza","title":"Analiza","text":"<p>Primena \\(K\\) operacija se zapravo mo\u017ee uraditi odjednom: izbri\u0161emo najvi\u0161e \\(K\\) grana, i dodamo nove tako da nam graf ponovo postane stablo.  Primetimo da je optimalno da nove grane dodajemo na krajeve dijametara \"izrezanih\" stabala (stabla na koja smo podelili originalno stablo kada smo izbrisali neke grane) tako da od njih napravimo put. Tada \u0107e, u optimalnom re\u0161enju, krajnji dijametar stabla biti jednak sumi dijametara izrezanih stabala plus broj dodatih grana.</p> <p>Slu\u010daj \\(K=N\\) je ekvivalentan sa \\(K=N-1\\), pa \u0107emo razmatrati samo \\(0 \\leq K &lt; N\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/05_bekstvo/#resenje-prvog-i-drugog-podzadatka","title":"Re\u0161enje prvog i drugog podzadatka","text":"<p>Bira\u0107emo grane koje bri\u0161emo i za sva stabla koja nam ostanu izra\u010dunati dijametre, i te dijametre \u0107emo sumirati. Mogu\u0107ih podela u najgorem slu\u010daju ima \\(2^{N-1}\\) (svaku granu ili bri\u0161emo ili ne bri\u0161emo), a dijametar stabla mo\u017eemo na\u0107i u \\(O(N)\\) - pustimo pretragu iz nasumi\u010dnog \u010dvora, obele\u017eimo najdalji \u010dvor od njega kao prvi kraj dijametra, pustimo pretragu iz tog \u010dvora i obele\u017eimo najdalji \u010dvor kao drugi kraj dijametra. Ovaj algoritam radi jer je najdalji \u010dvor od proizvoljnog \u010dvora uvek kraj nekog dijametra, a najdalji \u010dvor od kraja dijametra je drugi kraj tog dijametra.</p> <p>Vremenska slo\u017eenost ovog algoritma je \\(O(2^NTN)\\), \u0161to prolazi prvi podzadatak. Me\u0111utim, ne moramo razmatrati svih \\(2^{N-1}\\) podela - dovoljne su samo one gde bri\u0161emo ta\u010dno \\(K\\) grana (ako smo izbrisali neki broj grana, nikad ne mo\u017eemo dobiti lo\u0161ije re\u0161enje ako izbri\u0161emo jo\u0161 neke). Ovako \u0107emo razmatrati samo \\({N \\choose K} \\leq {N \\choose N/2}\\) podela, i re\u0161enje nam lako prolazi drugi podzadatak.</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/05_bekstvo/#resenje-cetvrtog-podzadatka","title":"Re\u0161enje \u010detvrtog podzadatka","text":"<p>Po\u0161to je \\(K = 0\\), re\u0161enje je samo dijametar po\u010detnog stabla. Ovde dijametar ne moramo ni tra\u017eiti \\(O(N)\\) algoritmom: dovoljno je da iz svakog \u010dvora pustimo po pretragu.</p> <p>Vremenska slo\u017eenost: \\(O(TN)\\) ili \\(O(TN^2)\\)</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/05_bekstvo/#resenje-petog-podzadatka","title":"Re\u0161enje petog podzadatka","text":"<p>Iterira\u0107emo kroz sve grane, i za svaku u \\(O(N)\\) ra\u010dunati dijametre dva stabla koja dobijemo njenim brisanjem.</p> <p>Vremenska slo\u017eenost: \\(O(TN^2)\\)</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/05_bekstvo/#resenje-treceg-podzadatka","title":"Re\u0161enje tre\u0107eg podzadatka","text":"<p>Nije potrebno eksplicitno tra\u017eiti dijametre izrezanih stabala. Lak\u0161e nam je da uz svako izrezano stablo samo izaberemo neki put koje mu pripada - u optimalnom re\u0161enju \u0107e se svakako ispostaviti da su to dijametri.</p> <p>Defini\u0161imo \\(dp[u][k][x]\\) kao najve\u0107u mogu\u0107u sumu izabranih puteva u podstablu \u010dvora \\(u\\) ako smo u njemu primenili \\(k\\) operacija, a \\(x\\) je \\(0\\), \\(1\\), ili \\(2\\) u zavisnosti od toga koliko jo\u0161 mo\u017eemo da \"dodajemo\" na na\u0161 izabran put. Drugim re\u010dima, ako je izabran put trenutnog podstabla samo \u010dvor \\(u\\), onda na njega mo\u017eemo dodati puteve koji dolaze iz dva razli\u010dita sina, pa je \\(x = 0\\).  Ako se izabran put trenutnog podstabla zavr\u0161ava u \\(u\\), onda je \\(x=1\\), a ako je put ve\u0107 u potpunosti izabran i ne dodajemo mu ni\u0161ta, onda je \\(x=2\\).</p> <p>\\(dp[u][k][x]\\) se nalazi dinami\u010dkim programiranjem po stablu: iteriramo kroz sinove, neka je trenutni sin \\(v\\). U \\(dp[u]\\) imamo izra\u010dunat \\(dp\\) za podstablo od \\(u\\), a u \\(dp[u]\\) imamo izra\u010dunat \\(dp\\) za stablo sa\u010dinjeno od \\(u\\) i podstabala svih sinova kroz koje smo do sada iterirali. \u017delimo da \"spojimo\" \\(dp\\) vrednosti za \\(u\\) i \\(v\\), pa da u \\(dp[u]\\) posle bude izra\u010dunat \\(dp\\) za stablo kome je dodato i podstablo od \\(v\\).</p> <p>Spajanje \\(dp\\)-ova dva stabla se mo\u017ee uraditi u \\(O(N^2)\\): iteriramo kroz broj grana koje \u0107emo brisati u prvom stablu (\\(i\\)), nakon toga kroz broj grana koje bri\u0161emo u drugom (\\(j\\)), i u neki novi \\(dp\\) niz a\u017euriramo vrednosti za \\(i + j\\) ili \\(i +j +1\\) izbrisanih grana (u zavisnosti od toga da li bri\u0161emo granu od \\(u\\) do \\(v\\)). Postoji nekoliko slu\u010dajeva: da bri\u0161emo granu od \\(u\\) do \\(v\\) i dodajemo du\u017eine njihovih izabranih puteva,  da ne bri\u0161emo granu od \\(u\\) do \\(v\\) ve\u0107 na put koji se zavr\u0161ava u \\(u\\) dodajemo put koji se zavr\u0161ava u \\(v\\), ili da ne bri\u0161emo granu ali da izaberemo samo jedan od dva izabrana puta podstabala \\(u\\) i \\(v\\).</p> <p>Krajnje re\u0161enje \u0107e biti \\(max(dp[1][K][0], dp[1][K][1], dp[1][K][2]) + K\\). Ako razmatramo da svako stanje u \\(dp[u][k][0]\\) pripada i \\(dp[u][k][1]\\), i da svako stanje u \\(dp[u][k][1]\\) pripada i \\(dp[u][k][2]\\) (\u0161to zna\u010dajno olak\u0161ava implementaciju), re\u0161enje je \\(dp[1][K][2] + K\\).</p> <p>Vremenska slo\u017eenost: \\(O(TN^3)\\)</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/05_bekstvo/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Glavno re\u0161enje je isto kao za tre\u0107i podzadatak, samo \u0161to tokom spajanja podstabala ne iteriramo kroz vrednosti koje su sigurno nemogu\u0107e. Drugim re\u010dima, za sina (\\(v\\)) \u0107emo samo iterirati do veli\u010dine njegovog podstabla, a za koren podstabla (\\(u\\)) \u0107emo samo iterirati do veli\u010dine trenutnog stabla koje njegov \\(dp\\) predstavlja (jer je nemogu\u0107e izbrisati vi\u0161e grana od toga).</p> <p>Nije te\u0161ko dokazati da slo\u017eenost algoritma sada postaje \\(O(N^2)\\). Kada spajamo \\(dp\\)-ove dva stabla, iteriramo do njihovih veli\u010dina - \u0161to mo\u017eemo predstaviti kao da se svaki \u010dvor koji pripada prvom stablu uparuje sa svakim iz drugog. Po\u0161to \u0107e nakon toga svi ti \u010dvorovi pripadati istom stablu, mo\u017eemo primetiti da \u0107e svaka dva \u010dvora da se upare ta\u010dno jednom - \u0161to daje ukupno \\(O(N^2)\\) uparivanja.</p> <p>Vremenska slo\u017eenost: \\(O(TN^2)\\)</p> <p>Bonus: Re\u0161ite zadatak u \\(O(TNlogN)\\).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/06_turizam/","title":"A3 - Turizam","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Jovan Bengin Jovan Bengin Jovan Bengin Igor Pavlovi\u0107"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/06_turizam/#analiza","title":"Analiza","text":"<p>Prvo, primetimo da \u0107emo uvek posetiti neki podniz koji sadr\u017ei po\u010detno polje \\(x\\). Ako je podniz koji posetimo \\([L, R]\\), NR na kraju \u0107e biti \\(A_L \\ \\text{and} \\ A_{L+1} \\ \\text{and} \\ \\ldots{} \\ \\text{and} \\ A_R\\) (zapisa\u0107emo kao \\(f(L, R)\\)), a minimalan broj koraka da se poseti je \\(R - L + min(x - L, R - x)\\) (tako \u0161to iz po\u010detka odemo do leve granice, pa do desne, ili obrnuto).</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/06_turizam/#resenje-prvog-podzadatka","title":"Re\u0161enje prvog podzadatka","text":"<p>U ovom podzadatku mo\u017eemo iterirati kroz svaku mogu\u0107u levu i desnu granicu, i ukupnu \\(\\text{and}\\) vrednost ra\u010dunati jednim prolaskom kroz podniz.</p> <p>Ukupna slo\u017eenost: \\({\\mathcal O}(QN^3)\\)</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/06_turizam/#resenje-drugog-podzadatka","title":"Re\u0161enje drugog podzadatka","text":"<p>Isto \u0107emo iterirati kroz svaku mogu\u0107u levu i desnu granicu, ali \u0107emo \u010duvati vrednosti \\(f(L, x)\\) i \\(f(x, R)\\) i a\u017eurirati ih tokom iteracija. Sada ne moramo da iteriramo kroz ceo podniz da bismo na\u0161li \\(f(L, R)\\), ve\u0107 ga dobijemo iz sa\u010duvane dve vrednosti.</p> <p>Ukupna slo\u017eenost: \\({\\mathcal O}(QN^2)\\)</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/06_turizam/#resenje-treceg-podzadatka","title":"Re\u0161enje tre\u0107eg podzadatka","text":"<p>Za naredne podzadatke potrebna nam je jo\u0161 jedna klju\u010dna opservacija: optimalni podniz \u0107e uvek imati levu i desnu granicu u poljima gde se ukupan NR menja, tj. u \\(L\\) i \\(R\\) takvim da va\u017ei \\(f(L, x) \\neq f(L + 1, x)\\) (ili \\(L = x\\)) i \\(f(x, R) \\neq f(x, R - 1)\\) (ili \\(R = x\\)). Ovo je ta\u010dno jer, ako je na granici polje koje ne menja NR, mo\u017eemo ga samo izbaciti iz podniza.</p> <p>U ovom podzadatku je, dakle, mogu\u0107e samo nekoliko slu\u010dajeva: da direktno idemo iz \\(x\\) u najbli\u017eu nulu, da idemo iz \\(x\\) do najbli\u017ee leve jedinice i do najbli\u017ee desne dvojke (ili obrnuto), ili da, ako su \u017eeljena jedinica i dvojka sa iste strane, odemo iz \\(x\\) do dalje od njih.</p> <p>Pozicije najbli\u017ee leve i desne nule, jedinice i dvojke mo\u017eemo na\u0107i preko strukture std::set i njene funkcije upper_bound.</p> <p>Ukupna slo\u017eenost: \\({\\mathcal O}(QlogN)\\)</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/06_turizam/#resenje-cetvrtog-podzadatka","title":"Re\u0161enje \u010detvrtog podzadatka","text":"<p>Pozicije koje menjaju NR su zapravo one za koje va\u017ei da postoji neki bit koji se ne nalazi u njenom elementu, ali se nalazi u elementima na svim pozicijama od nje do \\(x\\).</p> <p>Za svaki bit mo\u017eemo jednim prolaskom kroz niz na\u0107i najbli\u017eu levu i desnu poziciju \u010diji element ne sadr\u017ei taj bit, neka su za \\(i\\)-ti bi te dve pozicije \\(l_i\\) i \\(r_i\\), a na\u0161 interval mora da sadr\u017ei ili jednu ili drugu. Drugim re\u010dima, uslov mo\u017eemo da formuli\u0161emo kao: ako je leva granica ve\u0107a od \\(l_i\\), onda je desna granica ve\u0107a jednaka \\(r_i\\). Zato mo\u017eemo da iteriramo kroz sortiran niz potencijalnih levih granica (kojih ima \\(log(A_i)\\)) i da odr\u017eavamo trenutnu minimalnu desnu granicu, i tako nalazimo minimalno re\u0161enje.</p> <p>Slo\u017eenost ovog algoritma je  \\({\\mathcal O}(QNlog(A_i))\\), \u0161to bi uz pokoju optimizaciju pro\u0161lo. Me\u0111utim, nala\u017eenje levih i desnih granica mo\u017ee da se uradi u \\({\\mathcal O}(N + log(A_i))\\) umesto \\({\\mathcal O}(Nlog(A_i))\\), tako \u0161to po\u010dnemo iz \\(x\\) i kre\u0107emo se levo ili desno (u zavisnosti od toga koju granicu nalazimo), \u010duvaju\u0107i trenutnu \\(\\text{and}\\) vrednost tog intervala. Kada se ta vrednost promeni, iteriramo kroz one bitove gde se promenila i za njih odre\u0111ujemo da im je granica na toj poziciji.</p> <p>Ukupna slo\u017eenost: \\({\\mathcal O}(Q(N + log(A_i)))\\)</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/06_turizam/#resenje-petog-podzadatka","title":"Re\u0161enje petog podzadatka","text":"<p>U ovom podzadatku \u0107emo br\u017ee nalaziti pozicije nula: za svaki bit \u010duvamo niz pozicija \u010diji elementi nemaju taj bit. Sada mo\u017eemo binarnom pretragom da brzo na\u0111emo \u017eeljene elemente.</p> <p>Ukupna slo\u017eenost: \\({\\mathcal O}(Qlog(N)log(A_i))\\)</p>"},{"location":"takprog/2022%20%7C%202023/04_Dr%C5%BEavno/06_turizam/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Glavno re\u0161enje se radi na isti na\u010din kao peti podzadatak, samo \u0161to se umesto niza pozicija koristi struktura std::set, koja se lako mo\u017ee a\u017eurirati u slu\u010daju doga\u0111aja prvog tipa.</p> <p>Ukupna slo\u017eenost: \\({\\mathcal O}(Qlog(N)log(A_i))\\)</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/01_operacija_nad_glistom/","title":"1 - Operacija nad glistom","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Marko \u0160i\u0161ovi\u0107 Dragan Uro\u0161evi\u0107 Vladimir Milenkovi\u0107"},{"location":"takprog/2022%20%7C%202023/05_SIO/01_operacija_nad_glistom/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Primetimo da su operacije razdvajanja i spajanja uzajamno inverzne (tj. iverzne jedna drugoj), tako da ako neka dva dela spojimo, nikad ih vi\u0161e ne\u0107emo razdvajati. U poslednjem potezu znamo da moramo da spojimo dva dela koji imaju jednake du\u017eine, ili dva dela od kojih je levi za jedan kra\u0107i od desnog (tj. du\u017eine delova su \\(\\left\\lfloor\\frac{S}{2}\\right\\rfloor\\) i \\(\\left\\lceil\\frac{S}{2}\\right\\rceil\\), gde je \\(S\\) ukupna du\u017eina gliste). Zbog toga treba da postoji indeks \\(k\\), tako da je suma du\u017eina prvih \\(k\\) delova jednaka \\(\\left\\lfloor\\frac{S}{2}\\right\\rfloor\\), a suma du\u017eina  preostalih delova iznosi \\(\\left\\lceil\\frac{S}{2}\\right\\rceil\\). Ako ne postoji takav indeks \\(k\\), onda se odre\u0111uje indeks \\(k\\) tako da je $$ \\sum_{i=1}^{k-1} a_i&lt; \\left\\lfloor\\frac{S}{2}\\right\\rfloor \\quad \\text{i} \\quad \\sum_{i=1}^{k} a_i &gt;  \\left\\lceil\\frac{S}{2}\\right\\rceil. $$ Nakon toga se deo sa indeksom \\(k\\) deli sve dok se ne dobije niz u kome postoji indeks \\(l\\), takav da je $$ \\sum_{i=1}^{l} a_i = \\left\\lfloor\\frac{S}{2}\\right\\rfloor. $$ To posti\u017eemo tako \u0161to svaki put delimo deo sa indeksom  \\(k'\\) za koji va\u017ei $$ \\sum_{i=1}^{k'-1} a_i &lt; \\left\\lfloor\\frac{S}{2}\\right\\rfloor \\quad \\text{i} \\quad \\sum_{i=1}^{k'} a_i &gt; \\left\\lceil\\frac{S}{2}\\right\\rceil. $$</p> <p>Kada dobijemo niz delova (koji ima \\(n'\\) delova) za koji postoji indeks \\(l\\) takav da je $$ \\sum_{i=1}^{l} a_i = \\left\\lfloor\\frac{S}{2}\\right\\rfloor. $$, onda raekrzivno pozivamo funkciju koja odre\u0111uje minimalni broj operacija potreban da se spoje prvih \\(l\\) delova u jedan deo i funciju koja odre\u0111uje minimalan broj operacija potreban da se spoji poslednjih \\(n'-l\\) delova  u jedan deo. Na kraju dva tako dobijena dela \u0107emo spojiti u jedan deo. Ukupan broj operacija je jednak zbiru broja operacija deljenja na po\u010detku funkcije, broju operacija za spajanje leve polovine, broja operacija za spajanje desne polovine i broja 1 za spajanje dva dobijena dela (polovine).</p> <p>Zna\u010di, za re\u0161avanje zadatka smo iskoristili tehniku podeli pa vladaj (\\(divide\\ and\\ conquer\\)). Primetimo da je slo\u017eenost jednog rekurzivnog poziva (odnosno pripreme za rekrzivne pozive tokom izvr\u0161avanja tog rekurzivnog poziva) \\({\\mathcal O}(S)\\), a da se rekurzivno poziva funkcija za nizove u kojima je suma du\u017eina delova \\(\\frac{S}{2}\\), pa je po master teoremi slo\u017eenost kompletnog funkcije \\({\\mathcal O}(S\\log S)\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/02_kompresovani_niz/","title":"2 - Kompresovani niz","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Aleksa Milisavljevi\u0107 Aleksa Milisavljevi\u0107 Aleksa Milisavljevi\u0107 Vladimir Milenkovi\u0107"},{"location":"takprog/2022%20%7C%202023/05_SIO/02_kompresovani_niz/#resenje-kada-n-leq-10","title":"Re\u0161enje kada \\(N \\leq 10\\)","text":"<p>U ovom podzadatku mo\u017eemo testirati svaki mogu\u0107i niz primene operacija. Za dato \\(K\\) imamo \\(N-K+1 = (N - (K-1))\\) opcija za primenu prve operacije. Posle prvog koraka, broj elemenata se smanji za \\(K-1\\), pa u drugom koraku imamo \\(N-2\\cdot(K-1)\\) opcija. Ukupno, postoji \\((N-(K-1)) \\cdot (N-2\\cdot(K-1)) \\cdot ... \\cdot ( (K-1) + (N\\mod(K-1)))\\) razli\u010ditih sekvenci operacija koje rezultuju nizom du\u017eine manje od \\(K\\). Prethodni proizvod je ograni\u010den sa \\((N-1)!\\), pa je slo\u017eenost ovog re\u0161enja \\(O(N!)\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/02_kompresovani_niz/#resenje-kada-k-leq-3-i-n-leq-100000","title":"Re\u0161enje kada \\(K \\leq 3\\) i  \\(N \\leq 100.000\\)","text":"<p>Za naredne podzadatke moramo malo detaljnije analizirati kako primene operacija uti\u010du na niz. Za ovaj podzadatak, dovoljno je primetiti da su elementi krajnjeg niza zapravo kompresovani blokovi uzastopnih elemenata u po\u010detnom nizu. Ti blokovi uzastopnih elemenata imaju du\u017einu \\(1 \\mod (K-1)\\), \u0161to je lako pokazati. Naime, u po\u010detnom nizu blokovi imaju du\u017einu \\(1\\). Svakom daljom kompresijom se \\(K\\) takvih blokova spaja u jedan blok, koji po modulu \\(K-1\\) ima du\u017einu \\(K \\cdot 1 = K = 1 \\mod (K-1)\\). Kona\u010dno, za ovaj podzadatak mo\u017eemo da analiziramo dva slu\u010daja:</p> <ul> <li>\\(K=2\\) - tada krajnji niz ima du\u017einu \\(1\\), a vrednost tog elementa je \\(\\textbf{or}\\) vrednosti svih elemenata u po\u010detnom nizu</li> <li>\\(K=3\\) - tada krajnji niz ima du\u017einu \\(1\\) ukoliko je \\(N\\) neparno i \\(2\\), ukoliko je \\(N\\) parno. Ukoliko je \\(N\\) neparno, tada je vrednost jedinog elementa \\(\\textbf{or}\\) vrednosti svih elemenata u po\u010detnom nizu. Kona\u010dno, ukoliko je \\(N\\) parno, mo\u017eemo da iteriramo po zavr\u0161etku prvog bloka, koji se zavr\u0161ava na nekom neparnom indeksu u po\u010detnom nizu i da posmatramo prefiksni i sufiksni \\(\\textbf{or}\\) elemenata po\u010detnog niza. Re\u0161enje zadatka je minimum njihove sume.</li> </ul>"},{"location":"takprog/2022%20%7C%202023/05_SIO/02_kompresovani_niz/#resenje-kada-n-le-3000","title":"Re\u0161enje kada \\(N \\le 3.000\\)","text":"<p>Ovaj i naredne podzadatke re\u0161avamo dinami\u010dkim programiranjem. Vrednost \\(dp[i]\\) \u0107e predstavljati minimalnu vrednost sume ukoliko se ograni\u010dimo isklju\u010divo na prvih \\(i\\) elemenata niza. Prvo moramo primetiti da je uslov da se operacije primenjuju sve dok niz ima dovoljno elemenata su\u0161tinski neva\u017ean. Naime, primenom operacije se suma elemenata niza ne mo\u017ee pove\u0107ati, te je svakako uvek bolje primeniti \u0161to vi\u0161e operacija. Za svaku poziciju \\(i\\), iteriramo po zavr\u0161noj poziciji prethodnog bloka. Rekurentna formula za na\u0161e dinami\u010dko programiranje je \\(\\min_j (dp[j] + A[j+1] \\textbf{ or } A[j+2] \\textbf{ or } ... \\textbf{ or } A[i])\\), gde je \\(i - j = 1 \\mod (K-1)\\) (jer prema opservaciji iz prethodnog podzadatak va\u017ei da je du\u017eina svakog bloka \\(1 \\mod (K-1)\\)). Ukoliko odr\u017eavamo vrednost \\(A[j+1] \\textbf{ or } A[j+2] \\textbf{ or } ... \\textbf{ or } A[i]\\), dok iteriramo po \\(j\\), dobijamo re\u0161enje slo\u017eenosti \\(O(N^2)\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/02_kompresovani_niz/#resenje-kada-su-sve-vrednosti-u-nizu-a-su-1-ili-2-i-n-le-100000","title":"Re\u0161enje kada su sve vrednosti u nizu \\(A\\) su \\(1\\) ili \\(2\\) i \\(N \\le 100.000\\)","text":"<p>I u ovom podzadatku ponovo posmatramo blokove. Svaki blok ima vrednost \\(1\\), \\(2\\) ili \\(3\\). Me\u0111utim, blok koji se zavr\u0161ava na nekoj poziciji \\(i\\) mo\u017ee da ima samo dve vrednosti, a to su \\(A[i]\\) i \\(3\\) (npr. ukoliko \\(i\\)-ti element ima vrednost \\(1\\), blok koji se zavr\u0161ava na poziciji \\(i\\) nikako ne mo\u017ee da ima vrednost \\(2\\) i obrnuto). Za svaku krajnju poziciju, fiksiramo jednu od te dve mogu\u0107e vrednosti poslednjeg bloka i posmatramo sve mogu\u0107e startne pozicije trenutnog bloka. Za njih mo\u017eemo da odr\u017eavamo minimum koriste\u0107i neku strukturu podataka, na primer <code>set</code>.</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/02_kompresovani_niz/#resenje-kada-n-le-100000","title":"Re\u0161enje kada \\(N \\le 100.000\\)","text":"<p>Re\u0161enje ovog podzadatka predstavlja nadogradnju na re\u0161enje podzadatka u kojem su sve vrednosti u nizu \\(A\\) jednake \\(1\\) ili \\(2\\). Mo\u017eemo da primetimo da postoji najvi\u0161e \\(\\log_2 \\max_i A[i] \\leq 30\\) mogu\u0107ih razli\u010ditih vrednosti bloka koji se zavr\u0161ava na poziciji \\(i\\) za svako \\(i\\). Sada mo\u017eemo da fiksiramo jednu od tih vrednosti i prona\u0111emo najraniju poziciju (ozna\u010dimo tu poziciju sa \\(j\\)) na kojoj je trenutni blok mogao da po\u010dne da bi imao tu vrednost. Zatim, koriste\u0107i neku strukturu, npr. <code>set</code> prona\u0111emo minimum vrednosti \\(dp\\)-ova prethodnog bloka od pozicije \\(j\\) pa do \\(i\\). Ovo mo\u017eemo da realizujemo koriste\u0107i <code>set</code> na slede\u0107i na\u010din. Mo\u017eemo da \u010duvamo \\(K-1\\) <code>set</code>-ova, jedan za svaku krajnju pozicija moduo \\(K-1\\). U svakom od njih mo\u017eemo da \u010duvamo vrednosti \\(dp\\)-ova sortirano po indeksu. Kona\u010dno kada ubacujemo \\(dp[i]\\) u <code>set</code> koji odgovara modulu \\(i \\mod (K-1)\\), treba da izbacimo sve one koje koji se pojavljuju pre njega, a imaju ve\u0107u vrednost od \\(dp[i]\\). Kada tra\u017eimo minimum od pozicije \\(j\\) do pozicije \\(i\\), mo\u017eemo da pozovemo ugra\u0111enu funkciju <code>lower_bound</code>, da bi prona\u0161li prvi indeks ve\u0107i od \\(j\\) koji postoji u odgovaraju\u0107em <code>set</code>-u. Slo\u017eenost ovog re\u0161enja je \\(O(N \\log N \\log \\max_i A[i])\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/02_kompresovani_niz/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Za glavno re\u0161enje i poslednji podzadatak, dovoljno je optimizovati slo\u017eenost na \\(O(N \\log \\max_i A[i])\\). Ovo se mo\u017ee posti\u0107i na primer tako \u0161to zamenimo <code>set</code> sa spars tabelom. </p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/03_najslabija-karika/","title":"3 - Najslabija karika","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Pavle Martinovi\u0107 Pavle Martinovi\u0107 Aleksa Milisavljevi\u0107"},{"location":"takprog/2022%20%7C%202023/05_SIO/03_najslabija-karika/#resenje-kada-n-leq-10-qleq100","title":"Re\u0161enje kada \\(N \\leq 10\\), \\(Q\\leq100\\)","text":"<p>Primetimo da svaki niz koji dobijemo na kraju je podsekvenca po\u010detnog, pa za dati niz postoji najvi\u0161e \\(2^N\\) mogu\u0107ih podsekvenci i za svaku mo\u017eemo gramzivim algoritmom da proverimo da li se zaista mo\u017ee dobiti opisanim operacijama. \\(O(Q2^NN)\\) </p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/03_najslabija-karika/#resenje-kada-nq-leq-500","title":"Re\u0161enje kada \\(N,Q \\leq 500\\)","text":"<p>Za svaki podzadatak nadalje \u0107emo morati da se udubimo u koncept Dekartovog stabla niza. Naime, to je binarno stablo koje se konstrui\u0161e rekurzivno (u kvadratnom vremenu) na slede\u0107i na\u010din: neka je \\(i\\) indeks maksimuma u na\u0161em nizu, onda je \u010dvor \\(i\\) koren na\u0161eg stabla. Zatim, podelimo niz na dva niza \\(1\\),\\(2\\),\\(\\cdots\\),\\(i-1\\) i \\(i+1,i+2,\\cdots,N\\) i na\u0111emo Dekartovo stablo od ova dva podniza, \u010dijim ka\u010danjem na koren \\(i\\) kao levo i desno dete, redom, \u0107emo dobiti Dekartovo stablo celog niza. Sada mo\u017ee se primetiti da je mogu\u0107e ukloniti neki \u010dlan niza akko smo ve\u0107 uklonili celo njegovo podstablo u Dekartovom stablu. Stoga je zadatak zapravo ekvivalentan sa tra\u017eenjem broja na\u010dina kako mo\u017eemo da izaberemo nekoliko disjunktnih podstabala Dekartovog stabla datog niza. Ovo se re\u0161ava prostim dinami\u010dkim programiranjem na stablu. Ako su \\(l\\) i \\(r\\) deca \u010dvora \\(u\\), onda mo\u017eemo da sra\u010dunamo \\(dp[u]=dp[l]\\cdot dp[r]+1\\). \\(O(QN^2)\\)</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/03_najslabija-karika/#resenje-kada-nq-leq-500_1","title":"Re\u0161enje kada \\(N,Q \\leq 500\\)","text":"<p>Ovaj podzadatak se radi sli\u010dno kao i prethodni, samo je potrebno da se br\u017ee izgradi Dekartovo stablo. Ovo mo\u017ee da se uradi, na primer, tako \u0161to se za svaki element niza na\u0111e prvi element levo i desno ve\u0107i od njega (preko takozvane \"stek fore\"), i onda je njegov roditelj u Dekartovom stablu upravo manji od ta dva broja. \\(O(NQ)\\)</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/03_najslabija-karika/#resenje-kada-svaki-upit-sadrzi-maksimum","title":"Re\u0161enje kada svaki upit sadr\u017ei maksimum","text":"<p>Nadalje je jasno da je klju\u010dni problem kako brzo nalaziti Dekartovo stablo za podniz ili bar dovoljno informacija o tom Dekartovom podstablu. Ako interval sadr\u017ei \\(M\\) \u010diji je indeks \\(i\\) onda je jasno da je dovoljno re\u0161iti zadatak samo za \\([L,i]\\) i \\([i,R]\\) odvojeno, nakon \u010dega lako nalazimo re\u0161enje ukupno. Sada \u0107emo ra\u010dunati odgovor za svaki interval oblika \\([i,R]\\) nekom vrstom dinami\u010dkog programiranja, gde \u0107emo se pozivati na vrednosti koje smo sra\u010dunali dinami\u010dkog programiranja za ceo niz (ako bismo prvo re\u0161ili zadatak za ceo niz kao u prethodnom podzadatku). Naime neka je \\(last[R]\\) najve\u0107i indeks broja ve\u0107eg od onog na poziciji \\(R\\). Ako je \\(last[R]=i\\), potrebno nam je samo re\u0161enje za interval \\([i+1,R-1]\\). Ukoliko nije, onda je re\u0161enje jednako re\u0161enju za \\(last[R]\\), ali treba da mu dodamo jo\u0161 proizvod re\u0161enja za \\([last[R]+1,R-1]\\),\\(\\cdots\\), \\([last^k[R]+1, last^{k-1}[R]-1]\\) (u kasnijim podzadacima \u0107emo videti ta\u010dan razlog ovome). Me\u0111utim, sva ova re\u0161enja potproblema koja nam trebaju su zapravo ve\u0107 izra\u010dunati u Dekartovom stablu, tako da ve\u0107 za te intervale znamo da re\u0161imo problem i kombinovanjem svega toga mo\u017eemo re\u0161iti ovaj podzadatak. </p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/03_najslabija-karika/#resenje-kada-je-permutacija-nasumicna","title":"Re\u0161enje kada je permutacija nasumi\u010dna","text":"<p>Inspirisani prethodnim podzadatkom, jasno je da se nekako sve vrti oko maksimuma na intervalu \\(L,R\\), tako da bi bilo lepo kada bismo na\u0161li vezu maksimuma na intervalu i Dekartovog stabla. Nije te\u0161ko uveriti se da je najmanji zajedni\u010dki predak od \\(L\\) i \\(R\\) zaista maksimum na intervalu \\([L,R]\\). Me\u0111utim, sada dolazi pitanje, kako ta\u010dno izgleda to Dekartovo stablo podniza, i da li mo\u017eemo da ga izrazimo preko Dekartovog stabla po\u010detnog niza. Ispostavlja se da mo\u017eemo, i to na slede\u0107i na\u010din: krenimo od \u010dvora \\(L\\) i njegovog desnog podstabla. Sada idemo putem od \\(L\\) do \\(LCA(L,R)\\): ako do\u0111emo u neki \u010dvor iz levog deteta, onda taj \u010dvor izbacujemo, a \u010dvor iz kog smo do\u0161li prespojimo sa njegovim dedom. Ovo isto radimo sa \\(R\\), samo zamenimo re\u010di \"levo\" i \"desno\". Uverite se sami da ovakva konstrukcija radi!! Kako je permutacija random generisana, zapravo mo\u017eemo da tvrdimo da je Dekartovo stablo dubine reda veli\u010dine \\(O(\\log N)\\), pa ovakvu simulaciju mo\u017eemo da vr\u0161imo u \\(O(Q\\log N)\\), kao i onda prera\u010dunavanje vrednosti dinami\u010dkog programiranja za tih \\(O(\\log N)\\) novih vrednosti po upitu.</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/03_najslabija-karika/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Sada treba nekako izbe\u0107i ru\u010dnu simulaciju pravljenja novog Dekartovog stabla, kada ne znamo da je ono plitko. Ovo \u0107emo raditi, naravno, putem *sparse tabela. Naime za svaki \u010dvor \u0107emo primetiti da nam je operacija koja se primeni na trenutnu vrednost \\(dp\\) biti oblika linearna oblika \\(dp\\) \\(-&gt;dp\\cdot x+c\\). \u0160ta mislimo pod ovime? Pa ako imamo vrednost \\(dp[l]\\), onda nalazimo vrednost za \\(dp[u]=dp[l]\\cdot dp[r]+1\\), zna\u010di transformaciju od \\(dp[l]\\) u \\(dp[u]\\) imamo po gornjoj formuli za \\(k=dp[r]\\), \\(c=1\\). Me\u0111utim, ono \u0161to je va\u017eno primetiti je da je kompozicija dve operacije ovog tipa opet operacija tog tipa (kompozivcija dve linearne funkcije je opet linearna). Tako da mi u sparse tabeli mo\u017eemo na\u0107i kako izgleda formula za \\(dp[2^k\\text{-ti predak od }u]\\) preko \\(dp[u]\\). Ono \u0161to jo\u0161 va\u017ei je da je \\(x\\cdot1+0\\), neutral za operaciju kompozicije funkcije. Onda nalazimo re\u0161enje na slede\u0107i na\u010din: imamo dve tabele, jedna koja kad idemo na gore od nekog \u010dvora kad u\u0111emo sleva mno\u017ei rezultat sa vrednosti \\(dp\\) od desnog deteta i dodaje \\(1\\), a ako ulazi sdesna onda ne radi ni\u0161ta i druga koja radi obrnuto. Nije te\u0161ko videti da se na ovaj na\u010din ako krenemo od \\(L\\) do \\(LCA(L,R)\\) upravo ra\u010duna re\u0161enje problema za taj podinterval, a takve operacije su sve linearne, pa svaku od njih mo\u017eemo pretvoriti u spars tabelu, koja nam dozvoljava brzo ra\u010dunanje re\u0161enja za taj podinterval. Zatim radimo to za desnu stranu i spajamo re\u0161enja kao u podzadatku \\(4\\). Slo\u017eenost \\(O(Q\\log N)\\). </p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/04_opet_xor/","title":"4 - Opet XOR","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Dimitrije Erdeljan Aleksa Milisavljevi\u0107 Pavle Martinovi\u0107"},{"location":"takprog/2022%20%7C%202023/05_SIO/04_opet_xor/#resenje-kada-je-q-leq-10-xi-leq-10-za-upite-tipa-2","title":"Re\u0161enje kada je \\(Q \\leq 10\\), \\(X[i] \\leq 10\\) za upite tipa \\(2\\)","text":"<p>U ovom podzadatku mo\u017eemo testirati sve mogu\u0107e permutacije i proveriti da li su XOR-ovi svih prefiksa rastu\u0107i. Slo\u017eenost ovog re\u0161enja \\(O(Q\\cdot N!)\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/04_opet_xor/#resenje-kada-je-n-q-leq-200","title":"Re\u0161enje kada je \\(N, Q \\leq 200\\)","text":"<p>Za ovaj podzadatak neophodno je da razmotrimo detaljnije kada je niz ksortasti\u010dan. Za po\u010detak, mo\u017eemo da primetimo dodavanje elementa sa vredno\u0161\u0107u \\(0\\) na proizvoljnu poziciju ne uti\u010de na monotonost prefiksnih XOR-eva, pa te elemente mo\u017eemo da zanemarimo. Dodatno \u0107emo, zarad jasnije notacije, u obja\u0161njenju ovog podzadatka pretpostaviti da je dat samo jedan upit na koji treba odgovoriti. Razmatra\u0107emo slede\u0107e gramzivo re\u0161enje: iterativno gradimo permutaciju tako da naredni izabrani element prouzrokuje najmanji mogu\u0107i prefiksni XOR, i da taj naredni prefiksni XOR jo\u0161 uvek bude ve\u0107i od trenutnog. Neka je trenutni prefiksni XOR jednak \\(x\\). Ozna\u010dimo sa \\(B_i\\) poziciju vode\u0107eg bita broja \\(A_i\\). Neka je ba\u0161 \\(A_i\\) naredni odabrani elment. Da bi naredni XOR bio ve\u0107i, u binarnom zapisu broja \\(x\\) mora da stoji \\(0\\) na poziciji \\(B_i\\). Od svih narednih elementa koji zadovoljavaju ovaj uslov, dovoljno je da odaberemo onaj koji \u0107e \u0161to slabiju \\(0\\) broja \\(x\\) promeniti u \\(1\\). Jedna od strategija koja rezultuje u ovakvom na\u010dinu biranja elemenata je upravo odabir elementa koji \u0107e \u0161to manje da pove\u0107a prefiksni XOR. Na intuitivnom nivou, mo\u017eemo shvatiti da ovim izborom \u0161to manje ve\u0107ih pozicija na kojima su \\(0\\) menjamo u \\(1\\). Ova strategija \u0107e uvek proizvesti niz rastu\u0107ih prefiksnih XOR-eva kad god je niz ksortasti\u010dan. Pretpostavimo da postoji re\u0161enje u kojem na poziciji \\(j\\) u permutaciji nije odabran element kojim se najslabija \\(0\\) transformi\u0161e u \\(1\\) i ozna\u010dimo tu poziciju na kojoj je najslabija \\(0\\) sa \\(p\\). Posmatrajmo u tom re\u0161enju prvu poziciju \\(k &gt; j\\) u permutaciji nakon trenutne na kojoj se nalazi element \\(A_l\\), takav da je \\(B_l = p\\). Tada mo\u017eemo da modifikujemo permutaciju tako \u0161to na poziciju \\(j\\) postavimo \\(A_l\\), a sve ostale elemente pomerimo za jedno mesto desno. Nakon toga, potrebno je jo\u0161 da razre\u0161imo probleme koji su mogli nastati sa elementima \\(A_m\\) koji su u permutaciji bili izme\u0111u \\(j\\) i \\(k\\) i takvim da \\(B_m &lt; p\\). Nakon ovog tehni\u010dkog detalja kojeg ostavljamo \u010ditaocu, dobija se permutacija koja ima neopadaju\u0107i niz prefiksnih XOR-eva, a element \\(A_l\\) na poziciji \\(j\\). Slo\u017eenost ovog re\u0161enja je \\(O(Q\\cdot N^2)\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/04_opet_xor/#resenje-kada-n-q-leq-5000","title":"Re\u0161enje kada \\(N, Q \\leq 5000\\)","text":"<p>U prethodnom podzadatku smo primetili da je dovoljno odabrati element koji \u0161to slabiju \\(0\\) trenutnog prefiksnog XOR-a transformi\u0161e u \\(1\\). Dovoljno je da elemente \u010duvamo prema njihovom najja\u010dem bitu i da iteracijom kroz sve pozicije na kojima su \\(0\\) (po\u010dev\u0161i od najslabije) u binarnom zapisu trenutnog prefiksnog XOR-a odaberemo proizvoljan element koji ima \\(1\\) kao najja\u010di bit na toj poziciji. Slo\u017eenost ovog re\u0161enja je \\(O(Q\\cdot N \\cdot \\log_2 \\max_i A_i)\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/04_opet_xor/#resenje-kada-ai-64","title":"Re\u0161enje kada \\(A[i] &lt; 64\\).","text":"<p>Primetimo da su u ovom slu\u010daju i prefiksni XOR-evi do \\(64\\). Ukoliko niz iz upita ima vi\u0161e od \\(64\\) pozitivne vrednost, odgovor je <code>false</code>. U suprotnom mo\u017eemo da primenimo re\u0161enje iz prethodnog opisanog podzadatka. Slo\u017eenost ovog re\u0161enja je \\(O(Q\\cdot \\max_i A_i \\cdot \\log_2 \\max_i A_i)\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/04_opet_xor/#resenje-kada-ti-2","title":"Re\u0161enje kada \\(T[i] = 2\\)","text":"<p>Za ovaj podzadatak je neophodno da dalje optimizujemo proveru uslova iz gramzivog re\u0161enja. Primetili smo da je bilo dovoljno birati proizvoljan broj koji ima najve\u0107i bit postavljen na poziciji \u0161to slabije \\(0\\) iz trenutnog prefiksnog XOR-a. Sada je potrebno da vidimo kada \u0107emo uspeti da odaberemo sve takve brojeve. Odabirom tog broja se \\(0\\) na toj poziciji promenila u \\(1\\) u narednim prefiksnim XOR-evima. Da bi opet odabrali broj koji ima \\(1\\) na toj poziciji, potrebno je da se ponovo u prefiksnom XOR-u na\u0111e \\(0\\). Dakle, za svako (osim poslednjeg) postavljanje tog bita na \\(1\\) u aktuelnom prefiksnom XOR-u, potrebno je da ga kasnije resetujemo, postavljanjem na \\(0\\). Ozna\u010dimo sa \\(p_i\\) broj elemenata u kojima je bit na poziciji \\(i\\) najja\u010di, a sa \\(q_i\\) broj elemenata u kojima je taj bit postavljen, ali ne kao najja\u010di. Potreban i dovoljan uslov je da \\(q_i \\geq p_i + 1\\). Vrednosti \\(p_i\\) i \\(q_i\\) u nekom podnizu mo\u017eemo prona\u0107i kori\u0161\u0107enjem prefiksnih suma. Slo\u017eenost ovog re\u0161enja je \\(O(Q \\cdot \\log_2 \\max_i A_i)\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/04_opet_xor/#glavno-resenje","title":"Glavno re\u0161enje","text":"<p>Za glavno re\u0161enje bi bilo neophodno i da vr\u0161imo a\u017euriranje tih prefiksnih suma. Ovo zahteva da koristimo fenvikovo stablo (tj. <code>bit</code>). U fenvikovom stablu za svako \\(i\\) pamtimo i a\u017euriramo koliko elemenata u odgovaraju\u0107em intervalu ima \\(1\\) kao najja\u010di bit na poziciji \\(i\\), a koliko njih ima \\(1\\), ali ne kao najja\u010di bit. Slo\u017eenost ovog re\u0161enja je \\(O(Q \\cdot \\log_2 \\max_i A_i \\cdot \\log_2 N)\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/05_vooda/","title":"5 - Majnkraft vOOda","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Pavle Martinovi\u0107 Igor Pavlovi\u0107 i Pavle Martinovi\u0107 Igor Pavlovi\u0107 i Pavle Martinovi\u0107 Igor Pavlovi\u0107 i Pavle Martinovi\u0107"},{"location":"takprog/2022%20%7C%202023/05_SIO/05_vooda/#koreni-u-korovima","title":"Koreni u korovima","text":"<p>\u010cak iako je inspiracija za zadatak zaista do\u0161la iz na\u010dina kako se propagiraju tzv. source block-ovi u igrici Majnkraft, pojedini u\u010denici mogli su prepoznati vezu izme\u0111u ovog zadatka i takmi\u010darskog zadatka iz folklora: Data je tabla \\(10\\times10\\) i \\(9\\) polja su obrasla korovom. Ako je polje susedno dva polja obrasla korovom onda i ono postane obraslo korovom. Da li je mogu\u0107e da cela tabla bude obrasla korovom? U ovom zadatku je odgovor NE, a razlog za\u0161to je odgovor NE mo\u017ee nam poslu\u017eiti kao dobra vodilja za re\u0161avanje ovakvog zadatka.</p> <p>Naime obim figure na kom je obrasla korov nikad ne raste, mo\u017ee samo da se smanji. Ako se pojavi polje koje je susedno \\(3\\) ili \u010dak \\(4\\) korova, onda nam se obim smanjuje. Kako je na po\u010detku obim najvi\u0161e \\(36\\), a na kraju treba biti \\(40\\), odgovor na pitanje u zadatku je negativan.</p> <p>Glavna heuristika koju mo\u017eemo odmah poneti odavde je da nikad (ili barem da se trudimo da izbegnemo) ne poplavimo polje  koje je susedno ve\u0107 nekom poplavljenom polju.</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/05_vooda/#analiza-primera","title":"Analiza primera","text":"<p>Prvi primer je mali i mo\u017ee se uraditi manje vi\u0161e ru\u010dno. Ocena obima iz prvog dela nam daje da je \\(27\\) optimalan odgovor.</p> <p>Drugi primer je ve\u0107i ali mu je svaka pozevazana komponenta pravougaonik. Za pravougaonike se problem mo\u017ee re\u0161iti ta\u010dno, i da se doka\u017ee ta\u010dnost ocenom gore.</p> <p>Tre\u0107i primer je mali, ali je verovatno te\u0161ko re\u0161iti ru\u010dno osim ako se ulo\u017ei jako puno vremena, ve\u0107 je realnije da ga takmi\u010dar programom napravi nekako i onda ru\u010dno doradi ako treba. I ovde je na\u0111ena ocena optimalna.</p> <p>\u010cetvrti primer je kao komplikovana verzija drugog gde imamo pravougaonike, ali oni mogu i da se seku. Komisijsko re\u0161enje ovde nalazi odgovor \\(16316\\), dok nam obim daje granicu od \\(16315\\), tako da smo ovaj primer re\u0161ili ili optimalno ili skoro optimalno.</p> <p>Primeri \\(5-8\\) su malo divljiji, i ocena koja je data u prvoj sekciji nije toliko blizu konstrukcija koja je na\u0161la komisija. Primeri \\(5\\) i \\(7\\) su crtani rukom, dok su \\(6\\) i \\(8\\) random \u0161um, sa razli\u010ditim gustinama. Primer \\(8\\) je ogroman, tako da bilo \u0161ta malo sporije mo\u017ee jako dugo da se izvr\u0161ava. Sa njim moramo biti posebno pa\u017eljivi</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/05_vooda/#autorsko-resenje-1-86-poena-resava-4-primer","title":"Autorsko re\u0161enje 1 (86 poena, re\u0161ava 4. primer)","text":"<p>Svaki put kad postavimo novu vodu lako mo\u017eemo da simuliramo kako se voda dalje kre\u0107e pomo\u0107u nekog algoritma nalik flood-fill algoritma. Prvo postavimo vodu u polja koja imaju maks jednog prohodnog suseda. Dalje svakom polje dodelimo neku te\u017einu sa kojom ga treba izabrati. Ako je ve\u0107 susedan nekom poplavljenom polju, \u0161teti\u0107emo obimu, tako da mu na te\u017einu dodajemo \\(-10000\\). Za svako susedno polje koje \u0107e postati poplavljeno ako dodamo vode na to polje dodamo \\(1000\\). Bolje je stavljati u \u0107o\u0161kove nego na otvoreno empirijki, pa dodamo na te\u017einu \\(100\\cdot(4-\\deg)\\). Najzad (i ovo se ispostavlja kao klju\u010dno za nala\u017eenja re\u0161enja u priemru \\(4\\)) dodamo malu random te\u017einu, do \\(10\\) na primer. U svakom trenutku biramo polje sa najve\u0107om te\u017einu i njega poplavimo i ispropagiramo sve. Za svako plavljenje moramo da a\u017euriramo te\u017eine \\(12\\) polja koji su na distanci najvi\u0161e \\(2\\) od poplavljenog polja, pa ceo algoritam radi jako brzo. Na primer, osmi primer re\u0161ava u roku od jednog minuta.</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/05_vooda/#autorsko-resenje-2-98-poena-resava-sve-osim-4-og-primera","title":"Autorsko re\u0161enje 2 (98 poena, re\u0161ava sve osim 4-og primera)","text":"<p>Anlogno prethodnom re\u0161enju mo\u017eemo prvo postaviti vodu u ona polja koja imaju ta\u010dno jednog slobodnog suseda a zatim simulirati dodavanje novih blokova primenom nekog algoritma za obilazak grafa. Klju\u010dna razlika ovog re\u0161enja u odnosu na prethodno je \u0161to za naredno poplavljeno polje biramo ono polje koje \u0107e poplaviti najve\u0107i broj polja ukoliko na njega postavimo blok sa vodom. Za pronala\u017eenje takvog polja neophodno je simulirati poplavu za svakog kandidata koji mo\u017ee poplaviti vi\u0161e od jednog polja, to jest ima bar jednog suseda koji je susedan sa ta\u010dno jednim poplavljenim poljem. Primetimo da je slo\u017eenost jedne iteracije ograni\u010dena odozgo sa brojem kandidata u toj iteraciji puta broj poplavljenih polja nakon te iteracije. Na osnovu toga mo\u017eemo zaklju\u010diti da slo\u017eenost ovog re\u0161enja nije ve\u0107a od \\(O(N^2M^2)\\). Me\u0111utim u prilo\u017eenim primerima je broj kandidata u svakoj iteraciji zna\u010dajno manji od \\(NM\\) pa je i slo\u017eenost ovog re\u0161enja zna\u010dajno manja i mo\u017ee se primeniti na primerima od 1 do 7. Za re\u0161enje primera 8 u vremenskom periodu prikladnom za du\u017einu trajanja takmi\u010denja neophodno je izdeliti celu tablu na manje table dimenzija 300x300 i re\u0161iti ih zasebno a zatim spojiti u jedno re\u0161enje. Da bismo osvojili poslednjih par poena na ovom zadatku potrebno je primetiti da re\u0161enje zavisi od polja koje izaberemo izme\u0111u onih polja sa jednakim rezultatom simulacije. Kako bismo dodatno pobolj\u0161ali skor mogu\u0107e je primeniti isti algoritam na razlicite izometrijske transformacije ulaza i izabrati najbolje re\u0161enje.</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/06_parovi/","title":"6 - Parovi","text":"Autor Tekst i test primeri Analiza r\u0435\u0161enja Testiranje Jovan Bengin Jovan Bengin Mom\u010dilo To\u0161i\u0107 Jovan Bengin"},{"location":"takprog/2022%20%7C%202023/05_SIO/06_parovi/#resenje-kad-m-leq-18","title":"Re\u0161enje kad \\(M \\leq 18\\)","text":"<p>U ovom slu\u010daju mo\u017eemo isprobati svako razapinjuju\u0107e stablo (biranjem svakog podskupa grana), na\u0107i sva minimalna i za svaki par \u010dvorova (kojih isto ima malo jer je graf povezan) na\u0107i i dodati re\u0161enje.  Tada je slo\u017eenost \\(O(N^2 2^M)\\)</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/06_parovi/#resenje-kad-m-k-n-leq-50","title":"Re\u0161enje kad \\(M = K, N \\leq 50\\)","text":"<p>Uo\u010dimo da \u0107e te\u017eina svake grane biti 1. Dakle, MST je svako razapinjuju\u0107e stablo, a kako je i broj \u010dvorova manji, mo\u017eemo da izra\u010dunamo re\u0161enje za svaki par na tzv. pohlepan na\u010din. Ovde je potrebno uraditi analizu slu\u010dajeva, prebrojimo sve \u010dvorove sa direktnim vezama do ona dva koje posmatramo, oduzimaju\u0107i one koji su zajedni\u010dki (s tim da se s jednim mogu oba povezati ukoliko ne postoji grana izme\u0111u njih). Slo\u017eenost \u0107e biti \\(O(N^2(N+M))\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/06_parovi/#resenje-kad-je-n-leq-100-m-leq-200","title":"Re\u0161enje kad je \\(N \\leq 100, M \\leq 200\\)","text":"<p>Mo\u017eemo ponovo re\u0161avati za svaka dva \u010dvora, s tim \u0161to pu\u0161tamo simulaciju nala\u017eenja MST sa optimalnim biranjem grana tako da se maksimizuju one koje uklju\u010duju neki od dva odabrana \u010dvora. Slo\u017eenost je u ovom slu\u010daju \\(O(N^2 M\\log{M})\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/06_parovi/#resenje-kad-k-leq-6","title":"Re\u0161enje kad \\(K \\leq 6\\)","text":"<p>Za ovo re\u0161enje potrebno je pre\u0107i na druga\u010diji na\u010din prebrojavanja (koji se koristi i u celon re\u0161enju) - grupi\u0161emo grane sa jednakim te\u017einama (ka\u017eemo da je \u010dvor u grupi ako postoji grana u grupi koja ga sadr\u017ei) i brojimo koliko puta grane iz date grupe \"figuri\u0161u\" u kona\u010dnom zbiru (dakle bar jedan od selektovanih \u010dvorova je neki iz grupe). Po\u0161to Kruskalov algoritam dodaje grane u sortiranom redosledu, mo\u017eemo ra\u010dunati da kada posmatramo grupu te\u017eine \\(W\\) su \u010dvorovi ve\u0107 povezani u komponente koje formiraju grane te\u017eina ispod \\(W\\). Da bi se formirao MST svakako se u njega dodaje neki podskup novih grana, a kako je broj \\(K\\) mali, mo\u017eemo ru\u010dno probati svaki podskup i videti koliko grane doprinose zbiru (za svaka dva \u010dvora koja se pojavljuju u grupi kao krajevi veza). Kako ima \\(\\frac{M}{K}\\) grupa, a \\(O(K)\\) i \u010dvorova i grana u grupi, slo\u017eenost je \\(O(2^K MK)\\).</p>"},{"location":"takprog/2022%20%7C%202023/05_SIO/06_parovi/#resenje-za-pun-broj-poena","title":"Re\u0161enje za pun broj poena","text":"<p>Mogu\u0107e je izvr\u0161iti prebrojavanje pojavljivanja grana u maks stepeninma \u010dvorova iz grupe i br\u017ee, tako da ne postoji dodatni faktor osim kvadratnog po \\(K\\). Posmatrajmo veze \u010dvorova iz grupe sa ve\u0107 formiranim komponentama. Fiksiramo 2 \u010dvora u grupi i za njih dodajemo broj komponenti s kojima su povezani, oduzimaju\u0107i broj s kojim su oba povezana, sa obra\u0107anjem pa\u017enje na specijalne slu\u010dajeve (neki od dva \u010dvora povezan je sa komponentom od ovog drugog, u istoj su komponenti, ili postoji direktna veza izme\u0111u dva selektovana \u010dvora). Ovde se radi ne\u0161to donekle sli\u010dno kao u drugom podzadatku, s tim \u0161to je (uslovno re\u010deno) tada jedina grupa bio skup svih \u010dvorova, sada treba dodati i doprinos grana u  trenutnoj grupi na zbir stepena kad selektovan par uklju\u010duje jedan \u010dvor koji se ne pojavljuje u grupi, mada ovo se ra\u010duna samo kao broj komponenti s kojim je povezan onaj \u010dvor koji jeste u grupi (naravno onoliko puta koliko ima \u010dvorova van grupe). Nakon ovog procesa, a\u017euriramo komponente i prelazimo na narednu grupu. Ukupna slo\u017eenost je (istim rezonom kao i pre) \\(O(MK)\\).</p>"}]}